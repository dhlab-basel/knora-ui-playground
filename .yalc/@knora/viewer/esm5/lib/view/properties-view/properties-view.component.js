import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { Router } from '@angular/router';
import { GuiOrder, KnoraConstants, OntologyInformation } from '@knora/core';
/**
 * Shows all metadata (properties) in the resource viewer
 *
 */
var PropertiesViewComponent = /** @class */ (function () {
    // @Output() routeChanged: EventEmitter<string> = new EventEmitter<string>();
    function PropertiesViewComponent(_router) {
        this._router = _router;
        this.loading = false;
        this.KnoraConstants = KnoraConstants;
    }
    /**
     * Navigate to the incoming resource view.
     *
     * @param {string} id Incoming resource iri
     */
    PropertiesViewComponent.prototype.openLink = function (id) {
        this.loading = true;
        // this.routeChanged.emit(id);
        this._router.navigate(['/resource/' + encodeURIComponent(id)]);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", GuiOrder)
    ], PropertiesViewComponent.prototype, "guiOrder", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], PropertiesViewComponent.prototype, "properties", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], PropertiesViewComponent.prototype, "annotations", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], PropertiesViewComponent.prototype, "incomingLinks", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", OntologyInformation)
    ], PropertiesViewComponent.prototype, "ontologyInfo", void 0);
    PropertiesViewComponent = tslib_1.__decorate([
        Component({
            selector: 'kui-properties-view',
            template: "<!-- properties -->\n<div class=\"properties\">\n    <div *ngFor=\"let prop of guiOrder; let last = last\">\n        <div *ngIf=\"properties[prop?.property]\" class=\"property\">\n            <div class=\"property-label\">\n                <!-- label of the property -->\n                <h3 class=\"label mat-subheading-1\">\n                    {{ontologyInfo.getLabelForProperty(prop?.property)}}\n                </h3>\n            </div>\n            <div class=\"property-value\">\n\n                <!-- the value(s) of the property -->\n                <div class=\"property-value-item\" *ngFor=\"let val of properties[prop?.property]; let lastItem = last\">\n                    <span [ngSwitch]=\"val.getClassName()\" [class.list]=\"properties[prop?.property].length > 1\"\n                          [class.lastItem]=\"lastItem\">\n                        <kui-text-value-as-string *ngSwitchCase=\"KnoraConstants.ReadTextValueAsString\"\n                                                  [valueObject]=\"val\">\n                        </kui-text-value-as-string>\n                        <kui-text-value-as-xml *ngSwitchCase=\"KnoraConstants.ReadTextValueAsXml\" [valueObject]=\"val\">\n                        </kui-text-value-as-xml>\n                        <kui-date-value *ngSwitchCase=\"KnoraConstants.ReadDateValue\" [valueObject]=\"val\"\n                                        [calendar]=\"true\" [era]=\"true\">\n                        </kui-date-value>\n                        <kui-link-value class=\"app-link\" *ngSwitchCase=\"KnoraConstants.ReadLinkValue\"\n                                        [valueObject]=\"val\" [ontologyInfo]=\"ontologyInfo\"\n                                        (referredResourceClicked)=\"openLink(val.referredResourceIri)\">\n                        </kui-link-value>\n                        <kui-integer-value *ngSwitchCase=\"KnoraConstants.ReadIntegerValue\" [valueObject]=\"val\">\n                        </kui-integer-value>\n                        <kui-decimal-value *ngSwitchCase=\"KnoraConstants.ReadDecimalValue\" [valueObject]=\"val\">\n                        </kui-decimal-value>\n                        <kui-geometry-value *ngSwitchCase=\"KnoraConstants.ReadGeomValue\" [valueObject]=\"val\">\n                        </kui-geometry-value>\n                        <kui-color-value *ngSwitchCase=\"KnoraConstants.ReadColorValue\" [valueObject]=\"val\">\n                        </kui-color-value>\n                        <kui-uri-value *ngSwitchCase=\"KnoraConstants.ReadUriValue\" [valueObject]=\"val\">\n                        </kui-uri-value>\n                        <kui-boolean-value *ngSwitchCase=\"KnoraConstants.ReadBooleanValue\" [valueObject]=\"val\">\n                        </kui-boolean-value>\n                        <kui-interval-value *ngSwitchCase=\"KnoraConstants.ReadIntervalValue\" [valueObject]=\"val\">\n                        </kui-interval-value>\n                        <kui-list-value *ngSwitchCase=\"KnoraConstants.ReadListValue\" [valueObject]=\"val\">\n                        </kui-list-value>\n                        <kui-textfile-value *ngSwitchCase=\"KnoraConstants.TextFileValue\" [valueObject]=\"val\">\n                        </kui-textfile-value>\n                        <span *ngSwitchDefault>Not supported {{val.getClassName()}}</span>\n                        <br>\n                    </span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n<div class=\"incoming\">\n\n    <!-- annotations are resources like region, sequence etc. -->\n    <!-- TODO: we can't display incoming annotations as expected\n    <div class=\"annotations\">\n        <!-- *ngIf=\"annotations?.length > 0\"> --\n        <h3 class=\"label mat-subheading-1\">\n            Annotations\n        </h3>\n        <mat-list *ngFor=\"let annotation of annotations\">\n            <mat-list-item class=\"kui-link\" (click)=\"openLink(annotation.id)\">\n                <span>{{annotation.label}}</span>\n            </mat-list-item>\n        </mat-list>\n    </div>\n    -->\n\n    <!-- incoming links -->\n    <div class=\"links\" *ngIf=\"incomingLinks?.length > 0\">\n        <h3 class=\"label mat-subheading-1\">\n            Links\n        </h3>\n        <ul>\n            <li *ngFor=\"let incoming of incomingLinks\" class=\"kui-link\" (click)=\"openLink(incoming.id)\">\n                {{incoming.label}}\n            </li>\n        </ul>\n    </div>\n</div>\n",
            styles: [".mat-form-field{width:320px}.fill-remaining-space{flex:1 1 auto}.center{text-align:center}a{text-decoration:none;color:inherit}.kui-link{cursor:pointer;border-bottom:2px solid rgba(0,105,92,.25)}.kui-link:hover{box-shadow:0 -10px 0 rgba(0,105,92,.25) inset}.lv-html-text{max-height:60px;position:relative;overflow:hidden}.lv-read-more{position:absolute;bottom:0;left:0;width:100%;text-align:center;margin:0;padding:30px 0;border-radius:3px}:host{display:-ms-grid;display:grid;-ms-grid-columns:(1fr)[6];grid-template-columns:repeat(6,1fr);gap:16px}:host .incoming,:host .properties{margin-top:16px}:host .properties{-ms-grid-column:1;-ms-grid-column-span:4;grid-column:1/span 4}:host .properties .property{-ms-grid-row:1;grid-row:1/1;display:-ms-grid;display:grid;-ms-grid-columns:(1fr)[4];grid-template-columns:repeat(4,1fr);gap:16px}:host .properties .property .property-label,:host .properties .property .property-value{padding:2px;overflow-wrap:break-word}:host .properties .property .property-label{-ms-grid-column:1;-ms-grid-column-span:1;grid-column:1/span 1}:host .properties .property .property-label .label{text-align:right}:host .properties .property .property-value{padding-top:5px;-ms-grid-column:2;-ms-grid-column-span:3;grid-column:2/span 3}:host .incoming{-ms-grid-column:5;-ms-grid-column-span:2;grid-column:5/span 2;display:-ms-grid;display:grid;gap:16px;-ms-grid-columns:1fr 1fr;grid-template-columns:1fr 1fr;-ms-grid-rows:(minmax(60px,auto))[6];grid-template-rows:repeat(6,minmax(60px,auto))}:host .incoming .annotations,:host .incoming .links{padding:16px;-ms-grid-column:1;-ms-grid-column-span:2;grid-column:1/span 2;border-radius:6px}:host .incoming .annotations ul,:host .incoming .links ul{-webkit-padding-start:5px;padding-inline-start:5px;list-style-type:none}:host .incoming .annotations ul li,:host .incoming .links ul li{margin-bottom:10px;text-indent:-8px}:host .incoming .annotations ul li:before,:host .incoming .links ul li:before{content:\"- \"}:host .incoming .annotations{background:rgba(245,222,179,.39)}:host .incoming .links{background:rgba(222,184,135,.39)}.label{color:rgba(0,0,0,.54)}@media screen and (max-width:768px){.incoming,.properties{-ms-grid-column:1!important;-ms-grid-column-span:6!important;grid-column:1/span 6!important;gap:0!important}.incoming .property,.properties .property{gap:0!important}.incoming .annotations,.incoming .links,.incoming .property-label,.incoming .property-value,.properties .annotations,.properties .links,.properties .property-label,.properties .property-value{-ms-grid-column:1!important;-ms-grid-column-span:4!important;grid-column:1/span 4!important}h3.label{text-align:left!important;margin:16px 0 0!important}}"]
        }),
        tslib_1.__metadata("design:paramtypes", [Router])
    ], PropertiesViewComponent);
    return PropertiesViewComponent;
}());
export { PropertiesViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Brbm9yYS92aWV3ZXIvIiwic291cmNlcyI6WyJsaWIvdmlldy9wcm9wZXJ0aWVzLXZpZXcvcHJvcGVydGllcy12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBZ0IsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBZ0MsTUFBTSxhQUFhLENBQUM7QUFFMUc7OztHQUdHO0FBTUg7SUFhSSw2RUFBNkU7SUFFN0UsaUNBQXVCLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBYnRDLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFFekIsbUJBQWMsR0FBRyxjQUFjLENBQUM7SUFXVSxDQUFDO0lBRTNDOzs7O09BSUc7SUFDSCwwQ0FBUSxHQUFSLFVBQVMsRUFBVTtRQUVmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLDhCQUE4QjtRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkUsQ0FBQztJQXRCUTtRQUFSLEtBQUssRUFBRTswQ0FBVyxRQUFROzZEQUFDO0lBQ25CO1FBQVIsS0FBSyxFQUFFOzsrREFBNEI7SUFDM0I7UUFBUixLQUFLLEVBQUU7O2dFQUE2QjtJQUM1QjtRQUFSLEtBQUssRUFBRTs7a0VBQStCO0lBRTlCO1FBQVIsS0FBSyxFQUFFOzBDQUFlLG1CQUFtQjtpRUFBQztJQVhsQyx1QkFBdUI7UUFMbkMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQiwyNUlBQStDOztTQUVsRCxDQUFDO2lEQWdCa0MsTUFBTTtPQWY3Qix1QkFBdUIsQ0E4Qm5DO0lBQUQsOEJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTlCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEd1aU9yZGVyLCBLbm9yYUNvbnN0YW50cywgT250b2xvZ3lJbmZvcm1hdGlvbiwgUmVhZFByb3BlcnRpZXMsIFJlYWRSZXNvdXJjZSB9IGZyb20gJ0Brbm9yYS9jb3JlJztcblxuLyoqXG4gKiBTaG93cyBhbGwgbWV0YWRhdGEgKHByb3BlcnRpZXMpIGluIHRoZSByZXNvdXJjZSB2aWV3ZXJcbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAna3VpLXByb3BlcnRpZXMtdmlldycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Byb3BlcnRpZXMtdmlldy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJvcGVydGllcy12aWV3LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUHJvcGVydGllc1ZpZXdDb21wb25lbnQge1xuXG4gICAgbG9hZGluZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgS25vcmFDb25zdGFudHMgPSBLbm9yYUNvbnN0YW50cztcblxuICAgIEBJbnB1dCgpIGd1aU9yZGVyOiBHdWlPcmRlcjtcbiAgICBASW5wdXQoKSBwcm9wZXJ0aWVzOiBSZWFkUHJvcGVydGllcztcbiAgICBASW5wdXQoKSBhbm5vdGF0aW9uczogUmVhZFJlc291cmNlW107XG4gICAgQElucHV0KCkgaW5jb21pbmdMaW5rczogUmVhZFJlc291cmNlW107XG5cbiAgICBASW5wdXQoKSBvbnRvbG9neUluZm86IE9udG9sb2d5SW5mb3JtYXRpb247XG5cbiAgICAvLyBAT3V0cHV0KCkgcm91dGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gICAgY29uc3RydWN0b3IgKHByb3RlY3RlZCBfcm91dGVyOiBSb3V0ZXIpIHsgfVxuXG4gICAgLyoqXG4gICAgICogTmF2aWdhdGUgdG8gdGhlIGluY29taW5nIHJlc291cmNlIHZpZXcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSW5jb21pbmcgcmVzb3VyY2UgaXJpXG4gICAgICovXG4gICAgb3BlbkxpbmsoaWQ6IHN0cmluZykge1xuXG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgIC8vIHRoaXMucm91dGVDaGFuZ2VkLmVtaXQoaWQpO1xuICAgICAgICB0aGlzLl9yb3V0ZXIubmF2aWdhdGUoWycvcmVzb3VyY2UvJyArIGVuY29kZVVSSUNvbXBvbmVudChpZCldKTtcblxuICAgIH1cblxufVxuIl19