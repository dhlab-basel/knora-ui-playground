{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@knora/viewer/lib/resource/annotation/annotation.component.ts","ng://@knora/viewer/lib/resource/audio/audio.component.ts","ng://@knora/viewer/lib/resource/collection/collection.component.ts","ng://@knora/viewer/lib/resource/ddd/ddd.component.ts","ng://@knora/viewer/lib/resource/document/document.component.ts","ng://@knora/viewer/lib/resource/link-obj/link-obj.component.ts","ng://@knora/viewer/lib/resource/moving-image/moving-image.component.ts","ng://@knora/viewer/lib/resource/object/object.component.ts","ng://@knora/viewer/lib/resource/region/region.component.ts","ng://@knora/viewer/lib/resource/still-image/still-image.component.ts","ng://@knora/viewer/lib/resource/text/text.component.ts","ng://@knora/viewer/lib/property/boolean-value/boolean-value.component.ts","ng://@knora/viewer/lib/property/color-value/color-value.component.ts","ng://@knora/viewer/lib/property/date-value/date-value.component.ts","ng://@knora/viewer/lib/property/decimal-value/decimal-value.component.ts","ng://@knora/viewer/lib/property/external-res-value/external-res-value.component.ts","ng://@knora/viewer/lib/property/geometry-value/geometry-value.component.ts","ng://@knora/viewer/lib/property/geoname-value/geoname-value.component.ts","ng://@knora/viewer/lib/property/integer-value/integer-value.component.ts","ng://@knora/viewer/lib/property/interval-value/interval-value.component.ts","ng://@knora/viewer/lib/property/link-value/link-value.component.ts","ng://@knora/viewer/lib/property/list-value/list-value.component.ts","ng://@knora/viewer/lib/property/text-value/text-value-as-html/text-value-as-html.component.ts","ng://@knora/viewer/lib/property/text-value/text-value-as-string/text-value-as-string.component.ts","ng://@knora/viewer/lib/property/text-value/text-value-as-xml/text-value-as-xml.component.ts","ng://@knora/viewer/lib/property/textfile-value/textfile-value.component.ts","ng://@knora/viewer/lib/property/uri-value/uri-value.component.ts","ng://@knora/viewer/lib/view/compare-view/compare-view.component.ts","ng://@knora/viewer/lib/view/graph-view/graph-view.component.ts","ng://@knora/viewer/lib/view/grid-view/grid-view.component.ts","ng://@knora/viewer/lib/view/list-view/list-view.component.ts","ng://@knora/viewer/lib/view/properties-view/properties-view.component.ts","ng://@knora/viewer/lib/view/resource-view/resource-view.component.ts","ng://@knora/viewer/lib/view/table-view/table-view.component.ts","ng://@knora/viewer/lib/view/search-results/search-results.component.ts","ng://@knora/viewer/lib/viewer.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","AnnotationComponent","prototype","ngOnInit","Component","selector","template","AudioComponent","CollectionComponent","DddComponent","DocumentComponent","LinkObjComponent","MovingImageComponent","ObjectComponent","RegionComponent","ImageRegion","regionResource","this","getGeometries","properties","KnoraConstants","hasGeometry","StillImageRepresentation","stillImageFileValue","regions","GeometryForRegion","geometry","region","StillImageComponent","elementRef","currentImageIndex","EventEmitter","regionHovered","surfaceOfRectangularRegion","geom","type","console","log","Math","max","points","x","min","y","prepareTileSourcesFromFileValues","imagesToDisplay","imageXOffset","tileSources","imagesToDisplay_1","tslib_1.__values","imagesToDisplay_1_1","image","sipiBasePath","imageServerIIIFBaseURL","imageFilename","width","dimX","height","dimY","push","tileSource","@context","@id","profile","protocol","tiles","scaleFactors","ngOnChanges","changes","isFirstChange","setupViewer","openImages","renderRegions","unhighlightAllRegions","activateRegion","undefined","highlightRegion","viewer","ngOnDestroy","destroy","updateImages","updateRegions","regionIri","activeRegion","activeRegion_1","activeRegion_1_1","setAttribute","reg","hasOwnProperty","_b","_c","viewerContainer","nativeElement","getElementsByClassName","osdOptions","element","sequenceMode","showReferenceStrip","showNavigator","zoomInButton","zoomOutButton","previousButton","nextButton","homeButton","fullPageButton","rotateLeftButton","rotateRightButton","OpenSeadragon","Viewer","addHandler","args","fullScreen","classList","add","remove","eventSource","svgOverlay","resize","fileValues","images","map","img","event","page","index","id","StillImageComponent_1","removeOverlays","open","pol","SVGPolygonElement","clearOverlays","_this","aspectRatio","geometries","geomForReg","sort","geom1","geom2","geometries_1","geometries_1_1","this_1","createSVGOverlay","label","xOffset","toolTip","svgElement","lineColor","lineWidth","document","createElementNS","addSVGAttributesRectangle","addSVGAttributesPolygon","addSVGAttributesCircle","random","addEventListener","emit","svgTitle","textContent","svgGroup","appendChild","node","pointA","pointB","positionUL","Point2D","positionLR","viewCoordPoints","image2ViewPortCoords","pointsString","createSVGPolygonPointsAttribute","cx","String","cy","radius","sqrt","point","getCurrentImage","tslib_1.__decorate","Input","Output","ElementRef","TextComponent","BooleanValueComponent","_booleanValueObj","ReadBooleanValue","ColorValueComponent","_colorValueObj","ReadColorValue","DateValueComponent","_calendar","_era","_dateValueObj","dateOrRange","valueObject","getDateSalsah","DateRangeSalsah","period","dates","getJSDate","start","end","date","precision","Precision","yearPrecision","format","Date","year","toString","era","calendar","monthPrecision","month","dayPrecision","day","error","ReadDateValue","DecimalValueComponent","_decimalValueObj","ReadDecimalValue","ExternalResValueComponent","GeometryValueComponent","_geomValueObj","ReadGeomValue","GeonameValueComponent","IntegerValueComponent","_integerValueObj","ReadIntegerValue","IntervalValueComponent","_intervalValueObj","ReadIntervalValue","LinkValueComponent","referredResourceClicked","_ontoInfo","_linkValueObj","referredResource","referredResourceIri","refResClicked","OntologyInformation","ReadLinkValue","ListValueComponent","_listCacheService","_listValueObj","getListNode","listNodeIri","ReadListValue","ListCacheService","TextValueAsHtmlComponent","el","_bindEvents","_htmlValueObj","innerHTML","html","refResourceIri","onClick","targetElement","nodeName","toLowerCase","className","indexOf","SalsahLink","href","bindEvents","window","Boolean","ReadTextValueAsHtml","HostListener","TextValueAsStringComponent","regexUrl","_textStringValueObj","str","exec","url","newStr","replace","ReadTextValueAsString","TextValueAsXmlComponent","_xmlValueObj","ReadTextValueAsXml","TextfileValueComponent","_textfileValueObj","ReadTextFileValue","UriValueComponent","__uriValueObj","displayString","uri","ReadUriValue","CompareViewComponent","GraphViewComponent","GridViewComponent","_router","openResource","encodeURIComponent","navigate","Router","ListViewComponent","PropertiesViewComponent","loading","openLink","GuiOrder","ResourceViewComponent","require","_route","_resourceService","_incomingService","getResource","iri","decodeURIComponent","subscribe","result","sequence","guiOrder","ontologyInformation","getResourceClasses","resources","setTimeout","currentResource","incomingFileRepresentations","requestIncomingResources","hasStillImageFileValue","getIncomingLinks","offset","callback","getIncomingLinksForResource","incomingResources","ontologyInfo","updateOntologyInformation","Array","apply","incomingLinks","refreshProperties","ViewChild","static","ActivatedRoute","ResourceService","IncomingService","TableViewComponent","SearchResultsComponent","_searchService","_searchParamsService","complexView","maxOffset","badRequest","errorMessage","ApiServiceError","pagingLimit","processSearchResults","searchResult","concat","showNumberOfAllResults","countQueryResult","numberOfAllResults","numberOfResults","floor","paramMap","params","searchMode","get","projectIri","searchQuery","gravsearchGenerator","getSearchParams","gravSearchQuery","generateGravsearchQuery","getResult","gravsearch","generateGravsearch","relativeTo","errorInfo","searchParams","limitToProject","doFullTextSearchCountQueryCountQueryResult","doFullTextSearchReadResourceSequence","doExtendedSearchCountQueryCountQueryResult","doExtendedSearchReadResourceSequence","loadMore","SearchService","SearchParamsService","KuiViewerModule","NgModule","imports","CommonModule","KuiCoreModule","KuiActionModule","MatAutocompleteModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatDatepickerModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatIconModule","MatListModule","MatNativeDateModule","MatSlideToggleModule","MatTabsModule","MatToolbarModule","MatTooltipModule","ReactiveFormsModule","FlexLayoutModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-annotation',\n  templateUrl: './annotation.component.html',\n  styleUrls: ['./annotation.component.scss']\n})\nexport class AnnotationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-audio',\n  templateUrl: './audio.component.html',\n  styleUrls: ['./audio.component.scss']\n})\nexport class AudioComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-collection',\n  templateUrl: './collection.component.html',\n  styleUrls: ['./collection.component.scss']\n})\nexport class CollectionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-ddd',\n  templateUrl: './ddd.component.html',\n  styleUrls: ['./ddd.component.scss']\n})\nexport class DddComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-document',\n  templateUrl: './document.component.html',\n  styleUrls: ['./document.component.scss']\n})\nexport class DocumentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-link-obj',\n  templateUrl: './link-obj.component.html',\n  styleUrls: ['./link-obj.component.scss']\n})\nexport class LinkObjComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-moving-image',\n  templateUrl: './moving-image.component.html',\n  styleUrls: ['./moving-image.component.scss']\n})\nexport class MovingImageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-object',\n  templateUrl: './object.component.html',\n  styleUrls: ['./object.component.scss']\n})\nexport class ObjectComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-region',\n  templateUrl: './region.component.html',\n  styleUrls: ['./region.component.scss']\n})\nexport class RegionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\nimport { KnoraConstants, Point2D, ReadGeomValue, ReadResource, ReadStillImageFileValue, Region, RegionGeometry } from '@knora/core';\n\n\n// This component needs the openseadragon library itself, as well as the openseadragon plugin openseadragon-svg-overlay\n// Both libraries are installed via package.json, and loaded globally via the script tag in .angular-cli.json\n\n// OpenSeadragon does not export itself as ES6/ECMA2015 module,\n// it is loaded globally in scripts tag of angular-cli.json,\n// we still need to declare the namespace to make TypeScript compiler happy.\ndeclare let OpenSeadragon: any;\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\nexport class ImageRegion {\n\n    /**\n     *\n     * @param regionResource a resource of type Region\n     */\n    constructor (readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n\n/**\n * Represents an image including its regions.\n */\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param regions the regions belonging to the image.\n     */\n    constructor (readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: Region[]) {\n\n    }\n\n}\n\n/**\n * Represents a geometry belonging to a specific region.\n */\nexport class GeometryForRegion {\n\n    /**\n     *\n     * @param geometry the geometrical information.\n     * @param region the region the geometry belongs to.\n     */\n    constructor (readonly geometry: RegionGeometry, readonly region: ReadResource) {\n    }\n\n}\n\n/**\n * Collection of `SVGPolygonElement` for individual regions.\n */\ninterface PolygonsForRegion {\n\n    [key: string]: SVGPolygonElement[];\n\n}\n\n/**\n * This component creates a OpenSeadragon viewer instance.\n * Accepts an array of ReadResource containing (among other resources) ReadStillImageFileValues to be rendered.\n * @member resources - resources containing (among other resources) the StillImageFileValues and incoming regions to be rendered. (Use as angular @Input data binding property.)\n */\n@Component({\n    selector: 'kui-still-image',\n    templateUrl: './still-image.component.html',\n    styleUrls: ['./still-image.component.scss']\n})\nexport class StillImageComponent implements OnInit, OnChanges, OnDestroy {\n\n    @Input() images: StillImageRepresentation[];\n    @Input() imageCaption?: string;\n    @Input() activateRegion: string; // highlight a region\n\n    @Output() currentImageIndex: EventEmitter<number> = new EventEmitter<number>();\n    @Output() regionHovered = new EventEmitter<string>();\n\n    private viewer;\n    private regions: PolygonsForRegion = {};\n\n    /**\n     * Calculates the surface of a rectangular region.\n     *\n     * @param geom the region's geometry.\n     * @returns the surface.\n     */\n    private static surfaceOfRectangularRegion(geom: RegionGeometry): number {\n\n        if (geom.type !== 'rectangle') {\n            console.log('expected rectangular region, but ' + geom.type + ' given');\n            return 0;\n        }\n\n        const w = Math.max(geom.points[0].x, geom.points[1].x) - Math.min(geom.points[0].x, geom.points[1].x);\n        const h = Math.max(geom.points[0].y, geom.points[1].y) - Math.min(geom.points[0].y, geom.points[1].y);\n\n        return w * h;\n\n    }\n\n    /**\n     * Prepare tile sources from the given sequence of [[ReadStillImageFileValue]].\n     *\n     * @param imagesToDisplay the given file values to de displayed.\n     * @returns the tile sources to be passed to OSD viewer.\n     */\n    private static prepareTileSourcesFromFileValues(imagesToDisplay: ReadStillImageFileValue[]): Object[] {\n        let imageXOffset = 0;\n        const imageYOffset = 0;\n        const tileSources = [];\n\n        for (const image of imagesToDisplay) {\n            const sipiBasePath = image.imageServerIIIFBaseURL + '/' + image.imageFilename;\n            const width = image.dimX;\n            const height = image.dimY;\n\n            // construct OpenSeadragon tileSources according to https://openseadragon.github.io/docs/OpenSeadragon.Viewer.html#open\n            tileSources.push({\n                // construct IIIF tileSource configuration according to\n                // http://iiif.io/api/image/2.1/#technical-properties\n                // see also http://iiif.io/api/image/2.0/#a-implementation-notes\n                'tileSource': {\n                    '@context': 'http://iiif.io/api/image/2/context.json',\n                    '@id': sipiBasePath,\n                    'height': height,\n                    'width': width,\n                    'profile': ['http://iiif.io/api/image/2/level2.json'],\n                    'protocol': 'http://iiif.io/api/image',\n                    'tiles': [{\n                        'scaleFactors': [1, 2, 4, 8, 16, 32],\n                        'width': 1024\n                    }]\n                },\n                'x': imageXOffset,\n                'y': imageYOffset\n            });\n\n            imageXOffset++;\n        }\n\n        return tileSources;\n    }\n\n    constructor (private elementRef: ElementRef) {\n    }\n\n    ngOnChanges(changes: { [key: string]: SimpleChange }) {\n        if (changes['images'] && changes['images'].isFirstChange()) {\n            this.setupViewer();\n            // this.currentImageIri.emit(this.images[this.viewer.currentPage()].stillImageFileValue.id);\n        }\n        if (changes['images']) {\n            this.openImages();\n            this.renderRegions();\n            this.unhighlightAllRegions();\n            if (this.activateRegion !== undefined) {\n                this.highlightRegion(this.activateRegion);\n            }\n        } else if (changes['activateRegion']) {\n            this.unhighlightAllRegions();\n            if (this.activateRegion !== undefined) {\n                this.highlightRegion(this.activateRegion);\n            }\n        }\n\n        if (this.viewer) {\n            // console.log(this.viewer);\n            //            this.currentImageIndex.emit(this.viewer.currentPage());\n        }\n    }\n\n    ngOnInit() {\n        // initialisation is done on first run of ngOnChanges\n    }\n\n    ngOnDestroy() {\n        if (this.viewer) {\n            this.viewer.destroy();\n            this.viewer = undefined;\n        }\n    }\n\n    /**\n     * Renders all ReadStillImageFileValues to be found in [[this.images]].\n     * (Although this.images is a Angular Input property, the built-in change detection of Angular does not detect changes in complex objects or arrays, only reassignment of objects/arrays.\n     * Use this method if additional ReadStillImageFileValues were added to this.images after creation/assignment of the this.images array.)\n     */\n    updateImages() {\n        if (!this.viewer) {\n            this.setupViewer();\n        }\n        this.openImages();\n    }\n\n    /**\n     * Renders all regions to be found in [[this.images]].\n     * (Although this.images is a Angular Input property, the built-in change detection of Angular does not detect changes in complex objects or arrays, only reassignment of objects/arrays.\n     * Use this method if additional regions were added to the resources.images)\n     */\n    updateRegions() {\n        if (!this.viewer) {\n            this.setupViewer();\n        }\n        this.renderRegions();\n    }\n\n    /**\n     * Highlights the polygon elements associated with the given region.\n     *\n     * @param regionIri the Iri of the region whose polygon elements should be highlighted..\n     */\n    private highlightRegion(regionIri) {\n\n        const activeRegion: SVGPolygonElement[] = this.regions[regionIri];\n\n        if (activeRegion !== undefined) {\n            for (const pol of activeRegion) {\n                pol.setAttribute('class', 'roi-svgoverlay active');\n            }\n        }\n    }\n\n    /**\n     * Unhighlights the polygon elements of all regions.\n     *\n     */\n    private unhighlightAllRegions() {\n\n        for (const reg in this.regions) {\n            if (this.regions.hasOwnProperty(reg)) {\n                for (const pol of this.regions[reg]) {\n                    pol.setAttribute('class', 'roi-svgoverlay');\n                }\n            }\n        }\n    }\n\n    /**\n     * Initializes the OpenSeadragon viewer\n     */\n    private setupViewer(): void {\n        const viewerContainer = this.elementRef.nativeElement.getElementsByClassName('osd-container')[0];\n        const osdOptions = {\n            element: viewerContainer,\n            sequenceMode: true,\n            showReferenceStrip: true,\n            showNavigator: true,\n            zoomInButton: 'KUI_OSD_ZOOM_IN',\n            zoomOutButton: 'KUI_OSD_ZOOM_OUT',\n            previousButton: 'KUI_OSD_PREV_PAGE',\n            nextButton: 'KUI_OSD_NEXT_PAGE',\n            homeButton: 'KUI_OSD_HOME',\n            fullPageButton: 'KUI_OSD_FULL_PAGE',\n            rotateLeftButton: 'KUI_OSD_ROTATE_LEFT',        // doesn't work yet\n            rotateRightButton: 'KUI_OSD_ROTATE_RIGHT'       // doesn't work yet\n        };\n        this.viewer = new OpenSeadragon.Viewer(osdOptions);\n        this.viewer.addHandler('full-screen', function (args) {\n            if (args.fullScreen) {\n                viewerContainer.classList.add('fullscreen');\n            } else {\n                viewerContainer.classList.remove('fullscreen');\n            }\n        });\n        this.viewer.addHandler('resize', function (args) {\n            args.eventSource.svgOverlay().resize();\n        });\n\n        const fileValues: ReadStillImageFileValue[] = this.images.map(\n            (img) => {\n                return img.stillImageFileValue;\n            });\n\n        this.viewer.addHandler('page', function (event) {\n            console.log('event on page', event);\n            console.log('Now on page', event.page);\n            const index: number = event.page;\n            console.log('= id', fileValues[index].id);\n            const id = fileValues[index].id;\n\n            // return id;\n\n        });\n        //\n\n        // this.currentImageIri.emit(this.viewer.getCurrentImage());\n\n\n    }\n\n    /**\n     * Adds all images in this.images to the viewer.\n     * Images are positioned in a horizontal row next to each other.\n     */\n    private openImages(): void {\n        // imageXOffset controls the x coordinate of the left side of each image in the OpenSeadragon viewport coordinate system.\n        // The first image has its left side at x = 0, and all images are scaled to have a width of 1 in viewport coordinates.\n        // see also: https://openseadragon.github.io/examples/viewport-coordinates/\n\n        const fileValues: ReadStillImageFileValue[] = this.images.map(\n            (img) => {\n                return img.stillImageFileValue;\n            });\n\n        // display only the defined range of this.images\n        const tileSources: Object[] = StillImageComponent.prepareTileSourcesFromFileValues(fileValues);\n\n        this.removeOverlays();\n        this.viewer.open(tileSources);\n\n    }\n\n    /**\n     * Removes SVG overlays from the DOM.\n     */\n    private removeOverlays() {\n\n        for (const reg in this.regions) {\n            if (this.regions.hasOwnProperty(reg)) {\n                for (const pol of this.regions[reg]) {\n                    if (pol instanceof SVGPolygonElement) {\n                        pol.remove();\n                    }\n                }\n            }\n        }\n\n        this.regions = {};\n\n        // TODO: make this work by using osdviewer's addOverlay method\n        this.viewer.clearOverlays();\n    }\n\n    /**\n     * Adds a ROI-overlay to the viewer for every region of every image in this.images\n     */\n    private renderRegions(): void {\n\n        this.removeOverlays();\n\n        let imageXOffset = 0; // see documentation in this.openImages() for the usage of imageXOffset\n\n        for (const image of this.images) {\n            const aspectRatio = (image.stillImageFileValue.dimY / image.stillImageFileValue.dimX);\n\n            // collect all geometries belonging to this page\n            const geometries: GeometryForRegion[] = [];\n            image.regions.map((reg) => {\n\n                this.regions[reg.regionResource.id] = [];\n                const geoms = reg.getGeometries();\n\n                geoms.map((geom) => {\n                    const geomForReg = new GeometryForRegion(geom.geometry, reg.regionResource);\n\n                    geometries.push(geomForReg);\n                });\n            });\n\n            // sort all geometries belonging to this page\n            geometries.sort((geom1, geom2) => {\n\n                if (geom1.geometry.type === 'rectangle' && geom2.geometry.type === 'rectangle') {\n\n                    const surf1 = StillImageComponent.surfaceOfRectangularRegion(geom1.geometry);\n                    const surf2 = StillImageComponent.surfaceOfRectangularRegion(geom2.geometry);\n\n                    // if reg1 is smaller than reg2, return 1\n                    // reg1 then comes after reg2 and thus is rendered later\n                    if (surf1 < surf2) {\n                        return 1;\n                    } else {\n                        return -1;\n                    }\n\n                } else {\n                    return 0;\n                }\n\n\n            });\n\n            // render all geometries for this page\n            for (const geom of geometries) {\n\n                const geometry = geom.geometry;\n                this.createSVGOverlay(geom.region.id, geometry, aspectRatio, imageXOffset, geom.region.label);\n\n            }\n\n            imageXOffset++;\n        }\n\n    }\n\n    /**\n     * Creates and adds a ROI-overlay to the viewer\n     * @param regionIri the Iri of the region.\n     * @param geometry - the geometry describing the ROI\n     * @param aspectRatio -  the aspectRatio (h/w) of the image on which the geometry should be placed\n     * @param xOffset -  the x-offset in Openseadragon viewport coordinates of the image on which the geometry should be placed\n     * @param toolTip -  the tooltip which should be displayed on mousehover of the svg element\n     */\n    private createSVGOverlay(regionIri: string, geometry: RegionGeometry, aspectRatio: number, xOffset: number, toolTip: string): void {\n        const lineColor = geometry.lineColor;\n        const lineWidth = geometry.lineWidth;\n\n        let svgElement;\n        switch (geometry.type) {\n            case 'rectangle':\n                svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');  // yes, we render rectangles as svg polygon elements\n                this.addSVGAttributesRectangle(svgElement, geometry, aspectRatio, xOffset);\n                break;\n            case 'polygon':\n                svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n                this.addSVGAttributesPolygon(svgElement, geometry, aspectRatio, xOffset);\n                break;\n            case 'circle':\n                svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n                this.addSVGAttributesCircle(svgElement, geometry, aspectRatio, xOffset);\n                break;\n            default:\n                console.log('ERROR: StillImageOSDViewerComponent.createSVGOverlay: unknown geometryType: ' + geometry.type);\n                return;\n        }\n        svgElement.id = 'roi-svgoverlay-' + Math.random() * 10000;\n        svgElement.setAttribute('class', 'roi-svgoverlay');\n        svgElement.setAttribute('style', 'stroke: ' + lineColor + '; stroke-width: ' + lineWidth + 'px;');\n\n        // event when a region is clicked (output)\n        svgElement.addEventListener('click', () => {\n            this.regionHovered.emit(regionIri);\n        }, false);\n\n        const svgTitle = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        svgTitle.textContent = toolTip;\n\n        const svgGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        svgGroup.appendChild(svgTitle);\n        svgGroup.appendChild(svgElement);\n\n        const overlay = this.viewer.svgOverlay();\n        overlay.node().appendChild(svgGroup); // TODO: use method osdviewer's method addOverlay\n\n        this.regions[regionIri].push(svgElement);\n    }\n\n    /**\n     * Adds the necessary attributes to create a ROI-overlay of type 'rectangle' to a SVGElement\n     * @param svgElement - an SVGElement (should have type 'polygon' (sic))\n     * @param geometry - the geometry describing the rectangle\n     * @param aspectRatio - the aspectRatio (h/w) of the image on which the circle should be placed\n     * @param xOffset - the x-offset in Openseadragon viewport coordinates of the image on which the circle should be placed\n     */\n    private addSVGAttributesRectangle(svgElement: SVGElement, geometry: RegionGeometry, aspectRatio: number, xOffset: number): void {\n        const pointA = geometry.points[0];\n        const pointB = geometry.points[1];\n\n        // geometry.points contains two diagonally opposed corners of the rectangle, but the order of the corners is arbitrary.\n        // We therefore construct the upperleft (UL), lowerright (LR), upperright (UR) and lowerleft (LL) positions of the corners with min and max operations.\n        const positionUL = new Point2D(Math.min(pointA.x, pointB.x), Math.min(pointA.y, pointB.y));\n        const positionLR = new Point2D(Math.max(pointA.x, pointB.x), Math.max(pointA.y, pointB.y));\n        const positionUR = new Point2D(Math.max(pointA.x, pointB.x), Math.min(pointA.y, pointB.y));\n        const positionLL = new Point2D(Math.min(pointA.x, pointB.x), Math.max(pointA.y, pointB.y));\n\n        const points = [positionUL, positionUR, positionLR, positionLL];\n        const viewCoordPoints = this.image2ViewPortCoords(points, aspectRatio, xOffset);\n        const pointsString = this.createSVGPolygonPointsAttribute(viewCoordPoints);\n        svgElement.setAttribute('points', pointsString);\n    }\n\n    /**\n     * Adds the necessary attributes to create a ROI-overlay of type 'polygon' to a SVGElement\n     * @param svgElement - an SVGElement (should have type 'polygon')\n     * @param geometry - the geometry describing the polygon\n     * @param aspectRatio - the aspectRatio (h/w) of the image on which the circle should be placed\n     * @param xOffset - the x-offset in Openseadragon viewport coordinates of the image on which the circle should be placed\n     */\n    private addSVGAttributesPolygon(svgElement: SVGElement, geometry: RegionGeometry, aspectRatio: number, xOffset: number): void {\n        const viewCoordPoints = this.image2ViewPortCoords(geometry.points, aspectRatio, xOffset);\n        const pointsString = this.createSVGPolygonPointsAttribute(viewCoordPoints);\n        svgElement.setAttribute('points', pointsString);\n    }\n\n    /**\n     * Adds the necessary attributes to create a ROI-overlay of type 'circle' to a SVGElement\n     * @param svgElement - an SVGElement (should have type 'circle')\n     * @param geometry - the geometry describing the circle\n     * @param aspectRatio - the aspectRatio (h/w) of the image on which the circle should be placed\n     * @param xOffset - the x-offset in Openseadragon viewport coordinates of the image on which the circle should be placed\n     */\n    private addSVGAttributesCircle(svgElement: SVGElement, geometry: RegionGeometry, aspectRatio: number, xOffset: number): void {\n        const viewCoordPoints = this.image2ViewPortCoords(geometry.points, aspectRatio, xOffset);\n        const cx = String(viewCoordPoints[0].x);\n        const cy = String(viewCoordPoints[0].y);\n        // geometry.radius contains not the radius itself, but the coordinates of a (arbitrary) point on the circle.\n        // We therefore have to calculate the length of the vector geometry.radius to get the actual radius. -> sqrt(x^2 + y^2)\n        // Since geometry.radius has its y coordinate scaled to the height of the image,\n        // we need to multiply it with the aspectRatio to get to the scale used by Openseadragon, analoguous to this.image2ViewPortCoords()\n        const radius = String(Math.sqrt(geometry.radius.x * geometry.radius.x + aspectRatio * aspectRatio * geometry.radius.y * geometry.radius.y));\n        svgElement.setAttribute('cx', cx);\n        svgElement.setAttribute('cy', cy);\n        svgElement.setAttribute('r', radius);\n    }\n\n    /**\n     * Maps a Point2D[] with coordinates relative to an image to a new Point2D[] with coordinates in the viewport coordinate system of Openseadragon\n     * see also: https://openseadragon.github.io/examples/viewport-coordinates/\n     * @param points - an array of points in coordinate system relative to an image\n     * @param aspectRatio - the aspectRatio (h/w) of the image\n     * @param xOffset - the x-offset in viewport coordinates of the image\n     * @returns - a new Point2D[] with coordinates in the viewport coordinate system of Openseadragon\n     */\n    private image2ViewPortCoords(points: Point2D[], aspectRatio: number, xOffset: number): Point2D[] {\n        return points.map((point) => {\n            return new Point2D(point.x + xOffset, point.y * aspectRatio);\n        });\n    }\n\n    /**\n     * Returns a string in the format expected by the 'points' attribute of a SVGElement\n     * @param points - an array of points to be serialized to a string\n     * @returns - the points serialized to a string in the format expected by the 'points' attribute of a SVGElement\n     */\n    private createSVGPolygonPointsAttribute(points: Point2D[]): string {\n        let pointsString = '';\n        for (const i in points) {\n            if (points.hasOwnProperty(i)) {\n                pointsString += points[i].x;\n                pointsString += ',';\n                pointsString += points[i].y;\n                pointsString += ' ';\n            }\n        }\n        return pointsString;\n    }\n\n    getCurrentImage() {\n\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-text',\n  templateUrl: './text.component.html',\n  styleUrls: ['./text.component.scss']\n})\nexport class TextComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadBooleanValue } from '@knora/core';\n\n@Component({\n  selector: 'kui-boolean-value',\n  templateUrl: './boolean-value.component.html',\n  styleUrls: ['./boolean-value.component.scss']\n})\nexport class BooleanValueComponent {\n\n  @Input()\n  set valueObject(value: ReadBooleanValue) {\n      this._booleanValueObj = value;\n  }\n\n  get valueObject() {\n      return this._booleanValueObj;\n  }\n\n  private _booleanValueObj: ReadBooleanValue;\n\n  constructor() { }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadColorValue } from '@knora/core';\n\n@Component({\n    selector: 'kui-color-value',\n    templateUrl: './color-value.component.html',\n    styleUrls: ['./color-value.component.scss']\n})\nexport class ColorValueComponent {\n\n    @Input()\n    set valueObject(value: ReadColorValue) {\n        this._colorValueObj = value;\n    }\n\n    get valueObject() {\n        return this._colorValueObj;\n    }\n\n    private _colorValueObj: ReadColorValue;\n\n    constructor() {\n    }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { DateRangeSalsah, DateSalsah, Precision, ReadDateValue } from '@knora/core';\n\n@Component({\n  selector: 'kui-date-value',\n  templateUrl: './date-value.component.html',\n  styleUrls: ['./date-value.component.scss']\n})\nexport class DateValueComponent {\n\n  @Input()\n  set calendar(value: boolean) {\n    this._calendar = value;\n  }\n\n  get calendar() {\n    return this._calendar;\n  }\n\n  @Input()\n  set era(value: boolean) {\n    this._era = value;\n  }\n\n  get era() {\n    return this._era;\n  }\n\n  @Input()\n  set valueObject(value: ReadDateValue) {\n    this._dateValueObj = value;\n\n    const dateOrRange: DateSalsah | DateRangeSalsah = this.valueObject.getDateSalsah();\n    if (dateOrRange instanceof DateRangeSalsah) {\n      // period (start and end dates)\n      this.period = true;\n      this.dates = [this.getJSDate(dateOrRange.start), this.getJSDate(dateOrRange.end)];\n    } else {\n      // single date\n      this.period = false;\n      this.dates = [this.getJSDate(dateOrRange)];\n    }\n\n  }\n\n  get valueObject() {\n    return this._dateValueObj;\n  }\n\n  dates: DateFormatter[];\n  period: boolean;\n  private _calendar: boolean;\n  private _era: boolean;\n  private _dateValueObj: ReadDateValue;\n\n  constructor() { }\n\n  /**\n   * Converts a `DateSalsah` to a JS Date, providing necessary formatting information.\n   * JULIAN and GREGORIAN calendar are the only available for the moment.\n   *\n   * @param date the date to be converted.\n   * @return DateFormatter.\n   */\n  getJSDate(date: DateSalsah): DateFormatter {\n\n    if (date.precision === Precision.yearPrecision) {\n      return {\n        format: 'yyyy',\n        date: new Date(date.year.toString()),\n        era: date.era,\n        calendar: date.calendar\n      };\n    } else if (date.precision === Precision.monthPrecision) {\n      return {\n        format: 'MMMM ' + 'yyyy',\n        date: new Date(date.year, date.month - 1, 1), // 0 base month\n        era: date.era,\n        calendar: date.calendar\n      };\n    } else if (date.precision === Precision.dayPrecision) {\n      return {\n        format: 'longDate',\n        date: new Date(date.year, date.month - 1, date.day),  // 0 base month\n        era: date.era,\n        calendar: date.calendar\n      };\n    } else {\n      console.error('Error: incorrect precision for date');\n    }\n\n  }\n\n}\n\n/**\n * Date structure for the template\n */\nexport interface DateFormatter {\n  format: string;\n  date: Date;\n  era: string;\n  calendar: string;\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadDecimalValue } from '@knora/core';\n\n@Component({\n  selector: 'kui-decimal-value',\n  templateUrl: './decimal-value.component.html',\n  styleUrls: ['./decimal-value.component.scss']\n})\nexport class DecimalValueComponent {\n\n  @Input()\n  set valueObject(value: ReadDecimalValue) {\n    this._decimalValueObj = value;\n  }\n\n  get valueObject() {\n    return this._decimalValueObj;\n  }\n\n  private _decimalValueObj: ReadDecimalValue;\n\n  constructor() { }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-external-res-value',\n  templateUrl: './external-res-value.component.html',\n  styleUrls: ['./external-res-value.component.scss']\n})\nexport class ExternalResValueComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadGeomValue } from '@knora/core';\n\n@Component({\n  selector: 'kui-geometry-value',\n  templateUrl: './geometry-value.component.html',\n  styleUrls: ['./geometry-value.component.scss']\n})\nexport class GeometryValueComponent {\n\n  @Input()\n  set valueObject(value: ReadGeomValue) {\n    this._geomValueObj = value;\n  }\n\n  get valueObject() {\n    return this._geomValueObj;\n  }\n\n  private _geomValueObj: ReadGeomValue;\n\n  constructor() { }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-geoname-value',\n  templateUrl: './geoname-value.component.html',\n  styleUrls: ['./geoname-value.component.scss']\n})\nexport class GeonameValueComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadIntegerValue } from '@knora/core';\n\n@Component({\n    selector: 'kui-integer-value',\n    templateUrl: './integer-value.component.html',\n    styleUrls: ['./integer-value.component.scss']\n})\nexport class IntegerValueComponent {\n\n    @Input()\n    set valueObject(value: ReadIntegerValue) {\n        this._integerValueObj = value;\n    }\n\n    get valueObject() {\n        return this._integerValueObj;\n    }\n\n    private _integerValueObj: ReadIntegerValue;\n\n    constructor() {\n    }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadIntervalValue } from '@knora/core';\n\n@Component({\n  selector: 'kui-interval-value',\n  templateUrl: './interval-value.component.html',\n  styleUrls: ['./interval-value.component.scss']\n})\nexport class IntervalValueComponent {\n\n  @Input()\n  set valueObject(value: ReadIntervalValue) {\n    this._intervalValueObj = value;\n  }\n\n  get valueObject() {\n    return this._intervalValueObj;\n  }\n\n  private _intervalValueObj: ReadIntervalValue;\n\n  constructor() { }\n\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { OntologyInformation, ReadLinkValue } from '@knora/core';\n\n@Component({\n    selector: 'kui-link-value',\n    templateUrl: './link-value.component.html',\n    styleUrls: ['./link-value.component.scss']\n})\nexport class LinkValueComponent {\n\n    @Input()\n    set ontologyInfo(value: OntologyInformation) {\n        this._ontoInfo = value;\n    }\n\n    get ontologyInfo() {\n        return this._ontoInfo;\n    }\n\n    @Input()\n    set valueObject(value: ReadLinkValue) {\n        this._linkValueObj = value;\n\n        if (this.valueObject.referredResource !== undefined) {\n            this.referredResource = this.valueObject.referredResource.label;\n        } else {\n            this.referredResource = this.valueObject.referredResourceIri;\n        }\n    }\n\n    get valueObject() {\n        return this._linkValueObj;\n    }\n\n    @Output()\n    referredResourceClicked: EventEmitter<ReadLinkValue> = new EventEmitter();\n\n    private _linkValueObj: ReadLinkValue;\n    private _ontoInfo: OntologyInformation;\n    referredResource: string;\n\n    constructor() { }\n\n    refResClicked() {\n        this.referredResourceClicked.emit(this._linkValueObj);\n    }\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { ReadListValue } from '@knora/core';\nimport { ListCacheService, ListNodeV2 } from '@knora/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'kui-list-value',\n    templateUrl: './list-value.component.html',\n    styleUrls: ['./list-value.component.scss']\n})\nexport class ListValueComponent implements OnChanges {\n\n    @Input()\n    set valueObject(value: ReadListValue) {\n        this._listValueObj = value;\n    }\n\n    get valueObject() {\n        return this._listValueObj;\n    }\n\n    private _listValueObj: ReadListValue;\n\n    node: Observable<ListNodeV2>;\n\n    constructor(private _listCacheService: ListCacheService) {\n    }\n\n    ngOnChanges() {\n        // given the node's Iri, ask the list cache service\n        this.node = this._listCacheService.getListNode(this._listValueObj.listNodeIri);\n\n    }\n\n}\n","import { Component, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { KnoraConstants, OntologyInformation, ReadTextValueAsHtml } from '@knora/core';\n\n@Component({\n    selector: 'kui-text-value-as-html',\n    templateUrl: './text-value-as-html.component.html',\n    styleUrls: ['./text-value-as-html.component.scss']\n})\nexport class TextValueAsHtmlComponent {\n\n    @Output()\n    referredResourceClicked: EventEmitter<string> = new EventEmitter();\n\n    @Input()\n    set ontologyInfo(value: OntologyInformation) {\n        this._ontoInfo = value;\n    }\n\n    get ontologyInfo() {\n        return this._ontoInfo;\n    }\n\n    @Input()\n    set bindEvents(value: Boolean) {\n        this._bindEvents = value;\n    }\n\n    get bindEvents() {\n        return this._bindEvents;\n    }\n\n    @Input()\n    set valueObject(value: ReadTextValueAsHtml) {\n        this._htmlValueObj = value;\n\n        if (this.el.nativeElement.innerHTML) {\n            this.el.nativeElement.innerHTML = this.valueObject.html;\n        }\n    }\n\n    get valueObject() {\n        return this._htmlValueObj;\n    }\n\n    html: string;\n    private _htmlValueObj: ReadTextValueAsHtml;\n    private _ontoInfo: OntologyInformation;\n    private _bindEvents: Boolean;\n\n    constructor(private el: ElementRef) {\n    }\n\n    refResClicked(refResourceIri: string) {\n        this.referredResourceClicked.emit(refResourceIri);\n    }\n\n    /**\n     * Binds a click event to standoff links that shows the referred resource.\n     *\n     * @param targetElement\n     */\n    @HostListener('click', ['$event.target'])\n    onClick(targetElement) {\n        if (this._bindEvents && targetElement.nodeName.toLowerCase() === 'a'\n            && targetElement.className.toLowerCase().indexOf(KnoraConstants.SalsahLink) >= 0\n            && targetElement.href !== undefined) {\n            this.refResClicked(targetElement.href);\n            // prevent propagation\n            return false;\n        } else if (this.bindEvents && targetElement.nodeName.toLowerCase() === 'a' && targetElement.href !== undefined) {\n            // open link in a new window\n            window.open(targetElement.href, '_blank');\n            // prevent propagation\n            return false;\n        } else {\n            // prevent propagation\n            return false;\n        }\n    }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadTextValueAsString } from '@knora/core';\n\n@Component({\n    selector: 'kui-text-value-as-string',\n    templateUrl: './text-value-as-string.component.html',\n    styleUrls: ['./text-value-as-string.component.scss']\n})\nexport class TextValueAsStringComponent {\n\n    regexUrl: RegExp = /(http|https|ftp|ftps)\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(\\/\\S*)?/;\n\n    @Input()\n    set valueObject(value: ReadTextValueAsString) {\n        // console.log(value);\n\n        const str: string = value.str;\n\n        if (this.regexUrl.exec(str)) {\n            const url: string = this.regexUrl.exec(str)[0];\n            const newStr = str.replace(this.regexUrl, '<a class=\"kui-link\" href=\"' + url + '\">' + url + '</a>');\n            value.str = newStr;\n            this._textStringValueObj = value;\n        } else {\n            this._textStringValueObj = value;\n        }\n    }\n\n    get valueObject() {\n\n\n        return this._textStringValueObj;\n    }\n\n    private _textStringValueObj: ReadTextValueAsString;\n\n    constructor () {\n    }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadTextValueAsXml } from '@knora/core';\n\n@Component({\n    selector: 'kui-text-value-as-xml',\n    templateUrl: './text-value-as-xml.component.html',\n    styleUrls: ['./text-value-as-xml.component.scss']\n})\nexport class TextValueAsXmlComponent {\n\n    @Input()\n    set valueObject(value: ReadTextValueAsXml) {\n        this._xmlValueObj = value;\n    }\n\n    get valueObject() {\n        return this._xmlValueObj;\n    }\n\n    private _xmlValueObj: ReadTextValueAsXml;\n\n    constructor() {\n    }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { ReadTextFileValue } from '@knora/core';\n\n@Component({\n  selector: 'kui-textfile-value',\n  templateUrl: './textfile-value.component.html',\n  styleUrls: ['./textfile-value.component.scss']\n})\nexport class TextfileValueComponent {\n\n  @Input()\n  set valueObject(value: ReadTextFileValue) {\n    this._textfileValueObj = value;\n  }\n\n  get valueObject() {\n    return this._textfileValueObj;\n  }\n\n  private _textfileValueObj: ReadTextFileValue;\n\n  constructor() { }\n\n}\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { ReadUriValue } from '@knora/core';\nimport { isUndefined } from 'util';\n\n@Component({\n  selector: '   kui-uri-value',\n  templateUrl: './uri-value.component.html',\n  styleUrls: ['./uri-value.component.scss']\n})\nexport class UriValueComponent implements OnChanges {\n\n  @Input()\n  set valueObject(value: ReadUriValue) {\n    this.__uriValueObj = value;\n\n  }\n  get valueObject() {\n    return this.__uriValueObj;\n  }\n  @Input() label?: string;\n  private __uriValueObj: ReadUriValue;\n  public displayString: string;\n  constructor() { }\n\n  ngOnChanges() {\n      if (this.label === undefined) {\n          this.displayString = this.__uriValueObj.uri;\n      } else {\n          this.displayString = this.label;\n      }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-compare-view',\n  templateUrl: './compare-view.component.html',\n  styleUrls: ['./compare-view.component.scss']\n})\nexport class CompareViewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'kui-graph-view',\n  templateUrl: './graph-view.component.html',\n  styleUrls: ['./graph-view.component.scss']\n})\nexport class GraphViewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { KnoraConstants, OntologyInformation } from '@knora/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'kui-grid-view',\n  templateUrl: './grid-view.component.html',\n  styleUrls: ['./grid-view.component.scss']\n})\nexport class GridViewComponent implements OnInit {\n\n  /**\n   * @param  {any} result Search result received from SearchResultsComponent\n   */\n  @Input() result: any;\n\n  /**\n   * @param  {OntologyInformation} ontologyInfo Ontology information received from SearchResultsComponent\n   */\n  @Input() ontologyInfo: OntologyInformation;\n\n  // @Input() isLoading: boolean;\n\n  KnoraConstants = KnoraConstants;\n\n  constructor(\n    private _router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  /**\n   * Navigate to the resource viewer when clicking on one resource of the search result grid\n   * @param {string} id \n   */\n  openResource(id: string) {\n    const url: string = '/resource/' + encodeURIComponent(id);\n    this._router.navigate([url]);\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { KnoraConstants, OntologyInformation } from '@knora/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'kui-list-view',\n    templateUrl: './list-view.component.html',\n    styleUrls: ['./list-view.component.scss']\n})\nexport class ListViewComponent {\n\n    /**\n     * @param  {any} result Search result received from SearchResultsComponent\n     */\n    @Input() result: any;\n\n    /**\n     * @param  {OntologyInformation} ontologyInfo Ontology information received from SearchResultsComponent\n     */\n    @Input() ontologyInfo: OntologyInformation;\n\n    // @Input() isLoading: boolean;\n\n    KnoraConstants = KnoraConstants;\n\n    constructor(\n        private _router: Router\n    ) { }\n\n    /**\n     * Navigate to the resource viewer when clicking on one resource of the search result list\n     * @param {string} id\n     */\n    openResource(id: string) {\n        const url: string = '/resource/' + encodeURIComponent(id);\n        this._router.navigate([url]);\n    }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { GuiOrder, KnoraConstants, OntologyInformation, ReadProperties, ReadResource } from '@knora/core';\n\n/**\n * Shows all metadata (properties) in the resource viewer\n *\n */\n@Component({\n    selector: 'kui-properties-view',\n    templateUrl: './properties-view.component.html',\n    styleUrls: ['./properties-view.component.scss']\n})\nexport class PropertiesViewComponent {\n\n    loading: boolean = false;\n\n    KnoraConstants = KnoraConstants;\n\n    @Input() guiOrder: GuiOrder;\n    @Input() properties: ReadProperties;\n    @Input() annotations: ReadResource[];\n    @Input() incomingLinks: ReadResource[];\n\n    @Input() ontologyInfo: OntologyInformation;\n\n    // @Output() routeChanged: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor (protected _router: Router) { }\n\n    /**\n     * Navigate to the incoming resource view.\n     *\n     * @param {string} id Incoming resource iri\n     */\n    openLink(id: string) {\n\n        this.loading = true;\n        // this.routeChanged.emit(id);\n        this._router.navigate(['/resource/' + encodeURIComponent(id)]);\n\n    }\n\n}\n","import { Component, ElementRef, Input, OnChanges, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiServiceError, GuiOrder, IncomingService, KnoraConstants, OntologyInformation, ReadResource, ReadResourcesSequence, ResourceService, ResourcesSequence } from '@knora/core';\nimport { StillImageComponent } from '../../resource';\n\n// import { Region, StillImageRepresentation } from '../../resource';\n\ndeclare let require: any;\nconst jsonld = require('jsonld');\n\n@Component({\n    selector: 'kui-resource-view',\n    templateUrl: './resource-view.component.html',\n    styleUrls: ['./resource-view.component.scss']\n})\nexport class ResourceViewComponent implements OnInit, OnChanges {\n\n    /**\n     * @param {string} [iri] Resource iri\n     */\n    @Input() iri?: string;\n\n    @ViewChild('kuiStillImage', { static: false }) kuiStillImage: StillImageComponent;\n\n    sequence: ResourcesSequence;\n\n    ontologyInfo: OntologyInformation;\n    guiOrder: GuiOrder[];\n    loading: boolean;\n    error: any;\n    KnoraConstants = KnoraConstants;\n\n    // does the resource has a file representation (media file)?\n    fileRepresentation: boolean;\n\n    // current resource in case of compound object\n    currentResource: ReadResource;\n\n    constructor (protected _route: ActivatedRoute,\n        protected _router: Router,\n        protected _resourceService: ResourceService,\n        protected _incomingService: IncomingService\n    ) {\n\n    }\n\n    ngOnInit() {\n        // this.getResource(this.iri);\n    }\n\n    ngOnChanges() {\n        this.getResource(this.iri);\n\n        // console.log(this.kuiStillImage.k;\n    }\n\n    /**\n     * Get a read resource sequence with ontology information and incoming resources.\n     *\n     * @param {string} id Resource iri\n     */\n    getResource(id: string) {\n        this.loading = true;\n        this._resourceService.getResource(decodeURIComponent(id)).subscribe(\n            (result: ResourcesSequence) => {\n\n                console.log('getResource result', result);\n\n\n                // result with resources only and WITHOUT incoming stuff\n                this.sequence = result;\n\n\n                // this.ontologyInfo = result.ontologyInformation;\n\n                // const resType = this.sequence.resources[0].type;\n\n                this.guiOrder = result.ontologyInformation.getResourceClasses()[this.sequence.resources[0].type].guiOrder;\n\n\n\n\n                // collect all filerepresentations to display including annotations\n                // --> for the first resource only...\n                // this.sequence.resources[0].fileRepresentationsToDisplay = this.collectFileRepresentationsAndFileAnnotations(this.sequence.resources[0]);\n\n                // collect images and regions\n                // --> for the first resource only...\n                // this.collectImagesAndRegionsForResource(this.sequence.resources[0]);\n\n                // get incoming resources\n                //                this.requestIncomingResources();\n\n\n                // this.fileRepresentation = this.sequence.resources[0].properties.indexOf(KnoraConstants.hasStillImageFileValue) > -1;\n\n                // console.log('fileRepresentation', this.sequence.resources[0].stillImageRepresentationsToDisplay[0].stillImageFileValue);\n\n                // wait until the resource is ready\n                setTimeout(() => {\n                    // console.log(this.sequence);\n                    this.currentResource = this.sequence.resources[0].incomingFileRepresentations[0];\n                    console.log('currentResource', this.sequence.resources[0].incomingFileRepresentations[0]);\n                    this.loading = false;\n                }, 1000);\n            },\n            (error: ApiServiceError) => {\n                console.error(error);\n            }\n        );\n    }\n\n\n    /**\n     * Collect all file representations (stillImage, movingImage, audio etc.) and annotations (region, sequence etc.)\n     *\n     * @param resource\n     */\n    /*\n    collectFileRepresentationsAndFileAnnotations(resource: Resource): FileRepresentation[] {\n        const fileRepresentations: FileRepresentation[] = [];\n\n        if (resource.properties[KnoraConstants.hasStillImageFileValue] !== undefined) {\n            const fileValues: ReadStillImageFileValue[] = resource.properties[KnoraConstants.hasStillImageFileValue] as ReadStillImageFileValue[];\n        }\n\n        return fileRepresentations;\n    }\n\n    /*\n\n        collectImagesAndRegionsForResource(resource: Resource): void {\n\n            const imgRepresentations: StillImageRepresentation[] = [];\n\n            if (resource.properties[KnoraConstants.hasStillImageFileValue] !== undefined) {\n                // TODO: check if resources is a StillImageRepresentation using the ontology responder (support for subclass relations required)\n                // resource has StillImageFileValues that are directly attached to it (properties)\n\n                const fileValues: ReadStillImageFileValue[] = resource.properties[KnoraConstants.hasStillImageFileValue] as ReadStillImageFileValue[];\n                const imagesToDisplay: ReadStillImageFileValue[] = fileValues.filter((image) => {\n                    return !image.isPreview;\n                });\n\n\n                for (const img of imagesToDisplay) {\n\n                    const regions: ImageRegion[] = [];\n                    for (const incomingRegion of resource.incomingAnnotations) {\n\n                        const region = new ImageRegion(incomingRegion);\n\n                        regions.push(region);\n\n                    }\n\n                    const stillImage = new StillImageRepresentation(img, regions);\n                    imgRepresentations.push(stillImage);\n\n                }\n\n\n            } else if (resource.incomingStillImageRepresentations.length > 0) {\n                // there are StillImageRepresentations pointing to this resource (incoming)\n\n                const readStillImageFileValues: ReadStillImageFileValue[] = resource.incomingStillImageRepresentations.map(\n                    (stillImageRes: ReadResource) => {\n                        const fileValues = stillImageRes.properties[KnoraConstants.hasStillImageFileValue] as ReadStillImageFileValue[];\n                        // TODO: check if resources is a StillImageRepresentation using the ontology responder (support for subclass relations required)\n                        const imagesToDisplay = fileValues.filter((image) => {\n                            return !image.isPreview;\n\n                        });\n\n                        return imagesToDisplay;\n                    }\n                ).reduce(function (prev, curr) {\n                    // transform ReadStillImageFileValue[][] to ReadStillImageFileValue[]\n                    return prev.concat(curr);\n                });\n\n                for (const img of readStillImageFileValues) {\n\n                    const regions: ImageRegion[] = [];\n                    for (const incomingRegion of resource.incomingRegions) {\n\n                        const region = new ImageRegion(incomingRegion);\n                        regions.push(region);\n\n                    }\n\n                    const stillImage = new StillImageRepresentation(img, regions);\n                    imgRepresentations.push(stillImage);\n                }\n\n            }\n\n            resource.stillImageRepresentationsToDisplay = imgRepresentations;\n\n        }\n        */\n\n    /**\n     * Get incoming resources: incoming links, incoming regions, incoming still image representations.\n     */\n    requestIncomingResources(): void {\n\n        // make sure that this.sequence has been initialized correctly\n        if (this.sequence === undefined) {\n            return;\n        }\n\n        // request incoming regions\n        if (this.sequence.resources[0].properties[KnoraConstants.hasStillImageFileValue]) {\n            // TODO: check if resources is a StillImageRepresentation using the ontology responder (support for subclass relations required)\n            // the resource is a StillImageRepresentation, check if there are regions pointing to it\n\n            // this.getIncomingRegions(0);\n\n        } else {\n            // this resource is not a StillImageRepresentation\n            // check if there are StillImageRepresentations pointing to this resource\n\n            // this gets the first page of incoming StillImageRepresentations\n            // more pages may be requested by [[this.viewer]].\n            // TODO: for now, we begin with offset 0. This may have to be changed later (beginning somewhere in a collection)\n            // this.getIncomingStillImageRepresentations(0);\n        }\n\n        // check for incoming links for the current resource\n        this.getIncomingLinks(0);\n\n\n    }\n\n    /**\n     * Get incoming regions for the resource.\n     *\n     * @param offset\n     * @param callback\n     *\n    getIncomingRegions(offset: number, callback?: (numberOfResources: number) => void): void {\n        this._incomingService.getIncomingRegions(this.sequence.resources[0].id, offset).subscribe(\n            (regions: ReadResourcesSequence) => {\n                // update ontology information\n                this.ontologyInfo.updateOntologyInformation(regions.ontologyInformation);\n\n                // Append elements of regions.resources to resource.incoming\n                Array.prototype.push.apply(this.sequence.resources[0].incomingRegions, regions.resources);\n\n                // prepare regions to be displayed\n                this.collectImagesAndRegionsForResource(this.sequence.resources[0]);\n\n                // TODO: implement osdViewer\n                /* if (this.osdViewer) {\n                  this.osdViewer.updateRegions();\n                } *\n\n                // if callback is given, execute function with the amount of new images as the parameter\n                if (callback !== undefined) {\n                    callback(regions.resources.length);\n                }\n            },\n            (error: any) => {\n                console.error(error);\n                this.loading = false;\n            }\n        );\n    }\n\n    */\n    /**\n     * Get incoming links for a resource.\n     *\n     * @param offset\n     * @param callback\n     */\n    getIncomingLinks(offset: number, callback?: (numberOfResources: number) => void): void {\n\n        this.loading = true;\n\n        this._incomingService.getIncomingLinksForResource(this.sequence.resources[0].id, offset).subscribe(\n            (incomingResources: ReadResourcesSequence) => {\n                // update ontology information\n                this.ontologyInfo.updateOntologyInformation(incomingResources.ontologyInformation);\n\n                // Append elements incomingResources to this.sequence.incomingLinks\n                Array.prototype.push.apply(this.sequence.resources[0].incomingLinks, incomingResources.resources);\n\n                // if callback is given, execute function with the amount of incoming resources as the parameter\n                if (callback !== undefined) {\n                    callback(incomingResources.resources.length);\n                }\n\n                this.loading = false;\n            },\n            (error: any) => {\n                console.error(error);\n                this.loading = false;\n            }\n        );\n    }\n\n    openLink(id: string) {\n\n        this.loading = true;\n        // this.routeChanged.emit(id);\n        this._router.navigate(['/resource/' + encodeURIComponent(id)]);\n\n    }\n\n    refreshProperties(index: number) {\n        console.log('from still-image-component: ', index);\n        this.currentResource = this.sequence.resources[0].incomingFileRepresentations[index];\n        console.log(this.currentResource);\n    }\n\n\n\n\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { KnoraConstants } from '@knora/core';\n\n@Component({\n  selector: 'kui-table-view',\n  templateUrl: './table-view.component.html',\n  styleUrls: ['./table-view.component.scss']\n})\nexport class TableViewComponent implements OnInit {\n\n  @Input() result;\n  @Input() ontologyInfo;\n  @Input() isLoading;\n\n  KnoraConstants = KnoraConstants;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { ApiServiceError, CountQueryResult, ExtendedSearchParams, KnoraConstants, OntologyInformation, ReadResource, ReadResourcesSequence, SearchParamsService, SearchService } from '@knora/core';\n\n/**\n * The search-results gets the search mode and parameters from routes or inputs,\n * and returns the corresponding resources that are displayed in a list or a grid.\n * The results can be filtered by project.\n */\n@Component({\n    selector: 'kui-search-results',\n    templateUrl: './search-results.component.html',\n    styleUrls: ['./search-results.component.scss']\n})\nexport class SearchResultsComponent implements OnInit, OnChanges {\n    /**\n     *\n     * @param  {boolean} [complexView] If true it shows 2 ways to display the search results: list or grid.\n     *\n     */\n    @Input() complexView?: boolean = false;\n\n    /**\n     *\n     * @param  {string} [searchQuery] Search parameters. It can be a gravsearch query (extended mode) or string (fulltext mode).\n     */\n    @Input() searchQuery?: string;\n\n    /**\n     *\n     * @param  {string} [searchMode] Search mode: Extended or fulltext.\n     */\n    @Input() searchMode?: string;\n\n    /**\n     *\n     * @param  {string} [projectIri] Project Iri. To filter the results by project.\n     */\n    @Input() projectIri?: string;\n\n    KnoraConstants = KnoraConstants;\n    offset: number = 0;\n    maxOffset: number = 0;\n    gravSearchQuery: string;\n    gravsearchGenerator: ExtendedSearchParams;\n    result: ReadResource[] = [];\n    ontologyInfo: OntologyInformation;\n    numberOfAllResults: number;\n    // rerender: boolean = false;\n    badRequest: boolean = false;\n    loading = true;\n    errorMessage: ApiServiceError = new ApiServiceError();\n    pagingLimit: number = 25;\n\n    constructor (\n        private _route: ActivatedRoute,\n        private _searchService: SearchService,\n        private _searchParamsService: SearchParamsService,\n        private _router: Router\n    ) {\n\n    }\n\n    ngOnInit() {\n\n    }\n\n    ngOnChanges() {\n        this._route.paramMap.subscribe(\n            (params: Params) => {\n                // get the search mode\n                if (!this.searchMode) {\n                    this.searchMode = params.get('mode');\n                }\n\n                // get the project iri\n                if (params.get('project') && (this.projectIri !== decodeURIComponent(params.get('project')))) {\n                    this.projectIri = decodeURIComponent(params.get('project'));\n                }\n\n                // init offset  and result\n                this.offset = 0;\n                this.result = [];\n\n                // get query params depending on the search mode\n                if (this.searchMode === 'fulltext') {\n                    this.searchQuery = params.get('q');\n                    this.badRequest = this.searchQuery.length < 3;\n                } else if (this.searchMode === 'extended') {\n                    this.gravsearchGenerator = this._searchParamsService.getSearchParams();\n                    if (!this.searchQuery) {\n                        this.generateGravsearchQuery();\n                    } else {\n                        this.gravSearchQuery = this.searchQuery;\n                    }\n                }\n\n                // get results\n                // this.rerender = true;\n                this.getResult();\n            }\n        );\n    }\n\n\n    /**\n     * Generates the Gravsearch query for the current offset.\n     * @ignore\n     */\n    private generateGravsearchQuery() {\n        const gravsearch:\n            | string\n            | boolean = this.gravsearchGenerator.generateGravsearch(\n                this.offset\n            );\n        if (gravsearch === false) {\n            // no valid search params (application has been reloaded)\n            // go to root\n            this._router.navigate([''], { relativeTo: this._route });\n            return;\n        } else {\n            this.gravSearchQuery = <string>gravsearch;\n        }\n    }\n\n    /**\n     * Get search result from Knora - 2 cases: simple search and extended search\n     * @ignore\n     */\n    private getResult() {\n        this.loading = true;\n\n        // reset the error message\n        this.errorMessage = undefined;\n\n        // FULLTEXT SEARCH\n        if (this.searchMode === 'fulltext') {\n            // this.rerender = true;\n            if (this.badRequest) {\n                this.errorMessage = new ApiServiceError();\n                this.errorMessage.errorInfo =\n                    'A search value is expected to have at least length of 3 characters.';\n                this.loading = false;\n                // this.rerender = false;\n            } else {\n\n                let searchParams;\n\n                if (this.projectIri !== undefined) {\n                    searchParams = { limitToProject: this.projectIri };\n                }\n\n                if (this.offset === 0) {\n                    // perform count query\n                    this._searchService\n                        .doFullTextSearchCountQueryCountQueryResult(\n                            this.searchQuery,\n                            searchParams\n                        )\n                        .subscribe(\n                            this.showNumberOfAllResults,\n                            (error: ApiServiceError) => {\n                                this.errorMessage = <ApiServiceError>error;\n                            }\n                        );\n                }\n\n                // perform full text search\n                this._searchService\n                    .doFullTextSearchReadResourceSequence(\n                        this.searchQuery,\n                        this.offset,\n                        searchParams\n                    )\n                    .subscribe(\n                        this.processSearchResults, // function pointer\n                        (error: ApiServiceError) => {\n                            this.errorMessage = <ApiServiceError>error;\n                            console.log('error', error);\n                            console.log('message', this.errorMessage);\n                        }\n                    );\n            }\n\n            // EXTENDED SEARCH\n        } else if (this.searchMode === 'extended') {\n            // perform count query\n            if (this.offset === 0) {\n                this._searchService\n                    .doExtendedSearchCountQueryCountQueryResult(\n                        this.gravSearchQuery\n                    )\n                    .subscribe(\n                        this.showNumberOfAllResults,\n                        (error: ApiServiceError) => {\n                            this.errorMessage = <ApiServiceError>error;\n                        }\n                    );\n            }\n            this._searchService\n                .doExtendedSearchReadResourceSequence(this.gravSearchQuery)\n                .subscribe(\n                    this.processSearchResults, // function pointer\n                    (error: ApiServiceError) => {\n                        this.errorMessage = <ApiServiceError>error;\n                    }\n                );\n        } else {\n            this.errorMessage = new ApiServiceError();\n            this.errorMessage.errorInfo = `search mode invalid: ${\n                this.searchMode\n                }`;\n        }\n    }\n\n    /**\n     *\n     * Converts search results from JSON-LD to a [[ReadResourcesSequence]] and requests information about ontology entities.\n     * This function is passed to `subscribe` as a pointer (instead of redundantly defining the same lambda function).\n     * @ignore\n     *\n     * @param {ReadResourcesSequence} searchResult the answer to a search request.\n     */\n    private processSearchResults = (searchResult: ReadResourcesSequence) => {\n        // assign ontology information to a variable so it can be used in the component's template\n        if (this.ontologyInfo === undefined) {\n            // init ontology information\n            this.ontologyInfo = searchResult.ontologyInformation;\n        } else {\n            // update ontology information\n            this.ontologyInfo.updateOntologyInformation(\n                searchResult.ontologyInformation\n            );\n        }\n        // append results to search results\n        this.result = this.result.concat(searchResult.resources);\n        // console.log('search results', this.result);\n\n        this.loading = false;\n        // this.rerender = false;\n    }\n\n    /**\n     * Shows total number of results returned by a count query.\n     * @ignore\n     *\n     * @param {ApiServiceResult} countQueryResult the response to a count query.\n     */\n    private showNumberOfAllResults = (countQueryResult: CountQueryResult) => {\n        this.numberOfAllResults = countQueryResult.numberOfResults;\n\n        if (this.numberOfAllResults > 0) {\n            // offset is 0-based\n            // if numberOfAllResults equals the pagingLimit, the max. offset is 0\n            this.maxOffset = Math.floor(\n                (this.numberOfAllResults - 1) / this.pagingLimit\n            );\n        } else {\n            this.maxOffset = 0;\n        }\n    }\n\n    /**\n     * Loads the next page of results.\n     * The results will be appended to the existing ones.\n     * @ignore\n     *\n     * @param {number} offset\n     * @returns void\n     */\n    loadMore(offset: number): void {\n        // update the page offset when the end of scroll is reached to get the next page of search results\n        if (this.offset < this.maxOffset) {\n            this.offset++;\n        } else {\n            return;\n        }\n\n        if (this.searchMode === 'extended') {\n            this.generateGravsearchQuery();\n        }\n\n        this.getResult();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n// import { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { KuiActionModule } from '@knora/action';\nimport { KuiCoreModule } from '@knora/core';\n\nimport { BooleanValueComponent } from './property/boolean-value/boolean-value.component';\nimport { ColorValueComponent } from './property/color-value/color-value.component';\nimport { DateValueComponent } from './property/date-value/date-value.component';\nimport { DecimalValueComponent } from './property/decimal-value/decimal-value.component';\nimport { ExternalResValueComponent } from './property/external-res-value/external-res-value.component';\nimport { GeometryValueComponent } from './property/geometry-value/geometry-value.component';\nimport { GeonameValueComponent } from './property/geoname-value/geoname-value.component';\nimport { IntegerValueComponent } from './property/integer-value/integer-value.component';\nimport { IntervalValueComponent } from './property/interval-value/interval-value.component';\nimport { LinkValueComponent } from './property/link-value/link-value.component';\nimport { ListValueComponent } from './property/list-value/list-value.component';\nimport { TextValueAsHtmlComponent } from './property/text-value/text-value-as-html/text-value-as-html.component';\nimport { TextValueAsStringComponent } from './property/text-value/text-value-as-string/text-value-as-string.component';\nimport { TextValueAsXmlComponent } from './property/text-value/text-value-as-xml/text-value-as-xml.component';\nimport { TextfileValueComponent } from './property/textfile-value/textfile-value.component';\nimport { UriValueComponent } from './property/uri-value/uri-value.component';\nimport { AnnotationComponent } from './resource/annotation/annotation.component';\nimport { AudioComponent } from './resource/audio/audio.component';\nimport { CollectionComponent } from './resource/collection/collection.component';\nimport { DddComponent } from './resource/ddd/ddd.component';\nimport { DocumentComponent } from './resource/document/document.component';\nimport { LinkObjComponent } from './resource/link-obj/link-obj.component';\nimport { MovingImageComponent } from './resource/moving-image/moving-image.component';\nimport { ObjectComponent } from './resource/object/object.component';\nimport { RegionComponent } from './resource/region/region.component';\nimport { StillImageComponent } from './resource/still-image/still-image.component';\nimport { TextComponent } from './resource/text/text.component';\nimport { CompareViewComponent } from './view/compare-view/compare-view.component';\nimport { GraphViewComponent } from './view/graph-view/graph-view.component';\nimport { GridViewComponent } from './view/grid-view/grid-view.component';\nimport { ListViewComponent } from './view/list-view/list-view.component';\nimport { PropertiesViewComponent } from './view/properties-view/properties-view.component';\nimport { ResourceViewComponent } from './view/resource-view/resource-view.component';\nimport { TableViewComponent } from './view/table-view/table-view.component';\nimport { SearchResultsComponent } from './view/search-results/search-results.component';\n\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        KuiCoreModule,\n        KuiActionModule,\n        MatAutocompleteModule,\n        MatButtonModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatExpansionModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        MatListModule,\n        MatNativeDateModule,\n        MatSlideToggleModule,\n        MatTabsModule,\n        MatToolbarModule,\n        MatTooltipModule,\n        ReactiveFormsModule,\n        FlexLayoutModule\n    ],\n    declarations: [\n        AnnotationComponent,\n        AudioComponent,\n        CollectionComponent,\n        DddComponent,\n        DocumentComponent,\n        LinkObjComponent,\n        MovingImageComponent,\n        ObjectComponent,\n        RegionComponent,\n        StillImageComponent,\n        TextComponent,\n        TextValueAsHtmlComponent,\n        TextValueAsStringComponent,\n        TextValueAsXmlComponent,\n        TextfileValueComponent,\n        DateValueComponent,\n        IntegerValueComponent,\n        ColorValueComponent,\n        DecimalValueComponent,\n        UriValueComponent,\n        BooleanValueComponent,\n        GeometryValueComponent,\n        GeonameValueComponent,\n        IntervalValueComponent,\n        ListValueComponent,\n        LinkValueComponent,\n        ExternalResValueComponent,\n        ListViewComponent,\n        GridViewComponent,\n        TableViewComponent,\n        ResourceViewComponent,\n        CompareViewComponent,\n        GraphViewComponent,\n        PropertiesViewComponent,\n        SearchResultsComponent\n    ],\n    exports: [\n\n        AnnotationComponent,\n        AudioComponent,\n        CollectionComponent,\n        DddComponent,\n        DocumentComponent,\n        LinkObjComponent,\n        MovingImageComponent,\n        ObjectComponent,\n        RegionComponent,\n        StillImageComponent,\n        TextComponent,\n        TextValueAsHtmlComponent,\n        TextValueAsStringComponent,\n        TextValueAsXmlComponent,\n        TextfileValueComponent,\n        DateValueComponent,\n        IntegerValueComponent,\n        ColorValueComponent,\n        DecimalValueComponent,\n        UriValueComponent,\n        BooleanValueComponent,\n        GeometryValueComponent,\n        GeonameValueComponent,\n        IntervalValueComponent,\n        ListValueComponent,\n        LinkValueComponent,\n        ExternalResValueComponent,\n        ListViewComponent,\n        GridViewComponent,\n        TableViewComponent,\n        ResourceViewComponent,\n        CompareViewComponent,\n        GraphViewComponent,\n        PropertiesViewComponent,\n        SearchResultsComponent\n    ]\n})\nexport class KuiViewerModule {\n}\n"]}