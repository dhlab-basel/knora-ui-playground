{"version":3,"file":"knora-authentication.js.map","sources":["ng://@knora/authentication/lib/declarations/current-user.ts","ng://@knora/authentication/lib/session/session.service.ts","ng://@knora/authentication/lib/guard/auth.guard.ts","ng://@knora/authentication/lib/authentication.service.ts","ng://@knora/authentication/lib/login-form/login-form.component.ts","ng://@knora/authentication/lib/interceptors/jwt.interceptor.ts","ng://@knora/authentication/lib/interceptors/with-credentials.interceptor.ts","ng://@knora/authentication/lib/authentication.module.ts","ng://@knora/authentication/public_api.ts","ng://@knora/authentication/knora-authentication.ts"],"sourcesContent":["import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * currently logged-in user\n */\n@JsonObject\nexport class CurrentUser {\n\n    /**\n     * username\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * json web token\n     */\n    @JsonProperty('jwt', String, true)\n    public jwt: string = undefined;\n\n    /**\n     * language for the user interface\n     */\n    @JsonProperty('lang', String, true)\n    public lang: string = undefined;\n\n    /**\n     * is system administrator?\n     */\n    @JsonProperty('sysAdmin', Boolean)\n    public sysAdmin: boolean = undefined;\n\n    /**\n     * list of project shortcodes, where the user is project admin\n     */\n    @JsonProperty('projectAdmin', [String], true)\n    public projectAdmin: string[] = undefined;\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { ApiServiceError, KnoraConstants, KuiCoreConfigToken, User, UsersService } from '@knora/core';\nimport { Session } from '../declarations';\n\nimport * as momentImported from 'moment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nconst moment = momentImported;\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SessionService {\n\n    public session: Session;\n\n    /**\n     * max session time in milliseconds\n     * default value (24h): 86400000\n     *\n     */\n    readonly MAX_SESSION_TIME: number = 86400000; // 1d = 24 * 60 * 60 * 1000\n\n    constructor(\n        private _http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _users: UsersService) {\n    }\n\n    /**\n     * set the session by using the json web token (jwt) and the user object;\n     * it will be used in the login process\n     *\n     * @param jwt\n     * @param username\n     */\n    setSession(jwt: string, username: string) {\n\n        this.session = {\n            id: this.setTimestamp(),\n            user: {\n                name: username,\n                jwt: jwt,\n                lang: 'en',\n                sysAdmin: false,\n                projectAdmin: []\n            }\n        };\n        // store in the localStorage\n        localStorage.setItem('session', JSON.stringify(this.session));\n\n        // get user information\n        this._users.getUserByUsername(username).subscribe(\n            (result: User) => {\n                let sysAdmin: boolean = false;\n                const projectAdmin: string[] = [];\n\n                const groupsPerProjectKeys: string[] = Object.keys(result.permissions.groupsPerProject);\n\n                for (const key of groupsPerProjectKeys) {\n                    if (key === KnoraConstants.SystemProjectIRI) {\n                        sysAdmin = result.permissions.groupsPerProject[key].indexOf(KnoraConstants.SystemAdminGroupIRI) > -1;\n                    }\n\n                    if (result.permissions.groupsPerProject[key].indexOf(KnoraConstants.ProjectAdminGroupIRI) > -1) {\n                        projectAdmin.push(key);\n                    }\n                }\n\n                // define a session id, which is the timestamp of login\n                this.session = {\n                    id: this.setTimestamp(),\n                    user: {\n                        name: result.username,\n                        jwt: jwt,\n                        lang: result.lang,\n                        sysAdmin: sysAdmin,\n                        projectAdmin: projectAdmin\n                    }\n                };\n                // store in the localStorage\n                localStorage.setItem('session', JSON.stringify(this.session));\n\n            },\n            (error: ApiServiceError) => {\n                console.error(error);\n            }\n        );\n    }\n\n    private setTimestamp() {\n        return (moment().add(0, 'second')).valueOf();\n    }\n\n    getSession() {\n\n    }\n\n    updateSession() {\n\n    }\n\n    validateSession() {\n        // mix of checks with session.validation and this.authenticate\n        this.session = JSON.parse(localStorage.getItem('session'));\n\n        const tsNow: number = this.setTimestamp();\n\n        if (this.session) {\n            // the session exists\n            // check if the session is still valid:\n            // if session.id + MAX_SESSION_TIME > now: _session.validateSession()\n            if (this.session.id + this.MAX_SESSION_TIME < tsNow) {\n                // the internal session has expired\n                // check if the api v2/authentication is still valid\n\n                if (this.authenticate()) {\n                    // the api authentication is valid;\n                    // update the session.id\n                    this.session.id = tsNow;\n\n                    // localStorage.removeItem('session');\n                    localStorage.setItem('session', JSON.stringify(this.session));\n                    return true;\n\n                } else {\n                    // console.error('session.service -- validateSession -- authenticate: the session expired on API side');\n                    // a user is not authenticated anymore!\n                    this.destroySession();\n                    return false;\n                }\n\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    private authenticate(): Observable<boolean> {\n        return this._http.get(this.config.api + '/v2/authentication').pipe(\n            map((result: any) => {\n\n                // console.log('AuthenticationService - authenticate - result: ', result);\n                // return true || false\n                return result.status === 200;\n            })\n        );\n    }\n\n    destroySession() {\n        localStorage.removeItem('session');\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SessionService } from '../session/session.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private _session: SessionService,\n                private _router: Router) {\n\n    }\n\n    canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n        if (!this._session.validateSession()) {\n            this._router.navigate(['login'], {queryParams: {returnUrl: state.url}});\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","import { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { ApiServiceError, KuiCoreConfigToken } from '@knora/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SessionService } from './session/session.service';\n\n/**\n * Authentication service includes the login, logout method and a session method to check if a user is logged in or not.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthenticationService {\n\n    constructor(public http: HttpClient,\n                private _session: SessionService,\n                @Inject(KuiCoreConfigToken) public config) {\n\n        // console.log('AuthenticationService constructor: config', config);\n    }\n\n    /**\n     * validate if a user is logged in or not\n     * returns true if the session is active\n     *\n     * @returns boolean\n     */\n    session(): boolean {\n        return this._session.validateSession();\n    }\n\n    /**\n     * update the session storage\n     * @param jwt\n     * @param username\n     *\n     * @returns boolean\n     */\n    updateSession(jwt: string, username: string): boolean {\n        if (jwt && username) {\n            this._session.setSession(jwt, username);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * login process;\n     * it's used by the login component\n     *\n     * @param {string} identifier email or username\n     * @param {string} password\n     * @returns Observable<any>\n     */\n    login(username: string, password: string): Observable<any> {\n\n        // console.log('AuthenticationService - login - api: ', this.config.api);\n\n        return this.http.post(\n            this.config.api + '/v2/authentication',\n            {username: username, password: password},\n            {observe: 'response'}).pipe(\n                map((response: HttpResponse<any>): any => {\n                    return response;\n                }),\n                catchError((error: HttpErrorResponse) => {\n\n                    return this.handleRequestError(error);\n                })\n            );\n    }\n\n\n    /**\n     * logout the user by destroying the session\n     *\n     * @param\n     */\n    logout() {\n        // destroy the session\n        localStorage.removeItem('session');\n    }\n\n\n    /**\n     * @ignore\n     * handle request error in case of server error\n     *\n     * @param error\n     * @returns\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        const serviceError = new ApiServiceError();\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiServiceError, ApiServiceResult } from '@knora/core';\nimport { AuthenticationService } from '../authentication.service';\nimport { SessionService } from '../session/session.service';\n\n@Component({\n    selector: 'kui-login-form',\n    templateUrl: './login-form.component.html',\n    styleUrls: ['./login-form.component.scss']\n})\nexport class LoginFormComponent implements OnInit {\n\n    /**\n     * @param {string} [navigate]\n     * navigate to the defined url after successful login\n     */\n    @Input() navigate?: string;\n\n    /**\n     * @param {string} [color]\n     * set your theme color here,\n     * it will be used in the progress-indicator\n     */\n    @Input() color?: string;\n\n    returnUrl: string;\n\n    // is there already a valid session?\n    loggedInUser: string;\n\n    // form\n    frm: FormGroup;\n\n    loading = false;\n\n    // general error message\n    errorMessage: any;\n\n    // specific error messages\n    loginErrorUser = false;\n    loginErrorPw = false;\n    loginErrorServer = false;\n\n    // labels for the login form\n    login = {\n        title: 'Login',\n        name: 'Username',\n        pw: 'Password',\n        button: 'Login',\n        remember: 'Remember me',\n        forgot_pw: 'Forgot password?',\n        error: {\n            failed: 'Password or username is wrong',\n            server: 'There\\'s an error with the server connection. Try it again later or inform the Knora Team'\n        }\n    };\n\n    // error definitions for the following form fields\n    formErrors = {\n        'username': '',\n        'password': ''\n    };\n\n    // error messages for the form fields defined in formErrors\n    validationMessages = {\n        'username': {\n            'required': 'user name is required.'\n        },\n        'password': {\n            'required': 'password is required'\n        }\n    };\n\n\n    constructor(private _auth: AuthenticationService,\n                private _session: SessionService,\n                private _fb: FormBuilder,\n                private _route: ActivatedRoute,\n                private _router: Router) {\n    }\n\n\n    ngOnInit() {\n\n        // check if a user is already logged in\n        if (this._session.validateSession()) {\n            this.loggedInUser = JSON.parse(localStorage.getItem('session')).user.name;\n        } else {\n            this.buildForm();\n        }\n    }\n\n    buildForm(): void {\n        this.frm = this._fb.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        this.frm.valueChanges\n            .subscribe(data => this.onValueChanged(data));\n    }\n\n    /**\n     * @ignore\n     *\n     * check for errors while using the form\n     * @param data\n     */\n    onValueChanged(data?: any) {\n\n        if (!this.frm) {\n            return;\n        }\n\n        const form = this.frm;\n\n        Object.keys(this.formErrors).map(field => {\n            this.formErrors[field] = '';\n            const control = form.get(field);\n            if (control && control.dirty && !control.valid) {\n                const messages = this.validationMessages[field];\n                Object.keys(control.errors).map(key => {\n                    this.formErrors[field] += messages[key] + ' ';\n                });\n            }\n        });\n    }\n\n    doLogin() {\n\n        // reset the error messages\n        this.errorMessage = undefined;\n        this.loginErrorUser = false;\n        this.loginErrorPw = false;\n        this.loginErrorServer = false;\n\n        // make sure form values are valid\n        if (this.frm.invalid) {\n            this.loginErrorPw = true;\n            this.loginErrorUser = true;\n            return;\n        }\n\n        // Reset status\n        this.loading = true;\n\n        // Grab values from form\n        const username = this.frm.get('username').value;\n        const password = this.frm.get('password').value;\n\n        this._auth.login(username, password)\n            .subscribe(\n                (response: ApiServiceResult) => {\n\n                    // we have a token; set the session now\n                    this._session.setSession(response.body.token, username);\n\n                    setTimeout(() => {\n                        // get return url from route parameters or default to '/'\n                        this.returnUrl = this._route.snapshot.queryParams['returnUrl'] || '/';\n\n\n                        // go back to the previous route or to the route defined in the @Input if navigate exists\n                        if (!this.navigate) {\n                            this._router.navigate([this.returnUrl]);\n                        } else {\n                            this._router.navigate([this.navigate]);\n                        }\n\n                        this.loading = false;\n                    }, 2000);\n                },\n                (error: ApiServiceError) => {\n                    // error handling\n                    if (error.status === 0) {\n                        this.loginErrorUser = false;\n                        this.loginErrorPw = false;\n                        this.loginErrorServer = true;\n                    }\n                    if (error.status === 401) {\n                        this.loginErrorUser = false;\n                        this.loginErrorPw = true;\n                        this.loginErrorServer = false;\n                    }\n                    if (error.status === 404) {\n                        this.loginErrorUser = true;\n                        this.loginErrorPw = false;\n                        this.loginErrorServer = false;\n                    }\n                    this.errorMessage = <any> error;\n                    this.loading = false;\n                }\n            );\n\n    }\n\n    logout() {\n        this._auth.logout();\n        location.reload(true);\n    }\n\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SessionService } from '../session/session.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n    constructor(private _session: SessionService) {\n    }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n\n        if (this._session.validateSession()) {\n            // the session is valid (and up to date)\n            const jwt = JSON.parse(localStorage.getItem('session')).user.jwt;\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${jwt}`\n                }\n            });\n        } else {\n            this._session.destroySession();\n        }\n\n\n        return next.handle(request);\n    }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SessionService } from '../session/session.service';\n\n@Injectable()\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n\n    constructor(private _session: SessionService) {\n    }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n\n        // console.log('WithCredentialsInterceptor - intercept - request: ', request);\n\n        request = request.clone({\n            withCredentials: true\n        });\n\n        return next.handle(request);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatCardModule, MatDialogModule, MatFormFieldModule, MatIconModule, MatInputModule } from '@angular/material';\nimport { KuiActionModule } from '@knora/action';\n\nimport { LoginFormComponent } from './login-form/login-form.component';\nimport { JwtInterceptor } from './interceptors/jwt.interceptor';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        KuiActionModule,\n        MatCardModule,\n        MatIconModule,\n        MatInputModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        ReactiveFormsModule,\n        HttpClientModule\n    ],\n    declarations: [\n        LoginFormComponent\n    ],\n    exports: [\n        LoginFormComponent\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n        { provide: HTTP_INTERCEPTORS, useClass: WithCredentialsInterceptor, multi: true}\n    ]\n})\nexport class KuiAuthenticationModule {\n}\n","/*\n * Public API Surface of authentication\n */\n\nexport * from './lib/declarations/';\nexport * from './lib/guard/auth.guard';\nexport * from './lib/login-form/login-form.component';\nexport * from './lib/authentication.service';\nexport * from './lib/authentication.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {JwtInterceptor as Éµb} from './lib/interceptors/jwt.interceptor';\nexport {WithCredentialsInterceptor as Éµc} from './lib/interceptors/with-credentials.interceptor';\nexport {SessionService as Éµa} from './lib/session/session.service';"],"names":["tslib_1.__decorate","tslib_1.__values"],"mappings":"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"}
