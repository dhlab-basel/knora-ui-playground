{"version":3,"sources":["ng://@knora/search/lib/fulltext-search/fulltext-search.component.ts","node_modules/tslib/tslib.es6.js","ng://@knora/search/lib/search-panel/search-panel.component.ts","ng://@knora/search/lib/extended-search/extended-search.component.ts","ng://@knora/search/lib/expert-search/expert-search.component.ts","ng://@knora/search/lib/extended-search/select-ontology/select-ontology.component.ts","ng://@knora/search/lib/extended-search/select-property/select-property.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/specify-property-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/boolean-value/boolean-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/date-value/header-calendar/header-calendar.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/date-value/date-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/decimal-value/decimal-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/integer-value/integer-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/link-value/link-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/text-value/text-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/uri-value/uri-value.component.ts","ng://@knora/search/lib/extended-search/select-resource-class/select-resource-class.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/list-value/list-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/list-value/list-display/list-display.component.ts","ng://@knora/search/lib/search.module.ts"],"names":["FulltextSearchComponent","_overlay","_router","_viewContainerRef","_projectsService","this","route","projectfilter","prevSearch","JSON","parse","localStorage","getItem","defaultProjectLabel","projectLabel","searchPanelFocus","prototype","ngOnInit","filterbyproject","getProject","getAllProjects","setProject","openPanelWithBackdrop","_this","config","OverlayConfig","hasBackdrop","backdropClass","positionStrategy","getOverlayPosition","scrollStrategy","scrollStrategies","block","overlayRef","create","attach","TemplatePortal","searchMenu","backdropClick","subscribe","detach","positions","ConnectionPositionPair","originX","originY","overlayX","overlayY","position","flexibleConnectedTo","searchPanel","withPositions","withLockedPosition","projects","project","error","console","id","getProjectByIri","shortname","projectIri","setItem","stringify","undefined","removeItem","doSearch","searchQuery","navigate","encodeURIComponent","existingPrevSearch","i","existingPrevSearch_1","__values","o","m","Symbol","iterator","call","next","length","value","done","tslib_1.__values","existingPrevSearch_1_1","entry","query","splice","currentQuery","push","resetSearch","searchInput","nativeElement","blur","setFocus","doPrevSearch","resetPrevSearch","indexOf","changeFocus","selectProject","closeMenu","focus","Component","args","selector","template","Overlay","Router","ViewContainerRef","ProjectsService","Input","ViewChild","SearchPanelComponent","advanced","expert","type","showAdvanced","ExtendedSearchComponent","fb","_route","_cacheService","_gravSearchService","toggleExtendedSearchForm","EventEmitter","gravsearch","ontologies","activeProperties","resourceClasses","result","ReadResourcesSequence","formValid","form","group","statusChanges","data","validateForm","initializeOntologies","addProperty","removeProperty","getOntologiesMetadata","getResourceClassesAndPropertiesForOntology","ontologyIri","activeResourceClass","activeOntology","getEntityDefinitionsForOntologies","ontoInfo","getResourceClassesAsArray","properties","getProperties","getPropertiesForResourceClass","resourceClassIri","getResourceClassDefinitions","getResourceClasses","valid","propertyComponents","resourceClassComponent","getResourceClassSelected","resetForm","submit","resClass","resClassOption","map","propComp","getPropertySelectedWithValue","createGravsearchQuery","relativeTo","emit","FormBuilder","decorators","Inject","ActivatedRoute","OntologyCacheService","GravsearchGenerationService","Output","ViewChildren","ExpertSearchComponent","_searchService","_searchParamsService","toggleExpertSearchForm","initForm","expertSearchForm","gravquery","api","Validators","required","submitQuery","generateGravsearch","offset","queryTemplate","controls","offsetTemplate","changeSearchParamsMsg","ExtendedSearchParams","localOffset","SearchService","SearchParamsService","KuiCoreConfigToken","SelectOntologyComponent","ontologySelected","ontology","valueChanges","formGroup","addControl","resolvedPromise","Promise","resolve","SelectPropertyComponent","Object","defineProperty","_properties","propertySelected","updatePropertiesArray","_activeResourceClass","property","isSortCriterion","propIri","then","propIndex","index","ngOnDestroy","removeControl","sortCriterion","isLinkProperty","cardinalities","filter","card","occurrence","CardinalityOccurrence","maxCard","propsArray","hasOwnProperty","prop","isEditable","isLinkValueProperty","sort","OntologyInformation","sortFunc","propertiesAsArray","propVal","specifyPropertyValue","getComparisonOperatorAndValueLiteralForProperty","PropertyWithValue","SpecifyPropertyValueComponent","KnoraConstants","comparisonOperators","_property","comparisonOperatorSelected","resetComparisonOperators","propertyValueType","Resource","objectType","TextValue","Like","Match","Equals","NotEquals","Exists","BooleanValue","UriValue","IntValue","DecimalValue","DateValue","LessThan","LessThanEquals","GreaterThan","GreaterThanEquals","ListValue","GeomValue","FileValue","AudioFileValue","StillImageFileValue","DDDFileValue","MovingImageFileValue","TextFileValue","ColorValue","IntervalValue","log","ngOnChanges","comparisonOperator","getClassName","propertyValueComponent","getValue","ComparisonOperatorAndValue","BooleanValueComponent","booleanValue","compose","ValueLiteral","String","xsdBoolean","HeaderComponent","_calendar","_dateAdapter","_datepickerContent","supportedCalendarFormats","JDNConvertibleCalendar","supportedCalendars","JDNConvertibleCalendarDateAdapter","activeFormat","activeCalendarFormat","calendar","convertDate","convertedDate","convertCalendarFormat","activeDate","datepicker","select","updateTodaysDate","MatCalendar","Host","DateAdapter","MatDatepickerContent","DateValueComponent","headerComponent","dateValue","dateObj","calendarFormat","calendarName","calendarPeriod","toCalendarPeriod","dateString","toUpperCase","periodStart","year","month","day","periodEnd","dateSimple","DecimalValueComponent","decimalValue","xsdDecimal","IntegerValueComponent","integerValue","pattern","xsdInteger","require","LinkValueComponent","LinkValue","_restrictToResourceClass","displayResource","resource","label","searchByLabel","searchTerm","searchByLabelReadResourceSequence","limitToResourceClass","resources","err","validateResource","c","ReadResource","noResource","IRI","TextValueComponent","textValue","xsdString","UriValueComponent","uriValue","Utils","RegexUrl","xsdUri","SelectResourceClassComponent","resourceClassSelectedEvent","_resourceClasses","resourceClassSelected","resourceClass","ListValueComponent","_listCacheService","getRootNodeIri","guiAttr","guiAttribute","startsWith","substr","listValue","rootNodeIri","getList","list","listRootNode","getSelectedNode","item","menuTrigger","selectedNode","setValue","ListCacheService","MatMenuTrigger","ListDisplayComponent","KuiSearchModule","NgModule","imports","CommonModule","BrowserAnimationsModule","MatAutocompleteModule","MatButtonModule","MatCheckboxModule","MatDatepickerModule","MatExpansionModule","MatFormFieldModule","MatInputModule","MatIconModule","MatListModule","MatMenuModule","MatSelectModule","MatTooltipModule","FormsModule","ReactiveFormsModule","KuiCoreModule","KuiActionModule","KuiViewerModule","MatJDNConvertibleCalendarDateAdapterModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { ConnectionPositionPair, Overlay, OverlayConfig, OverlayRef, PositionStrategy } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Component, ElementRef, Input, OnInit, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiServiceError, Project, ProjectsService } from '@knora/core';\nimport { MatMenuTrigger } from '@angular/material';\n\nexport interface PrevSearchItem {\n    projectIri?: string;\n    projectLabel?: string;\n    query: string;\n}\n\n/**\n * @deprecated\n */\n@Component({\n    selector: 'kui-fulltext-search',\n    templateUrl: './fulltext-search.component.html',\n    styleUrls: ['./fulltext-search.component.scss', '../assets/style/search.scss']\n})\nexport class FulltextSearchComponent implements OnInit {\n\n    /**\n     *\n     * @param  {string} route Route to navigate after search.\n     * This route path should contain a component for search results.\n     */\n    @Input() route: string = '/search';\n\n    /**\n     *\n     * @param  {boolean} [projectfilter] If true it shows the selection\n     * of projects to filter by one of them\n     */\n    @Input() projectfilter?: boolean = false;\n\n    /**\n     *\n     * @param  {string} [filterbyproject] If the full-text search should be\n     * filtered by one project, you can define it with project iri.\n     */\n    @Input() filterbyproject?: string;\n\n    @ViewChild('fulltextSearchPanel') searchPanel: ElementRef;\n    @ViewChild('fulltextSearchInput') searchInput: ElementRef;\n    @ViewChild('fulltextSearchMenu') searchMenu: TemplateRef<any>;\n\n    @ViewChild('btnToSelectProject') selectProject: MatMenuTrigger;\n\n    // search query\n    searchQuery: string;\n\n    // previous search = full-text search history\n    prevSearch: PrevSearchItem[] = JSON.parse(localStorage.getItem('prevSearch'));\n\n    // list of projects, in case of filterproject is true\n    projects: Project[];\n\n    // selected project, in case of filterbyproject and/or projectfilter is true\n    project: Project;\n    defaultProjectLabel: string = 'All projects';\n    projectLabel: string = this.defaultProjectLabel;\n    projectIri: string;\n\n    // in case of an (api) error\n    error: any;\n\n    // is search panel focused?\n    searchPanelFocus: boolean = false;\n\n    // overlay reference\n    overlayRef: OverlayRef;\n\n    constructor (\n        private _overlay: Overlay,\n        private _router: Router,\n        private _viewContainerRef: ViewContainerRef,\n        private _projectsService: ProjectsService\n    ) { }\n\n    ngOnInit() {\n\n        // this.setFocus();\n\n        if (this.filterbyproject) {\n            this.getProject(this.filterbyproject);\n        }\n\n        if (this.projectfilter) {\n            this.getAllProjects();\n\n            if (localStorage.getItem('currentProject') !== null) {\n                this.setProject(\n                    JSON.parse(localStorage.getItem('currentProject'))\n                );\n            }\n        }\n    }\n\n    openPanelWithBackdrop() {\n        const config = new OverlayConfig({\n            hasBackdrop: true,\n            backdropClass: 'cdk-overlay-transparent-backdrop',\n            // backdropClass: 'cdk-overlay-dark-backdrop',\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this._overlay.scrollStrategies.block()\n        });\n\n        this.overlayRef = this._overlay.create(config);\n        this.overlayRef.attach(new TemplatePortal(this.searchMenu, this._viewContainerRef));\n        this.overlayRef.backdropClick().subscribe(() => {\n            this.searchPanelFocus = false;\n            this.overlayRef.detach();\n        });\n    }\n\n    getOverlayPosition(): PositionStrategy {\n        const positions = [\n            new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n        ];\n\n        const overlayPosition = this._overlay.position().flexibleConnectedTo(this.searchPanel).withPositions(positions).withLockedPosition(false);\n\n        return overlayPosition;\n    }\n\n    getAllProjects(): void {\n        this._projectsService.getAllProjects().subscribe(\n            (projects: Project[]) => {\n                this.projects = projects;\n                // this.loadSystem = false;\n                if (localStorage.getItem('currentProject') !== null) {\n                    this.project = JSON.parse(\n                        localStorage.getItem('currentProject')\n                    );\n                }\n            },\n            (error: ApiServiceError) => {\n                console.error(error);\n                this.error = error;\n            }\n        );\n    }\n\n    getProject(id: string): void {\n        this._projectsService.getProjectByIri(id).subscribe(\n            (project: Project) => {\n                this.setProject(project);\n            },\n            (error: ApiServiceError) => {\n                console.error(error);\n            }\n        );\n    }\n\n    // set current project and switch focus to input field\n    setProject(project?: Project): void {\n        if (!project) {\n            // set default project: all\n            this.projectLabel = this.defaultProjectLabel;\n            this.projectIri = undefined;\n            localStorage.removeItem('currentProject');\n        } else {\n            // set current project shortname and id\n            this.projectLabel = project.shortname;\n            this.projectIri = project.id;\n            localStorage.setItem('currentProject', JSON.stringify(project));\n        }\n    }\n\n    doSearch(): void {\n        if (this.searchQuery !== undefined && this.searchQuery !== null) {\n            if (this.projectIri !== undefined) {\n                this._router.navigate([\n                    this.route +\n                    '/fulltext/' +\n                    this.searchQuery +\n                    '/' +\n                    encodeURIComponent(this.projectIri)\n                ]);\n            } else {\n                this._router.navigate([\n                    this.route + '/fulltext/' + this.searchQuery\n                ]);\n            }\n            // push the search query into the local storage prevSearch array (previous search)\n            // to have a list of recent search requests\n            let existingPrevSearch: PrevSearchItem[] = JSON.parse(\n                localStorage.getItem('prevSearch')\n            );\n            if (existingPrevSearch === null) {\n                existingPrevSearch = [];\n            }\n            let i: number = 0;\n            for (const entry of existingPrevSearch) {\n                // remove entry, if exists already\n                if (this.searchQuery === entry.query && this.projectIri === entry.projectIri) {\n                    existingPrevSearch.splice(i, 1);\n                }\n                i++;\n            }\n\n            // A search value is expected to have at least length of 3\n            if (this.searchQuery.length > 2) {\n                let currentQuery: PrevSearchItem = {\n                    query: this.searchQuery\n                };\n\n                if (this.projectIri) {\n                    currentQuery = {\n                        projectIri: this.projectIri,\n                        projectLabel: this.projectLabel,\n                        query: this.searchQuery\n                    };\n                }\n\n                existingPrevSearch.push(currentQuery);\n\n                localStorage.setItem(\n                    'prevSearch',\n                    JSON.stringify(existingPrevSearch)\n                );\n            }\n        }\n        this.resetSearch();\n        this.overlayRef.detach();\n    }\n\n    resetSearch(): void {\n        this.searchPanelFocus = false;\n        this.searchInput.nativeElement.blur();\n        this.overlayRef.detach();\n    }\n\n    setFocus(): void {\n        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n        this.searchPanelFocus = true;\n        this.openPanelWithBackdrop();\n    }\n\n    doPrevSearch(prevSearch: PrevSearchItem): void {\n        this.searchQuery = prevSearch.query;\n\n        if (prevSearch.projectIri !== undefined) {\n            this.projectIri = prevSearch.projectIri;\n            this.projectLabel = prevSearch.projectLabel;\n            this._router.navigate([this.route + '/fulltext/' + this.searchQuery + '/' + encodeURIComponent(prevSearch.projectIri)]);\n        } else {\n            this.projectIri = undefined;\n            this.projectLabel = this.defaultProjectLabel;\n            this._router.navigate([this.route + '/fulltext/' + this.searchQuery]);\n        }\n\n        this.resetSearch();\n        this.overlayRef.detach();\n    }\n\n    resetPrevSearch(prevSearch?: PrevSearchItem): void {\n        if (prevSearch) {\n            // delete only this item with the name ...\n            const i: number = this.prevSearch.indexOf(prevSearch);\n            this.prevSearch.splice(i, 1);\n            localStorage.setItem('prevSearch', JSON.stringify(this.prevSearch));\n        } else {\n            // delete the whole \"previous search\" array\n            localStorage.removeItem('prevSearch');\n        }\n        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n    }\n\n    changeFocus() {\n        this.selectProject.closeMenu();\n        this.searchInput.nativeElement.focus();\n        this.setFocus();\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ConnectionPositionPair, Overlay, OverlayConfig, OverlayRef, PositionStrategy } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Component, Input, TemplateRef, ViewChild, ViewContainerRef, ElementRef } from '@angular/core';\n\n/**\n * The search-panel contains the kui-fulltext-search and the kui-extended-search components.\n */\n@Component({\n    selector: 'kui-search-panel',\n    templateUrl: './search-panel.component.html',\n    styleUrls: ['./search-panel.component.scss', '../assets/style/search.scss']\n})\nexport class SearchPanelComponent {\n    /**\n     * @param  {string} route Route to navigate after search. This route path should contain a component for search results.\n     */\n    @Input() route: string = '/search';\n\n    /**\n     *@param  {boolean} [projectfilter] If true it shows the selection of projects to filter by one of them\n     */\n    @Input() projectfilter?: boolean = false;\n\n    /**\n     * @param  {string} [filterbyproject] If your full-text search should be filtered by one project, you can define it with project iri in the parameter filterbyproject.\n     */\n    @Input() filterbyproject?: string;\n\n    /**\n     * @param  {boolean} [advanced] Adds the extended / advanced search to the panel\n     */\n    @Input() advanced?: boolean = false;\n\n    /**\n     * @param  {boolean} [expert] Adds the expert search / gravsearch editor to the panel\n     */\n    @Input() expert?: boolean = false;\n\n    @ViewChild('fullSearchPanel') searchPanel: ElementRef;\n\n    @ViewChild('searchMenu') searchMenu: TemplateRef<any>;\n    //    @ViewChild('expertSearchMenu') expertMenu: TemplateRef<any>;\n\n    // overlay reference\n    overlayRef: OverlayRef;\n\n    // show advanced or expert search\n    showAdvanced: boolean;\n\n    constructor (private _overlay: Overlay,\n        private _viewContainerRef: ViewContainerRef, ) { }\n\n    openPanelWithBackdrop(type: string) {\n\n        this.showAdvanced = (type === 'advanced');\n\n        const config = new OverlayConfig({\n            hasBackdrop: true,\n            backdropClass: 'cdk-overlay-transparent-backdrop',\n            // backdropClass: 'cdk-overlay-dark-backdrop',\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this._overlay.scrollStrategies.block()\n        });\n\n        this.overlayRef = this._overlay.create(config);\n        this.overlayRef.attach(new TemplatePortal(this.searchMenu, this._viewContainerRef));\n        this.overlayRef.backdropClick().subscribe(() => {\n            this.overlayRef.detach();\n        });\n    }\n\n    getOverlayPosition(): PositionStrategy {\n        const positions = [\n            new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })\n        ];\n\n        const overlayPosition = this._overlay.position().flexibleConnectedTo(this.searchPanel).withPositions(positions).withLockedPosition(false);\n\n        return overlayPosition;\n    }\n\n    closeMenu(): void {\n        this.overlayRef.detach();\n    }\n}\n","import { Component, EventEmitter, Inject, Input, OnInit, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n    GravsearchGenerationService,\n    OntologyCacheService,\n    OntologyInformation,\n    OntologyMetadata,\n    Properties,\n    PropertyWithValue,\n    ReadResourcesSequence,\n    ResourceClass\n} from '@knora/core';\nimport { SelectPropertyComponent } from './select-property/select-property.component';\nimport { SelectResourceClassComponent } from './select-resource-class/select-resource-class.component';\n\n/**\n * The extended search allows you to filter by project, by source type (resource class), or by the metadata (properties) of source types. Each filter can be standalone or combined. The metadata field can be precisely filtered with criteria such as \"contains\", \"like\", \"equals to\", \"exists\" or in case of a date value with \"before\" or \"after\". In addition, for a metadata field that is connected to another source type, it's possible to filter by this second source type. If you are looking for the source type \"Photograph\" with the metadata field \"Photographer\", which is connected to source type \"Person\", you can search for photograph(s) taken by person(s) who is born before February 1970. The result of this request will be an intersection of the two source types.\n */\n@Component({\n    selector: 'kui-extended-search',\n    templateUrl: './extended-search.component.html',\n    styleUrls: ['./extended-search.component.scss', '../assets/style/search.scss']\n})\nexport class ExtendedSearchComponent implements OnInit {\n\n    /**\n     * @param  {string} route Route to navigate after search. This route path should contain a component for search results.\n     */\n    @Input() route?;\n\n    /**\n     * @param  {boolean} toggleExtendedSearchForm Trigger toggle for extended search form.\n     */\n    @Output() toggleExtendedSearchForm = new EventEmitter<boolean>();\n\n    /**\n     * @param  {string} gravsearch Send the gravsearch query back.\n     */\n    @Output() gravsearch = new EventEmitter<string>();\n\n    // all available ontologies\n    ontologies: Array<OntologyMetadata> = [];\n\n    // ontology chosen by the user\n    activeOntology: string;\n\n    // properties specified by the user\n    activeProperties: boolean[] = [];\n\n    // resource classes for the selected ontology\n    resourceClasses: Array<ResourceClass> = [];\n\n    // definition of the selected resource class, if set.\n    activeResourceClass: ResourceClass;\n\n    // properties for the selected ontology or selected resource class\n    properties: Properties;\n\n    result: ReadResourcesSequence = new ReadResourcesSequence([], 0);\n\n    // reference to the component that controls the resource class selection\n    @ViewChild('resourceClass') resourceClassComponent: SelectResourceClassComponent;\n\n    // reference to the component controlling the property selection\n    @ViewChildren('property') propertyComponents: QueryList<SelectPropertyComponent>;\n\n    // FormGroup (used as parent for child components)\n    form: FormGroup;\n\n    // form validation status\n    formValid = false;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _cacheService: OntologyCacheService,\n        private _gravSearchService: GravsearchGenerationService) {\n    }\n\n    ngOnInit() {\n\n        // parent form is empty, it gets passed to the child components\n        this.form = this.fb.group({});\n\n        // if form status changes, re-run validation\n        this.form.statusChanges.subscribe((data) => {\n            this.formValid = this.validateForm();\n            // console.log(this.form);\n        });\n\n        // initialize ontologies to be used for the ontologies selection in the search form\n        this.initializeOntologies();\n    }\n\n    /**\n     * @ignore\n     * Add a property to the search form.\n     * @returns void\n     */\n    addProperty(): void {\n        this.activeProperties.push(true);\n    }\n\n    /**\n     * @ignore\n     * Remove the last property from the search form.\n     * @returns void\n     */\n    removeProperty(): void {\n        this.activeProperties.splice(-1, 1);\n    }\n\n    /**\n     * @ignore\n     * Gets all available ontologies for the search form.\n     * @returns void\n     */\n    initializeOntologies(): void {\n        this._cacheService.getOntologiesMetadata().subscribe(\n            (ontologies: Array<OntologyMetadata>) => {\n                this.ontologies = ontologies;\n            });\n    }\n\n    /**\n     * @ignore\n     * Once an ontology has been selected, gets its classes and properties.\n     * The classes and properties will be made available to the user for selection.\n     *\n     * @param ontologyIri Iri of the ontology chosen by the user.\n     * @returns void\n     */\n    getResourceClassesAndPropertiesForOntology(ontologyIri: string): void {\n\n        // reset active resource class definition\n        this.activeResourceClass = undefined;\n\n        // reset specified properties\n        this.activeProperties = [];\n\n        this.activeOntology = ontologyIri;\n\n        this._cacheService.getEntityDefinitionsForOntologies([ontologyIri]).subscribe(\n            (ontoInfo: OntologyInformation) => {\n\n                this.resourceClasses = ontoInfo.getResourceClassesAsArray(true);\n                this.properties = ontoInfo.getProperties();\n\n            }\n        );\n\n    }\n\n    /**\n     * @ignore\n     * Once a resource class has been selected, gets its properties.\n     * The properties will be made available to the user for selection.\n     *\n     * @param resourceClassIri\n     * @returns void\n     */\n    getPropertiesForResourceClass(resourceClassIri: string): void {\n\n        // reset specified properties\n        this.activeProperties = [];\n\n        // if the client undoes the selection of a resource class, use the active ontology as a fallback\n        if (resourceClassIri === null) {\n            this.getResourceClassesAndPropertiesForOntology(this.activeOntology);\n        } else {\n\n            this._cacheService.getResourceClassDefinitions([resourceClassIri]).subscribe(\n                (ontoInfo: OntologyInformation) => {\n                    this.properties = ontoInfo.getProperties();\n\n                    this.activeResourceClass = ontoInfo.getResourceClasses()[resourceClassIri];\n\n                }\n            );\n\n        }\n\n    }\n\n    /**\n     * @ignore\n     * Validates form and returns its status (boolean).\n     */\n    private validateForm() {\n\n        // check that either a resource class is selected or at least one property is specified\n        return this.form.valid &&\n            (this.propertyComponents.length > 0 || (this.resourceClassComponent !== undefined && this.resourceClassComponent.getResourceClassSelected() !== false));\n\n    }\n\n    /**\n     * @ignore\n     * Resets the form (selected resource class and specified properties) preserving the active ontology.\n     */\n    resetForm() {\n        if (this.activeOntology !== undefined) {\n            this.getResourceClassesAndPropertiesForOntology(this.activeOntology);\n        }\n    }\n\n\n    /**\n     * @ignore\n     * Creates a GravSearch query with the given form values and calls the extended search route.\n     */\n    submit() {\n\n        if (!this.formValid) return; // check that from is valid\n\n        const resClassOption = this.resourceClassComponent.getResourceClassSelected();\n\n        let resClass;\n\n        if (resClassOption !== false) {\n            resClass = resClassOption;\n        }\n\n        const properties: PropertyWithValue[] = this.propertyComponents.map(\n            (propComp) => {\n                return propComp.getPropertySelectedWithValue();\n            }\n        );\n\n        const gravsearch = this._gravSearchService.createGravsearchQuery(properties, resClass, 0);\n\n        if (this.route) {\n            this._router.navigate([this.route + '/extended/', gravsearch], { relativeTo: this._route });\n        } else {\n            this.gravsearch.emit(gravsearch);\n        }\n\n        // toggle extended search form\n        this.toggleExtendedSearchForm.emit(true);\n\n    }\n\n}\n","import { Component, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ExtendedSearchParams, KuiCoreConfigToken, SearchParamsService, SearchService } from '@knora/core';\n\n@Component({\n    selector: 'kui-expert-search',\n    templateUrl: './expert-search.component.html',\n    styleUrls: ['./expert-search.component.scss', '../assets/style/search.scss']\n})\nexport class ExpertSearchComponent implements OnInit {\n\n    /**\n     * @param  {string} route Route to navigate after search. This route path should contain a component for search results.\n     */\n    @Input() route?;\n\n    /**\n     * @param gravsearch Send the gravsearch query back.\n     */\n    @Output() gravsearch = new EventEmitter<string>();\n\n\n    /**\n     * @param  {boolean} toggleExtendedSearchForm Trigger toggle for extended search form.\n     */\n    @Output() toggleExpertSearchForm = new EventEmitter<boolean>();\n\n    expertSearchForm: FormGroup;\n\n    constructor (\n        private fb: FormBuilder,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _searchService: SearchService,\n        private _searchParamsService: SearchParamsService,\n        @Inject(KuiCoreConfigToken) public config\n    ) { }\n\n    ngOnInit() {\n        this.initForm();\n    }\n\n    /**\n     * @ignore\n     * Initiate the form with predefined Gravsearch query as example.\n     */\n    private initForm() {\n        this.expertSearchForm = this.fb.group({\n            gravquery: [\n                `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\nPREFIX incunabula: <${this.config.api}/ontology/0803/incunabula/simple/v2#>\n\nCONSTRUCT {\n    ?book knora-api:isMainResource true .\n    ?book incunabula:title ?title .\n\n} WHERE {\n    ?book a incunabula:book .\n    ?book incunabula:title ?title .\n}\n`,\n                Validators.required\n            ]\n        });\n    }\n\n    /**\n     * @ignore\n     * Send the gravsearch query to the result view, either through the route or by emitting the gravsearch as an output.\n     */\n    submitQuery() {\n        const gravsearch = this.generateGravsearch(0);\n\n        if (this.route) {\n            this._router.navigate([this.route + '/extended/', gravsearch], { relativeTo: this._route });\n        } else {\n            this.gravsearch.emit(gravsearch);\n        }\n\n        // toggle expert search form\n        this.toggleExpertSearchForm.emit(true);\n    }\n\n    /**\n     * @ignore\n     * Generate the whole gravsearch query matching the query given by the form.\n     */\n    private generateGravsearch(offset: number = 0): string {\n        const queryTemplate = this.expertSearchForm.controls['gravquery'].value;\n\n        // offset component of the Gravsearch query\n        const offsetTemplate = `\n         OFFSET ${offset}\n         `;\n\n        // function that generates the same Gravsearch query with the given offset\n        const generateGravsearchWithCustomOffset = (\n            localOffset: number\n        ): string => {\n            const offsetCustomTemplate = `\n             OFFSET ${localOffset}\n             `;\n\n            return queryTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another Gravsearch query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(\n                new ExtendedSearchParams(generateGravsearchWithCustomOffset)\n            );\n        }\n        return queryTemplate + offsetTemplate;\n    }\n\n    /**\n     * @ignore\n     * Reset the form to the initial state.\n     */\n    resetForm() {\n        this.initForm();\n    }\n}\n","import { Component, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { OntologyMetadata } from '@knora/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'kui-select-ontology',\n  templateUrl: './select-ontology.component.html',\n  styleUrls: ['./select-ontology.component.scss', '../../assets/style/search.scss']\n})\nexport class SelectOntologyComponent implements OnInit {\n\n  @Input() formGroup: FormGroup;\n\n  @Input() ontologies: Array<OntologyMetadata>;\n\n  @Output() ontologySelected = new EventEmitter<string>();\n\n  form: FormGroup;\n\n  constructor(@Inject(FormBuilder) private fb: FormBuilder) { }\n\n  ngOnInit() {\n\n    // build a form for the named graph selection\n    this.form = this.fb.group({\n      ontology: [null, Validators.required]\n    });\n\n    // emit Iri of the ontology when being selected\n    this.form.valueChanges.subscribe((data) => {\n      this.ontologySelected.emit(data.ontology);\n    });\n\n    // add form to the parent form group\n    this.formGroup.addControl('ontology', this.form);\n\n  }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport {\n    Cardinality,\n    CardinalityOccurrence,\n    ComparisonOperatorAndValue,\n    Properties,\n    Property,\n    PropertyWithValue,\n    ResourceClass\n} from '@knora/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SpecifyPropertyValueComponent } from './specify-property-value/specify-property-value.component';\nimport { OntologyInformation } from '@knora/core';\n\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'kui-select-property',\n    templateUrl: './select-property.component.html',\n    styleUrls: ['./select-property.component.scss', '../../assets/style/search.scss']\n})\nexport class SelectPropertyComponent implements OnInit, OnDestroy {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    // index of the given property (unique)\n    @Input() index: number;\n\n    // setter method for properties when being updated by parent component\n    @Input()\n    set properties(value: Properties) {\n        this.propertySelected = undefined; // reset selected property (overwriting any previous selection)\n        this._properties = value;\n        this.updatePropertiesArray();\n    }\n\n    get properties() {\n        return this._properties;\n    }\n\n    _activeResourceClass: ResourceClass;\n\n    // setter method for selected resource class\n    @Input()\n    set activeResourceClass(value: ResourceClass) {\n        this._activeResourceClass = value;\n    }\n\n    // reference to child component: combination of comparison operator and value for chosen property\n    @ViewChild('specifyPropertyValue') specifyPropertyValue: SpecifyPropertyValueComponent;\n\n    // properties that can be selected from\n    private _properties: Properties;\n\n    // properties as an Array structure (based on this.properties)\n    propertiesAsArray: Array<Property>;\n\n    // represents the currently selected property\n    propertySelected: Property;\n\n    form: FormGroup;\n\n    // unique name for this property to be used in the parent FormGroup\n    propIndex: string;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        // build a form for the property selection\n        this.form = this.fb.group({\n            property: [null, Validators.required],\n            isSortCriterion: [false, Validators.required]\n        });\n\n        // update the selected property\n        this.form.valueChanges.subscribe((data) => {\n            const propIri = data.property;\n            this.propertySelected = this._properties[propIri];\n        });\n\n        resolvedPromise.then(() => {\n            this.propIndex = 'property' + this.index;\n\n            // add form to the parent form group\n            this.formGroup.addControl(this.propIndex, this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl(this.propIndex);\n        });\n    }\n\n    /**\n     * Indicates if property can be used as a sort criterion.\n     * Property has to have cardinality or max cardinality 1 for the chosen resource class.\n     *\n     * We cannot sort by properties whose cardinality is greater than 1.\n     * Return boolean\n     */\n    sortCriterion() {\n\n        // check if a resource class is selected and if the property's cardinality is 1 for the selected resource class\n        if (this._activeResourceClass !== undefined && this.propertySelected !== undefined && !this.propertySelected.isLinkProperty) {\n\n            const cardinalities: Cardinality[] = this._activeResourceClass.cardinalities.filter(\n                (card: Cardinality) => {\n                    // cardinality 1 or max occurrence 1\n                    return card.property === this.propertySelected.id\n                        && card.value === 1\n                        && (card.occurrence === CardinalityOccurrence.card || card.occurrence === CardinalityOccurrence.maxCard);\n\n                }\n            );\n\n            return cardinalities.length === 1;\n        } else {\n            return false;\n        }\n\n    }\n\n    /**\n     * Updates the properties array that is accessed by the template.\n     */\n    private updatePropertiesArray() {\n\n        // represent the properties as an array to be accessed by the template\n        const propsArray = [];\n\n        for (const propIri in this._properties) {\n            if (this._properties.hasOwnProperty(propIri)) {\n                const prop = this._properties[propIri];\n\n                // only list editable props that are not link value props\n                if (prop.isEditable && !prop.isLinkValueProperty) {\n                    propsArray.push(this._properties[propIri]);\n                }\n            }\n        }\n\n        // sort properties by label (ascending)\n        propsArray.sort(OntologyInformation.sortFunc);\n\n        this.propertiesAsArray = propsArray;\n    }\n\n    /**\n     * Returns the selected property with the specified value.\n     */\n    getPropertySelectedWithValue(): PropertyWithValue {\n\n        const propVal: ComparisonOperatorAndValue = this.specifyPropertyValue.getComparisonOperatorAndValueLiteralForProperty();\n\n        let isSortCriterion = false;\n\n        // only non linking properties can be used for sorting\n        if (!this.propertySelected.isLinkProperty) {\n            isSortCriterion = this.form.value.isSortCriterion;\n        }\n\n        return new PropertyWithValue(this.propertySelected, propVal, isSortCriterion);\n\n    }\n\n\n}\n","import { Component, Inject, Input, OnChanges, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n    ComparisonOperator,\n    ComparisonOperatorAndValue,\n    Equals,\n    Exists,\n    GreaterThan,\n    GreaterThanEquals,\n    KnoraConstants,\n    LessThan,\n    LessThanEquals,\n    Like,\n    Match,\n    NotEquals,\n    Property,\n    PropertyValue,\n    Value\n} from '@knora/core';\n\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'kui-specify-property-value',\n    templateUrl: './specify-property-value.component.html',\n    styleUrls: ['./specify-property-value.component.scss', '../../../assets/style/search.scss']\n})\nexport class SpecifyPropertyValueComponent implements OnInit, OnChanges {\n\n    KnoraConstants = KnoraConstants;\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    @ViewChild('propertyValue') propertyValueComponent: PropertyValue;\n\n    // setter method for the property chosen by the user\n    @Input()\n    set property(prop: Property) {\n        this.comparisonOperatorSelected = undefined; // reset to initial state\n        this._property = prop;\n        this.resetComparisonOperators(); // reset comparison operators for given property (overwriting any previous selection)\n    }\n\n    // getter method for this._property\n    get property(): Property {\n        return this._property;\n    }\n\n    private _property: Property;\n\n    form: FormGroup;\n\n    // available comparison operators for the property\n    comparisonOperators: Array<ComparisonOperator> = [];\n\n    // comparison operator selected by the user\n    comparisonOperatorSelected: ComparisonOperator;\n\n    // the type of the property\n    propertyValueType;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    /**\n     * Resets the comparison operators for this._property.\n     */\n    resetComparisonOperators() {\n\n        // depending on object class, set comparison operators and value entry field\n        if (this._property.isLinkProperty) {\n            this.propertyValueType = KnoraConstants.Resource;\n        } else {\n            this.propertyValueType = this._property.objectType;\n        }\n\n        switch (this.propertyValueType) {\n\n            case KnoraConstants.TextValue:\n                this.comparisonOperators = [new Like(), new Match(), new Equals(), new NotEquals(), new Exists()];\n                break;\n\n            case KnoraConstants.BooleanValue:\n            case KnoraConstants.Resource:\n            case KnoraConstants.UriValue:\n                this.comparisonOperators = [new Equals(), new NotEquals(), new Exists()];\n                break;\n\n            case KnoraConstants.IntValue:\n            case KnoraConstants.DecimalValue:\n            case KnoraConstants.DateValue:\n                this.comparisonOperators = [new Equals(), new NotEquals(), new LessThan(), new LessThanEquals(), new GreaterThan(), new GreaterThanEquals(), new Exists()];\n                break;\n\n            case KnoraConstants.ListValue:\n                this.comparisonOperators = [new Equals(), new NotEquals(), new Exists()];\n                break;\n\n            case KnoraConstants.GeomValue:\n            case KnoraConstants.FileValue:\n            case KnoraConstants.AudioFileValue:\n            case KnoraConstants.StillImageFileValue:\n            case KnoraConstants.DDDFileValue:\n            case KnoraConstants.MovingImageFileValue:\n            case KnoraConstants.TextFileValue:\n            case KnoraConstants.ColorValue:\n            case KnoraConstants.IntervalValue:\n                this.comparisonOperators = [new Exists()];\n                break;\n\n            default:\n                console.log('ERROR: Unsupported value type ' + this._property.objectType);\n\n        }\n\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n\n        // build a form for comparison operator selection\n        this.form = this.fb.group({\n            comparisonOperator: [null, Validators.required]\n        });\n\n        // store comparison operator when selected\n        this.form.valueChanges.subscribe((data) => {\n            this.comparisonOperatorSelected = data.comparisonOperator;\n        });\n\n        resolvedPromise.then(() => {\n\n            // remove from the parent form group (clean reset)\n            this.formGroup.removeControl('comparisonOperator');\n\n            // add form to the parent form group\n            this.formGroup.addControl('comparisonOperator', this.form);\n        });\n\n    }\n\n    /**\n     * Gets the specified comparison operator and value for the property.\n     *\n     * returns {ComparisonOperatorAndValue} the comparison operator and the specified value\n     */\n    getComparisonOperatorAndValueLiteralForProperty(): ComparisonOperatorAndValue {\n        // return value (literal or IRI) from the child component\n        let value: Value;\n\n        // comparison operator 'Exists' does not require a value\n        if (this.comparisonOperatorSelected.getClassName() !== 'Exists') {\n            value = this.propertyValueComponent.getValue();\n        }\n\n        // return the comparison operator and the specified value\n        return new ComparisonOperatorAndValue(this.comparisonOperatorSelected, value);\n\n    }\n\n}\n\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n\n@Component({\n    selector: 'boolean-value',\n    templateUrl: './boolean-value.component.html',\n    styleUrls: ['./boolean-value.component.scss']\n})\nexport class BooleanValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.BooleanValue;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            booleanValue: [false, Validators.compose([Validators.required])]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n        return new ValueLiteral(String(this.form.value.booleanValue), KnoraConstants.xsdBoolean);\n    }\n}\n","import { Component, Directive, Host, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\nimport { GregorianCalendarDate, JDNConvertibleCalendar, JDNPeriod } from 'jdnconvertiblecalendar';\nimport { DateAdapter, MAT_DATE_LOCALE, MatCalendar, MatDatepickerContent } from '@angular/material';\nimport { JDNConvertibleCalendarDateAdapter } from 'jdnconvertiblecalendardateadapter';\n\n/** Custom header component containing a calendar format switcher */\n@Component({\n    selector: 'kui-calendar-header',\n    template: `\n      <mat-select placeholder=\"Calendar Format\" class=\"kui-calendar-header\" [formControl]=\"form.controls['calendar']\">\n        <mat-option *ngFor=\"let cal of supportedCalendarFormats\" [value]=\"cal\">{{cal}}</mat-option>\n      </mat-select>\n      <mat-calendar-header></mat-calendar-header>\n    `,\n    styleUrls: ['./header-calendar.component.scss']\n})\nexport class HeaderComponent<D> implements OnInit {\n    constructor (@Host() private _calendar: MatCalendar<JDNConvertibleCalendar>,\n        private _dateAdapter: DateAdapter<JDNConvertibleCalendar>,\n        private _datepickerContent: MatDatepickerContent<JDNConvertibleCalendar>,\n        @Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    form: FormGroup;\n\n    // a list of supported calendar formats (Gregorian and Julian)\n    supportedCalendarFormats = JDNConvertibleCalendar.supportedCalendars;\n\n    // the currently active calendar format\n    activeFormat;\n\n    ngOnInit() {\n\n        // get the currently active calendar format from the date adapter\n        if (this._dateAdapter instanceof JDNConvertibleCalendarDateAdapter) {\n            this.activeFormat = this._dateAdapter.activeCalendarFormat;\n        } else {\n            console.log('date adapter is expected to be an instance of JDNConvertibleCalendarDateAdapter');\n        }\n\n        // build a form for the calendar format selection\n        this.form = this.fb.group({\n            calendar: [this.activeFormat, Validators.required]\n        });\n\n        // do the conversion when the user selects another calendar format\n        this.form.valueChanges.subscribe((data) => {\n            // pass the target calendar format to the conversion method\n            this.convertDate(data.calendar);\n        });\n\n    }\n\n    /**\n     * Converts the date into the target format.\n     *\n     * @param calendar the target calendar format.\n     */\n    convertDate(calendar: 'Gregorian' | 'Julian') {\n\n        if (this._dateAdapter instanceof JDNConvertibleCalendarDateAdapter) {\n\n            // convert the date into the target calendar format\n            const convertedDate = this._dateAdapter.convertCalendarFormat(this._calendar.activeDate, calendar);\n\n            // set the new date\n            this._calendar.activeDate = convertedDate;\n\n            // select the new date in the datepicker UI\n            this._datepickerContent.datepicker.select(convertedDate);\n\n            // update view after calendar format conversion\n            this._calendar.updateTodaysDate();\n        } else {\n            console.log('date adapter is expected to be an instance of JDNConvertibleCalendarDateAdapter');\n        }\n    }\n}\n","import { Component, Host, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\nimport { GregorianCalendarDate, JDNConvertibleCalendar, JDNPeriod } from 'jdnconvertiblecalendar';\nimport { HeaderComponent } from './header-calendar/header-calendar.component';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'date-value',\n    templateUrl: './date-value.component.html',\n    styleUrls: ['./date-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class DateValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.DateValue;\n\n    form: FormGroup;\n\n    // custom header for the datepicker\n    headerComponent = HeaderComponent;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    ngOnInit() {\n\n        // init datepicker\n        this.form = this.fb.group({\n            dateValue: [null, Validators.compose([Validators.required])]\n        });\n\n        this.form.valueChanges.subscribe((data) => {\n            // console.log(data.dateValue);\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        const dateObj: JDNConvertibleCalendar = this.form.value.dateValue;\n\n        // get calendar format\n        const calendarFormat = dateObj.calendarName;\n        // get calendar period\n        const calendarPeriod = dateObj.toCalendarPeriod();\n        // get the date\n        const dateString = `${calendarFormat.toUpperCase()}:${calendarPeriod.periodStart.year}-${calendarPeriod.periodStart.month}-${calendarPeriod.periodStart.day}:${calendarPeriod.periodEnd.year}-${calendarPeriod.periodEnd.month}-${calendarPeriod.periodEnd.day}`;\n\n        return new ValueLiteral(String(dateString), KnoraConstants.dateSimple);\n    }\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'decimal-value',\n    templateUrl: './decimal-value.component.html',\n    styleUrls: ['./decimal-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class DecimalValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.DecimalValue;\n\n    form: FormGroup;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            decimalValue: [null, Validators.compose([Validators.required])]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.decimalValue), KnoraConstants.xsdDecimal);\n    }\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'integer-value',\n    templateUrl: './integer-value.component.html',\n    styleUrls: ['./integer-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class IntegerValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.IntValue;\n\n    form: FormGroup;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            integerValue: [null, Validators.compose([Validators.required, Validators.pattern(/^-?\\d+$/)])] // only allow for integer values (no fractions)\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.integerValue), KnoraConstants.xsdInteger);\n    }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    ApiServiceResult,\n    ConvertJSONLD,\n    IRI,\n    KnoraConstants,\n    OntologyCacheService,\n    PropertyValue,\n    ReadResource,\n    ReadResourcesSequence,\n    SearchService,\n    Value\n} from '@knora/core';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'link-value',\n    templateUrl: './link-value.component.html',\n    styleUrls: ['./link-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class LinkValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.LinkValue;\n\n    form: FormGroup;\n\n    resources: ReadResource[];\n\n    private _restrictToResourceClass: string;\n\n    @Input()\n    set restrictResourceClass(value: string) {\n        this._restrictToResourceClass = value;\n    }\n\n    get restrictResourceClass() {\n        return this._restrictToResourceClass;\n    }\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder, private _searchService: SearchService, private _cacheService: OntologyCacheService) {\n\n    }\n\n    /**\n     * Displays a selected resource using its label.\n     *\n     * @param resource the resource to be displayed (or no selection yet).\n     * @returns\n     */\n    displayResource(resource: ReadResource | null) {\n\n        // null is the initial value (no selection yet)\n        if (resource !== null) {\n            return resource.label;\n        }\n    }\n\n    /**\n     * Search for resources whose labels contain the given search term, restricting to to the given properties object constraint.\n     *\n     * @param searchTerm\n     */\n    searchByLabel(searchTerm: string) {\n\n        // at least 3 characters are required\n        if (searchTerm.length >= 3) {\n\n            this._searchService.searchByLabelReadResourceSequence(searchTerm, 0, { limitToResourceClass: this._restrictToResourceClass }).subscribe(\n                (result: ReadResourcesSequence) => {\n                    this.resources = result.resources;\n                }, function (err) {\n                    console.log('JSONLD of full resource request could not be expanded:' + err);\n                }\n            );\n        } else {\n            // clear selection\n            this.resources = undefined;\n        }\n\n    }\n\n    /**\n     * Checks that the selection is a [[ReadResource]].\n     *\n     * Surprisingly, [null] has to be returned if the value is valid: https://angular.io/guide/form-validation#custom-validators\n     *\n     * @param the form element whose value has to be checked.\n     * @returns\n     */\n    validateResource(c: FormControl) {\n\n        const isValidResource = (c.value instanceof ReadResource);\n\n        if (isValidResource) {\n            return null;\n        } else {\n            return {\n                noResource: {\n                    value: c.value\n                }\n            };\n        }\n\n    }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            resource: [null, Validators.compose([\n                Validators.required,\n                this.validateResource\n            ])]\n        });\n\n        this.form.valueChanges.subscribe((data) => {\n            this.searchByLabel(data.resource);\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new IRI(this.form.value.resource.id);\n    }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'text-value',\n    templateUrl: './text-value.component.html',\n    styleUrls: ['./text-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class TextValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.TextValue;\n\n    form: FormGroup;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            textValue: [null, Validators.required]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.textValue), KnoraConstants.xsdString);\n    }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Utils, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'uri-value',\n    templateUrl: './uri-value.component.html',\n    styleUrls: ['./uri-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class UriValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.UriValue;\n\n    form: FormGroup;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            uriValue: [null, Validators.compose([Validators.required, Validators.pattern(Utils.RegexUrl)])]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.uriValue), KnoraConstants.xsdUri);\n    }\n\n}\n","import { Component, EventEmitter, Inject, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ResourceClass } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'kui-select-resource-class',\n    templateUrl: './select-resource-class.component.html',\n    styleUrls: ['./select-resource-class.component.scss', '../../assets/style/search.scss']\n})\nexport class SelectResourceClassComponent implements OnInit, OnChanges {\n\n    @Input() formGroup: FormGroup;\n\n    // setter method for resource classes when being updated by parent component\n    @Input()\n    set resourceClasses(value: Array<ResourceClass>) {\n        this.resourceClassSelected = undefined; // reset on updates\n        this._resourceClasses = value;\n    }\n\n    // getter method for resource classes (used in template)\n    get resourceClasses() {\n        return this._resourceClasses;\n    }\n\n    // event emitted to parent component once a resource class is selected by the user\n    @Output() resourceClassSelectedEvent = new EventEmitter<string>();\n\n    // available resource classes for selection\n    private _resourceClasses: Array<ResourceClass>;\n\n    // stores the currently selected resource class\n    private resourceClassSelected: string;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    /**\n     * Returns the Iri of the selected resource class.\n     *\n     * @returns the Iri of the selected resource class or false in case no resource class is selected.\n     */\n    getResourceClassSelected(): any {\n        if (this.resourceClassSelected !== undefined && this.resourceClassSelected !== null) {\n            return this.resourceClassSelected;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Initalizes the FormGroup for the resource class selection.\n     * The initial value is set to null.\n     */\n    private initForm() {\n        // build a form for the resource class selection\n        this.form = this.fb.group({\n            resourceClass: [null] // resource class selection is optional\n        });\n\n        // store and emit Iri of the resource class when selected\n        this.form.valueChanges.subscribe((data) => {\n            this.resourceClassSelected = data.resourceClass;\n            this.resourceClassSelectedEvent.emit(this.resourceClassSelected);\n        });\n    }\n\n    ngOnInit() {\n\n        this.initForm();\n\n        // add form to the parent form group\n        this.formGroup.addControl('resourceClass', this.form);\n\n    }\n\n    ngOnChanges() {\n\n        if (this.form !== undefined) {\n\n            // resource classes have been reinitialized\n            // reset form\n            resolvedPromise.then(() => {\n\n                // remove this form from the parent form group\n                this.formGroup.removeControl('resourceClass');\n\n                this.initForm();\n\n                // add form to the parent form group\n                this.formGroup.addControl('resourceClass', this.form);\n\n            });\n\n        }\n    }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IRI, KnoraConstants, ListNodeV2, Property, PropertyValue, Value } from '@knora/core';\nimport { ListCacheService } from '@knora/core';\nimport { MatMenuTrigger } from '@angular/material';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'list-value',\n    templateUrl: './list-value.component.html',\n    styleUrls: ['./list-value.component.scss', '../../../../assets/style/search.scss']\n})\nexport class ListValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup?: FormGroup;\n\n    type = KnoraConstants.ListValue;\n\n    form: FormGroup;\n\n    @Input() property?: Property;\n\n    listRootNode: ListNodeV2;\n\n    // activeNode;\n\n    selectedNode: ListNodeV2;\n\n    @ViewChild(MatMenuTrigger) menuTrigger: MatMenuTrigger;\n\n    constructor (@Inject(FormBuilder) private fb: FormBuilder, private _listCacheService: ListCacheService) {\n    }\n\n    private getRootNodeIri(): string {\n        const guiAttr = this.property.guiAttribute;\n\n        if (guiAttr.length === 1 && guiAttr[0].startsWith('hlist=')) {\n            const listNodeIri = guiAttr[0].substr(7, guiAttr[0].length - (1 + 7)); // hlist=<>, get also rid of <>\n            return listNodeIri;\n        } else {\n            console.log('No root node Iri given for property');\n        }\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            listValue: [null, Validators.required]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n        const rootNodeIri = this.getRootNodeIri();\n\n        this._listCacheService.getList(rootNodeIri).subscribe(\n            (list: ListNodeV2) => {\n                this.listRootNode = list;\n            }\n        );\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n        return new IRI(this.form.value.listValue);\n    }\n\n    getSelectedNode(item: ListNodeV2) {\n        this.menuTrigger.closeMenu();\n        this.selectedNode = item;\n\n        this.form.controls['listValue'].setValue(item.id);\n    }\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ListNodeV2 } from '@knora/core';\nimport { MatMenuTrigger } from '@angular/material';\n\n@Component({\n    selector: 'list-display',\n    templateUrl: './list-display.component.html',\n    styleUrls: ['./list-display.component.scss']\n})\nexport class ListDisplayComponent implements OnInit {\n\n    @Input() children: ListNodeV2[];\n\n    @Output() selectedNode: EventEmitter<ListNodeV2> = new EventEmitter<ListNodeV2>();\n\n    @ViewChild('childMenu') public childMenu: MatMenuTrigger;\n\n    constructor () {\n    }\n\n    ngOnInit() {\n        // console.log(this.children)\n    }\n\n    setValue(item: ListNodeV2) {\n        this.selectedNode.emit(item);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatSelectModule,\n    MatTooltipModule\n} from '@angular/material';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { KuiCoreModule } from '@knora/core';\nimport { KuiActionModule } from '@knora/action';\nimport { KuiViewerModule } from '@knora/viewer';\n\nimport { MatJDNConvertibleCalendarDateAdapterModule } from 'jdnconvertiblecalendardateadapter';\n\nimport { SearchPanelComponent } from './search-panel/search-panel.component';\nimport { FulltextSearchComponent } from './fulltext-search/fulltext-search.component';\nimport { ExtendedSearchComponent } from './extended-search/extended-search.component';\nimport { ExpertSearchComponent } from './expert-search/expert-search.component';\n\nimport { SelectOntologyComponent } from './extended-search/select-ontology/select-ontology.component';\nimport { SelectResourceClassComponent } from './extended-search/select-resource-class/select-resource-class.component';\nimport { SelectPropertyComponent } from './extended-search/select-property/select-property.component';\nimport { SpecifyPropertyValueComponent } from './extended-search/select-property/specify-property-value/specify-property-value.component';\nimport { BooleanValueComponent } from './extended-search/select-property/specify-property-value/boolean-value/boolean-value.component';\nimport { DateValueComponent } from './extended-search/select-property/specify-property-value/date-value/date-value.component';\nimport { DecimalValueComponent } from './extended-search/select-property/specify-property-value/decimal-value/decimal-value.component';\nimport { IntegerValueComponent } from './extended-search/select-property/specify-property-value/integer-value/integer-value.component';\nimport { LinkValueComponent } from './extended-search/select-property/specify-property-value/link-value/link-value.component';\nimport { TextValueComponent } from './extended-search/select-property/specify-property-value/text-value/text-value.component';\nimport { UriValueComponent } from './extended-search/select-property/specify-property-value/uri-value/uri-value.component';\nimport { HeaderComponent } from './extended-search/select-property/specify-property-value/date-value/header-calendar/header-calendar.component';\nimport { ListValueComponent } from './extended-search/select-property/specify-property-value/list-value/list-value.component';\nimport { ListDisplayComponent } from './extended-search/select-property/specify-property-value/list-value/list-display/list-display.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatExpansionModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        MatListModule,\n        MatMenuModule,\n        MatSelectModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        KuiCoreModule,\n        KuiActionModule,\n        KuiViewerModule,\n        MatJDNConvertibleCalendarDateAdapterModule\n    ],\n    declarations: [\n        SelectOntologyComponent,\n        ExtendedSearchComponent,\n        SelectResourceClassComponent,\n        SelectPropertyComponent,\n        SpecifyPropertyValueComponent,\n        BooleanValueComponent,\n        DateValueComponent,\n        DecimalValueComponent,\n        IntegerValueComponent,\n        LinkValueComponent,\n        TextValueComponent,\n        UriValueComponent,\n        HeaderComponent,\n        FulltextSearchComponent,\n        SearchPanelComponent,\n        ListValueComponent,\n        ListDisplayComponent,\n        ExpertSearchComponent\n    ],\n    exports: [\n        SearchPanelComponent,\n        FulltextSearchComponent,\n        ExtendedSearchComponent,\n        ExpertSearchComponent,\n        DateValueComponent\n    ],\n    entryComponents: [\n        HeaderComponent\n    ]\n})\nexport class KuiSearchModule {\n}\n"]}