{"version":3,"file":"knora-core.js","sources":["ng://@knora/core/lib/core.module.ts","ng://@knora/core/lib/declarations/core.config.ts","ng://@knora/core/lib/declarations/api-service-result.ts","ng://@knora/core/lib/declarations/api-service-error.ts","ng://@knora/core/lib/declarations/api/knora-constants.ts","ng://@knora/core/lib/declarations/utils.ts","ng://@knora/core/lib/declarations/api/shared/strings.ts","ng://@knora/core/lib/declarations/api/shared/date.ts","ng://@knora/core/lib/declarations/api/admin/authentication/authentication-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project.ts","ng://@knora/core/lib/declarations/api/admin/groups/group.ts","ng://@knora/core/lib/declarations/api/admin/groups/group-response.ts","ng://@knora/core/lib/declarations/api/admin/groups/groups-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node.ts","ng://@knora/core/lib/declarations/api/admin/lists/list.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/lists-response.ts","ng://@knora/core/lib/declarations/api/admin/ontologies/ontology-info-short.ts","ng://@knora/core/lib/declarations/api/admin/permissions/permission-data.ts","ng://@knora/core/lib/declarations/api/admin/users/user.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-members-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/projects-response.ts","ng://@knora/core/lib/declarations/api/admin/users/users-response.ts","ng://@knora/core/lib/declarations/api/admin/users/user-response.ts","ng://@knora/core/lib/declarations/api/v2/properties/read-property-item.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resource.ts","ng://@knora/core/lib/services/api.service.ts","ng://@knora/core/lib/services/v2/ontology.service.ts","ng://@knora/core/lib/services/v2/ontology-cache.service.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resources-sequence.ts","ng://@knora/core/lib/declarations/api/v2/count-query/count-query-result.ts","ng://@knora/core/lib/declarations/api/v2/still-image/still-image-representation.ts","ng://@knora/core/lib/declarations/api/v2/still-image/image-region.ts","ng://@knora/core/lib/services/admin/groups.service.ts","ng://@knora/core/lib/services/admin/lists.service.ts","ng://@knora/core/lib/services/admin/projects.service.ts","ng://@knora/core/lib/services/admin/users.service.ts","ng://@knora/core/lib/services/admin/language.service.ts","ng://@knora/core/lib/services/admin/status-msg.service.ts","ng://@knora/core/lib/services/v2/convert-jsonld.ts","ng://@knora/core/lib/services/v2/resource.service.ts","ng://@knora/core/lib/services/v2/search.service.ts","ng://@knora/core/lib/services/v2/incoming.service.ts","ng://@knora/core/lib/services/v2/search-params.service.ts","ng://@knora/core/lib/services/v2/grav-search.service.ts","ng://@knora/core/lib/services/v2/store.service.ts","ng://@knora/core/lib/services/v2/basic-ontology.service.ts","ng://@knora/core/lib/services/v2/resource-types.service.ts","ng://@knora/core/lib/services/v2/list.service.ts","ng://@knora/core/lib/services/v2/list-cache.service.ts","ng://@knora/core/lib/declarations/api/operators.ts"],"sourcesContent":["import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { KuiCoreConfig } from './declarations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nexport const KuiCoreConfigToken = new InjectionToken<KuiCoreConfig>('KuiCoreConfigToken (knora.core.config)');\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: [],\n    exports: [\n        HttpClientModule\n    ]\n})\nexport class KuiCoreModule {\n    /**\n     *\n     * @param {KuiCoreConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: KuiCoreConfig): ModuleWithProviders {\n        // get the app environment configuration here\n        // console.log('KuiCoreModule - forRoot - config: ', config);\n        return {\n            ngModule: KuiCoreModule,\n            providers: [\n                {provide: KuiCoreConfigToken, useValue: config}\n            ]\n        };\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * Knora-ui core configuration with the server definitions of:\n *  - api: URL of data service e.g. knora: http://localhost:3333\n *  - media: URL of media server service e.g. sipi: http://localhost:1024\n *  - app: URL of the app e.g. salsah: http://localhost:4200\n */\n@JsonObject('KuiCoreConfig')\nexport class KuiCoreConfig {\n\n    /**\n     * name of the app e.g. 'SALSAH'\n     * @type {string}\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * url of the app e.g. 'https://salsah.org'\n     * @type {undefined}\n     */\n    @JsonProperty('app', String)\n    public app: string = undefined;\n\n    /**\n     * url of the api e.g. 'https://api.knora.org'\n     * @type {string}\n     */\n    @JsonProperty('api', String)\n    public api: string = undefined;\n\n    /**\n     * url of media/file server e.g. 'https://iiif.sipi.io'\n     * @type {string}\n     */\n    @JsonProperty('media', String)\n    public media: string = undefined;\n\n    /**\n     * url of the ontology e.g. 'http://api.02.unibas.dasch.swiss'\n     * @type {string}\n     */\n    @JsonProperty('ontologyIRI', String)\n    public ontologyIRI: string = undefined;\n\n}\n","\nimport { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\n\n/**\n * Result class used as API url response in ApiService\n */\nexport class ApiServiceResult {\n\n    private static jsonConvert: JsonConvert = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL);\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Body as JSON\n     */\n    body: any;\n\n    /**\n     * Gets the result body as instance of classObject.\n     * @param classObject\n     * @returns {any}\n     * @throws\n     */\n\n    getBody(classObject?: { new(): any }): any {\n        // console.log(this.body);\n        return ApiServiceResult.jsonConvert.deserialize(this.body, classObject);\n    }\n\n\n}\n","\n/**\n * Error class used as API response in ApiService\n */\nexport class ApiServiceError {\n\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Additional error info\n     */\n    errorInfo = '';\n\n}\n","export class KnoraConstants {\n\n    // The following version of Knora is needed to work properly with this module\n    public static KnoraVersion: string = '8.0.0';\n\n    public static KnoraApi: string = 'http://api.knora.org/ontology/knora-api';\n    public static PathSeparator: string = '#';\n\n    public static KnoraOntologyPath: string = 'http://www.knora.org/ontology';\n    public static KnoraBase: string = KnoraConstants.KnoraOntologyPath + '/knora-base';\n    public static KnoraAdmin: string = KnoraConstants.KnoraOntologyPath + '/knora-admin';\n\n    public static DefaultSharedOntologyIRI: string = KnoraConstants.KnoraAdmin + '#DefaultSharedOntologiesProject';\n    public static SystemProjectIRI: string = KnoraConstants.KnoraAdmin + '#SystemProject';\n    public static SystemAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#SystemAdmin';\n    public static ProjectAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectAdmin';\n    public static ProjectMemberGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectMember';\n\n    public static KnoraApiV2WithValueObjectPath: string = KnoraConstants.KnoraApi + '/v2' + KnoraConstants.PathSeparator;\n    public static KnoraApiV2SimplePath: string = KnoraConstants.KnoraApi + '/simple/v2' + KnoraConstants.PathSeparator;\n\n    public static SalsahGuiOntology: string = 'http://api.knora.org/ontology/salsah-gui/v2';\n\n    public static SalsahGuiOrder: string = KnoraConstants.SalsahGuiOntology + '#guiOrder';\n    public static SalsahGuiAttribute: string = KnoraConstants.SalsahGuiOntology + '#guiAttribute';\n\n\n    public static StandoffOntology: string = 'http://api.knora.org/ontology/standoff/v2';\n\n    public static Resource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Resource';\n    public static TextValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextValue';\n    public static IntValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntValue';\n    public static BooleanValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'BooleanValue';\n    public static UriValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'UriValue';\n    public static DecimalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DecimalValue';\n    public static DateValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DateValue';\n    public static ColorValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ColorValue';\n    public static GeomValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeomValue';\n    public static ListValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListValue';\n    public static IntervalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntervalValue';\n    public static LinkValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'LinkValue';\n    public static GeonameValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeonameValue';\n    public static FileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'FileValue';\n    public static AudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'AudioFileValue';\n    public static DDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DDDFileValue';\n    public static DocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DocumentFileValue';\n    public static StillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'StillImageFileValue';\n    public static MovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'MovingImageFileValue';\n    public static TextFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextFileValue';\n    public static IsResourceClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isResourceClass';\n    public static IsValueClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isValueClass';\n    public static ForbiddenResource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ForbiddenResource';\n    public static XMLToStandoffMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'XMLToStandoffMapping';\n    public static ListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListNode';\n\n    public static ArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'arkUrl';\n    public static versionArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'versionArkUrl';\n    public static ObjectType = KnoraConstants.KnoraApiV2WithValueObjectPath + 'objectType';\n\n    public static ResourceIcon: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'resourceIcon';\n    public static isEditable: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isEditable';\n    public static isLinkProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkProperty';\n    public static isLinkValueProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkValueProperty';\n    public static hasGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasGeometry';\n\n    public static schemaName: string = 'http://schema.org/name';\n    public static schemaNumberOfItems: string = 'http://schema.org/numberOfItems';\n    public static schemaItemListElement: string = 'http://schema.org/itemListElement';\n\n\n    public static RdfProperty: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property';\n    public static RdfsSchema: string = 'http://www.w3.org/2000/01/rdf-schema' + KnoraConstants.PathSeparator;\n    public static RdfsLabel: string = KnoraConstants.RdfsSchema + 'label';\n    public static RdfsComment: string = KnoraConstants.RdfsSchema + 'comment';\n    public static RdfsSubclassOf: string = KnoraConstants.RdfsSchema + 'subClassOf';\n    public static subPropertyOf: string = KnoraConstants.RdfsSchema + 'subPropertyOf';\n\n    public static owl: string = 'http://www.w3.org/2002/07/owl';\n\n    public static OwlClass: string = KnoraConstants.owl + '#Class';\n    public static OwlObjectProperty: string = KnoraConstants.owl + '#ObjectProperty';\n    public static OwlDatatypeProperty: string = KnoraConstants.owl + '#DatatypeProperty';\n    public static OwlAnnotationProperty: string = KnoraConstants.owl + '#AnnotationProperty';\n    public static OwlOnProperty: string = KnoraConstants.owl + '#onProperty';\n    public static OwlMaxCardinality: string = KnoraConstants.owl + '#maxCardinality';\n    public static OwlMinCardinality: string = KnoraConstants.owl + '#minCardinality';\n    public static OwlCardinality: string = KnoraConstants.owl + '#cardinality';\n    public static OwlRestriction: string = KnoraConstants.owl + '#Restriction';\n\n    public static creationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'creationDate';\n    public static lastModificationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'lastModificationDate';\n    public static hasPermissions: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasPermissions';\n    public static userHasPermission: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'userHasPermission';\n    public static attachedToProject: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToProject';\n    public static attachedToUser: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToUser';\n\n    public static Region: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Region';\n\n    public static ReadTextValueAsHtml: string = 'ReadTextValueAsHtml';\n    public static ReadTextValueAsString: string = 'ReadTextValueAsString';\n    public static ReadTextValueAsXml: string = 'ReadTextValueAsXml';\n    public static ReadDateValue: string = 'ReadDateValue';\n    public static ReadLinkValue: string = 'ReadLinkValue';\n    public static ReadIntegerValue: string = 'ReadIntegerValue';\n    public static ReadDecimalValue: string = 'ReadDecimalValue';\n    public static ReadStillImageFileValue: string = 'ReadStillImageFileValue';\n    public static ReadMovingImageFileValue: string = 'ReadMovingImageFileValue';\n    public static ReadAudioFileValue: string = 'ReadAudioFileValue';\n    public static ReadTextFileValue: string = 'ReadTextFileValue';\n    public static ReadGeomValue: string = 'ReadGeomValue';\n    public static ReadColorValue: string = 'ReadColorValue';\n    public static ReadUriValue: string = 'ReadUriValue';\n    public static ReadBooleanValue: string = 'ReadBooleanValue';\n    public static ReadIntervalValue: string = 'ReadIntervalValue';\n    public static ReadListValue: string = 'ReadListValue';\n\n    public static valueAsString: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'valueAsString';\n\n    public static textValueAsHtml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsHtml';\n    public static textValueAsXml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsXml';\n    public static textValueHasMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueHasMapping';\n\n    public static hasStandoffLinkToValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStandoffLinkToValue';\n\n    public static dateValueHasStartYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartYear';\n    public static dateValueHasEndYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndYear';\n    public static dateValueHasStartEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartEra';\n    public static dateValueHasEndEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndEra';\n    public static dateValueHasStartMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartMonth';\n    public static dateValueHasEndMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndMonth';\n    public static dateValueHasStartDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartDay';\n    public static dateValueHasEndDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndDay';\n    public static dateValueHasCalendar: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasCalendar';\n\n    public static linkValueHasTarget: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTarget';\n    public static linkValueHasSource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSource';\n    public static linkValueHasSourceIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSourceIri';\n    public static linkValueHasTargetIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTargetIri';\n\n    public static integerValueAsInteger: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intValueAsInt';\n\n    public static decimalValueAsDecimal: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'decimalValueAsDecimal';\n\n    public static fileValueAsUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueAsUrl';\n    public static fileValueIsPreview: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueIsPreview';\n    public static fileValueHasFilename: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueHasFilename';\n\n    public static hasStillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStillImageFileValue';\n\n    public static stillImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimX';\n    public static stillImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimY';\n    public static stillImageFileValueHasIIIFBaseUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasIIIFBaseUrl';\n\n    public static colorValueAsColor: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'colorValueAsColor';\n    public static geometryValueAsGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'geometryValueAsGeometry';\n    public static uriValueAsUri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'uriValueAsUri';\n    public static booleanValueAsBoolean: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'booleanValueAsBoolean';\n\n    public static intervalValueHasStart: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasStart';\n    public static intervalValueHasEnd: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasEnd';\n\n    public static listValueAsListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNode';\n\n    public static Xsd: string = 'http://www.w3.org/2001/XMLSchema#';\n\n    public static xsdString: string = KnoraConstants.Xsd + 'string';\n    public static xsdBoolean: string = KnoraConstants.Xsd + 'boolean';\n    public static xsdInteger: string = KnoraConstants.Xsd + 'integer';\n    public static xsdDecimal: string = KnoraConstants.Xsd + 'decimal';\n    public static xsdUri: string = KnoraConstants.Xsd + 'anyURI';\n\n    public static resourceSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Resource';\n    public static dateSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Date';\n    public static intervalSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Interval';\n    public static geomSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geom';\n    public static colorSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Color';\n    public static geonameSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geoname';\n    public static fileSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'File';\n    public static listNodeSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'ListNode';\n\n    public static matchFunction: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'match';\n\n    public static EqualsComparisonOperator: string = '=';\n    public static EqualsComparisonLabel: string = 'is equal to';\n\n    public static NotEqualsComparisonOperator: string = '!=';\n    public static NotEqualsComparisonLabel: string = 'is not equal to';\n\n    public static GreaterThanComparisonOperator: string = '>';\n    public static GreaterThanComparisonLabel: string = 'is greater than';\n\n    public static GreaterThanEqualsComparisonOperator: string = '>=';\n    public static GreaterThanEqualsComparisonLabel: string = 'is greater than equals to';\n\n    public static LessThanComparisonOperator: string = '<';\n    public static LessThanComparisonLabel: string = 'is less than';\n\n    public static LessThanEqualsComparisonOperator: string = '<=';\n    public static LessThanQualsComparisonLabel: string = 'is less than equals to';\n\n    public static ExistsComparisonOperator: string = 'E';\n    public static ExistsComparisonLabel: string = 'exists';\n\n    public static LikeComparisonOperator: string = 'regex';\n    public static LikeComparisonLabel: string = 'is like';\n\n    public static MatchComparisonOperator: string = 'contains';\n    public static MatchComparisonLabel: string = 'matches';\n\n    public static SalsahLink: string = 'salsah-link'; // class on an HTML <a> element that indicates a link to a Knora resource\n    public static RefMarker: string = 'ref-marker'; // class on an HTML element that refers to another element in the same document\n\n    public static GNDPrefix: string = '(DE-588)';\n    public static GNDResolver: string = 'http://d-nb.info/gnd/';\n\n    public static VIAFPrefix: string = '(VIAF)';\n    public static VIAFResolver: string = 'https://viaf.org/viaf/';\n\n}\n\n\nexport enum KnoraSchema {\n    complex = 0,\n    simple = 1\n}\n","/**\n * Collection of useful utility functions.\n */\nimport { KnoraConstants } from './api/knora-constants';\n\n// @dynamic\nexport class Utils {\n    /**\n     * A regex to validate Email address.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    /**\n     * A regex to validate Username.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUsername = /^[a-zA-Z0-9]+$/;\n\n    /**\n     * A regex to validate URLs.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUrl = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/i;\n\n    /**\n     * A regex to validate Passwords\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexPassword = /^(?=.*\\d)(?=.*[a-zA-Z]).{8,}$/i;\n\n    /**\n     * A regex to validate Hexadecimal values\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexHex = /^[0-9A-Fa-f]+$/;\n\n    /**\n     * A regex to validate shortname in projects\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexShortname = /^[a-zA-Z]+\\S*$/;\n\n\n    /**\n     * Lambda function eliminating duplicates in a collection to be passed to [[filter]].\n     *\n     * @param elem element of an Array that is currently being looked at.\n     * @param index current elements index.\n     * @param self reference to the whole Array.\n     * @returns {boolean} true if the same element does not already exist in the Array.\n     */\n    public static filterOutDuplicates = (elem, index: number, self) => {\n\n        // https://stackoverflow.com/questions/16747798/delete-duplicate-elements-from-an-array\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example\n\n        // returns true if the element's index equals the index of the leftmost element\n        // -> this means that there is no identical element before this index, hence it is not a duplicate\n        // for all other elements, false is returned\n        return index === self.indexOf(elem);\n\n    }\n\n    /**\n     * Given a Knora entity IRI, gets the ontology Iri.\n     *\n     * @param {string} entityIri an entity Iri.\n     * @return {string} the ontology IRI\n     */\n    public static getOntologyIriFromEntityIri(entityIri: string) {\n\n        // split class Iri on \"#\"\n        const segments: string[] = entityIri.split(KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${entityIri} is not a valid entity IRI.`);\n\n        return segments[0];\n\n    }\n\n    /**\n     * Converts a complex knora-api entity Iri to a knora-api simple entity Iri.\n     *\n     * @param {string} complexEntityIri\n     * @returns {string}\n     */\n    public static convertComplexKnoraApiEntityIritoSimple(complexEntityIri: string) {\n\n        // split entity Iri on \"#\"\n        const segments: string[] = complexEntityIri.split('v2' + KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${complexEntityIri} is not a valid entity IRI.`);\n\n        // add 'simple' to base path\n        return segments[0] + 'simple/v2' + KnoraConstants.PathSeparator + segments[1];\n\n    }\n\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('StringLiteral')\nexport class StringLiteral {\n\n    @JsonProperty('value', String, false)\n    public value: string = undefined;\n\n    @JsonProperty('language', String, true)\n    public language: string = '';\n}\n","/**\n * Precision for DateSalsah.\n */\nexport enum Precision {\n    yearPrecision,\n    monthPrecision,\n    dayPrecision\n}\n\n/**\n * Represents a Salsah date object with a precision information.\n */\nexport class DateSalsah {\n\n    private static separator = '-';\n\n    readonly precision: Precision;\n\n    constructor(\n        readonly calendar: string,\n        readonly era: string,\n        readonly year: number,\n        readonly month?: number,\n        readonly day?: number\n    ) {\n        if (this.month === undefined) {\n            // year precision\n            this.precision = Precision.yearPrecision;\n        } else if (this.day === undefined) {\n            // month precision\n            this.precision = Precision.monthPrecision;\n        } else {\n            // day precision\n            this.precision = Precision.dayPrecision;\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the date without the calendar.\n     *\n     * @returns {string}\n     */\n    getDateAsStringWithoutCalendar() {\n\n        let dateString = '(' + this.era + ') ';\n\n        switch (this.precision) {\n\n            case Precision.yearPrecision: {\n                dateString += this.year.toString();\n                break;\n            }\n\n            case Precision.monthPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month;\n                break;\n            }\n\n            case Precision.dayPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month + DateSalsah.separator + this.day;\n                break;\n            }\n\n            default: {\n                break;\n            }\n\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Returns a string representation of the date (with calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString(): string {\n\n        return this.calendar + ':' + this.getDateAsStringWithoutCalendar();\n    }\n\n}\n\n/**\n * Represents a period (with start date and end date).\n */\nexport class DateRangeSalsah {\n\n    constructor(\n        readonly start: DateSalsah,\n        readonly end: DateSalsah\n    ) {\n    }\n\n    /**\n     * Returns a string representation of the date range (with preceding calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString() {\n        return this.start.getDateAsString() + ':' + this.end.getDateAsStringWithoutCalendar();\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('AuthenticationResponse')\nexport class AuthenticationResponse {\n\n    @JsonProperty('token', String)\n    public token: string = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n\n@JsonObject('Project')\nexport class Project {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('shortname', String)\n    public shortname: string = undefined;\n\n    @JsonProperty('shortcode', String, true)\n    public shortcode: string = undefined;\n\n    @JsonProperty('longname', String, true)\n    public longname: string = undefined;\n\n    @JsonProperty('description', [StringLiteral], true)\n    public description: StringLiteral[] = [new StringLiteral()];\n\n    @JsonProperty('keywords', [String], true)\n    public keywords: string[] = undefined;\n\n    @JsonProperty('logo', String, true)\n    public logo: string = undefined;\n\n    @JsonProperty('institution', String, true)\n    public institution: string = undefined;\n\n    @JsonProperty('ontologies', [String])\n    public ontologies: string[] = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from '../projects/project';\n\n@JsonObject('Group')\nexport class Group {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('description', String)\n    public description: string = undefined;\n\n    @JsonProperty('project', Project, false)\n    public project: Project = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupResponse')\nexport class GroupResponse {\n\n    @JsonProperty('group', Group)\n    public group: Group = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupsResponse')\nexport class GroupsResponse {\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListInfo')\nexport class ListInfo {\n\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral], true)\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral], true)\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListNode')\nexport class ListNode {\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('hasRootNode', String, true)\n    public hasRootNode: string = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n\n    @JsonProperty('children', [ListNode], true)\n    public children: ListNode[] = undefined;\n\n    @JsonProperty('position', Number, true)\n    public position: number = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\nimport { ListNode } from './list-node';\n\n@JsonObject('List')\nexport class List {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n\n    @JsonProperty('children', [ListNode], false)\n    public children: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\n\n@JsonObject('ListInfoResponse')\nexport class ListInfoResponse {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n/**\n * @deprecated You should use ListNode instead\n */\n@JsonObject('ListNodeInfo')\nexport class ListNodeInfo {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n/**\n * @deprecated You should use ListNodeResponse instead\n */\n@JsonObject('ListNodeInfoResponse')\nexport class ListNodeInfoResponse {\n\n    @JsonProperty('nodeinfo', ListNode, false)\n    public nodeinfo: ListNode = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { List } from './list';\n\n@JsonObject('ListResponse')\nexport class ListResponse {\n\n    @JsonProperty('list', List, false)\n    public list: List = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n@JsonObject('ListNodeResponse')\nexport class ListNodeResponse {\n\n    @JsonProperty('nodeinfo', ListNode, false)\n    public nodeinfo: ListNode = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n@JsonObject('ListsResponse')\nexport class ListsResponse {\n\n    @JsonProperty('lists', [ListNode], false)\n    public lists: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('OntologyInfoShort')\nexport class OntologyInfoShort {\n\n    @JsonProperty('ontologyIri', String)\n    public ontologyIri: string = undefined;\n\n    @JsonProperty('ontologyName', String)\n    public ontologyName: string = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('PermissionData')\nexport class PermissionData {\n\n    @JsonProperty('groupsPerProject', Object)\n    public groupsPerProject: any = undefined;\n\n    @JsonProperty('administrativePermissionsPerProject', Object)\n    public administrativePermissionsPerProject: any = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from '../groups/group';\nimport { PermissionData } from '../permissions/permission-data';\nimport { Project } from '../projects/project';\n\n@JsonObject('User')\nexport class User {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('email', String)\n    public email: string = undefined;\n\n    @JsonProperty('username', String)\n    public username: string = undefined;\n\n    @JsonProperty('password', String, true)\n    public password: string = undefined;\n\n    @JsonProperty('token', String, true)\n    public token: string = undefined;\n\n    @JsonProperty('givenName', String)\n    public givenName: string = undefined;\n\n    @JsonProperty('familyName', String)\n    public familyName: string = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('lang', String)\n    public lang: string = undefined;\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n    @JsonProperty('sessionId', String, true)\n    public sessionId: string = undefined;\n\n    @JsonProperty('permissions', PermissionData)\n    public permissions: PermissionData = undefined;\n\n    @JsonProperty('systemAdmin', Boolean, true)\n    public systemAdmin?: boolean = false;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from '../users/user';\n\n@JsonObject('ProjectMembersResponse')\nexport class ProjectMembersResponse {\n    @JsonProperty('members', [User])\n    public members: User[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n\n@JsonObject('ProjectResponse')\nexport class ProjectResponse {\n\n    @JsonProperty('project', Project)\n    public project: Project = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n@JsonObject('ProjectsResponse')\nexport class ProjectsResponse {\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UsersResponse')\nexport class UsersResponse {\n\n    @JsonProperty('users', [User])\n    public users: User[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UserResponse')\nexport class UserResponse {\n\n    @JsonProperty('user', User)\n    public user: User = undefined;\n}\n","import { ReadResource } from '../resources/read-resource';\nimport { OntologyInformation } from '../../../../services';\nimport { KnoraConstants } from '../../knora-constants';\nimport { DateRangeSalsah, DateSalsah } from '../../shared/date';\n\n/**\n * An abstract interface representing any value object.\n */\nexport interface ReadPropertyItem {\n\n    /**\n     * The value object's Iri.\n     */\n    readonly id: string;\n\n    /**\n     * The value object's type.\n     */\n    readonly type: string;\n\n    /**\n     * The property pointing to the value object.\n     */\n    readonly propIri: string;\n\n    /**\n     * Gets the class name of the class that implements this interface.\n     *\n     * @returns {string}\n     */\n    getClassName(): string;\n\n    /**\n     * Gets the value as a string (complexity of the value possibly reduced).\n     *\n     * @returns {string}\n     */\n    getContent(): string;\n}\n\n/**\n * Abstract class representing a text value object with or without markup.\n */\nexport abstract class ReadTextValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string = KnoraConstants.TextValue;\n\n    abstract propIri: string;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a text value object without markup (mere character string).\n */\nexport class ReadTextValueAsString extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly str: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsString;\n    }\n\n    getContent() {\n        return this.str;\n    }\n}\n\n/**\n * Represents resources referred to by standoff links.\n */\nexport class ReferredResourcesByStandoffLink {\n    [index: string]: ReadResource;\n}\n\n/**\n * Represents a text value object with markup that has been turned into HTML.\n */\nexport class ReadTextValueAsHtml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly html: string, readonly referredResources: ReferredResourcesByStandoffLink) {\n        super();\n    }\n\n    /**\n     * Gets information about a resource referred to by a standoff link from a text value.\n     *\n     * @param {string} resourceIri the Iri of the referred resource.\n     * @param {OntologyInformation} ontologyInfo ontology information.\n     * @returns {string} information about the referred resource's class and its label.\n     */\n\n\n    getReferredResourceInfo(resourceIri: string, ontologyInfo: OntologyInformation) {\n        if (this.referredResources !== undefined && this.referredResources[resourceIri] !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResources[resourceIri].type);\n\n            return this.referredResources[resourceIri].label + ` (${resClassLabel})`;\n        } else {\n            return 'no information found about referred resource (target of standoff link)';\n        }\n    }\n\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsHtml;\n    }\n\n    getContent() {\n        return this.html;\n    }\n\n}\n\n/**\n * Represents a text value object with markup as XML.\n */\nexport class ReadTextValueAsXml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly xml: string, readonly mappingIri: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsXml;\n    }\n\n    getContent() {\n        return this.xml;\n    }\n\n}\n\n\n/**\n * Represents a date value object.\n */\nexport class ReadDateValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly calendar: string,\n        readonly startYear: number,\n        readonly endYear: number,\n        readonly startEra: string,\n        readonly endEra: string,\n        readonly startMonth?: number,\n        readonly endMonth?: number,\n        readonly startDay?: number,\n        readonly endDay?: number) {\n    }\n\n    readonly type = KnoraConstants.DateValue;\n\n    private separator = '/';\n\n    getDateSalsah(): DateSalsah | DateRangeSalsah {\n        if (this.startYear === this.endYear && this.startMonth === this.endMonth && this.startDay === this.endDay && this.startEra === this.endEra) {\n            // precise date\n            return new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay);\n        } else {\n            // date period\n            return new DateRangeSalsah(new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay), new DateSalsah(this.calendar, this.endEra, this.endYear, this.endMonth, this.endDay));\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadDateValue;\n    }\n\n    getContent() {\n        return this.getDateSalsah().getDateAsString();\n    }\n}\n\n/**\n * Represents a link value object (reification).\n */\nexport class ReadLinkValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly referredResourceIri: string, readonly referredResource?: ReadResource) {\n\n    }\n\n    readonly type = KnoraConstants.LinkValue;\n\n    getReferredResourceInfo(ontologyInfo: OntologyInformation) {\n        if (this.referredResource !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResource.type);\n\n            return this.referredResource.label + ` (${resClassLabel})`;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadLinkValue;\n    }\n\n    getContent() {\n        if (this.referredResource !== undefined) {\n            return this.referredResource.label;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n}\n\n/**\n * Represents an integer value object.\n */\nexport class ReadIntegerValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly integer: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntegerValue;\n    }\n\n    getContent() {\n        return this.integer.toString();\n    }\n\n}\n\n/**\n * Represents a decimal value object.\n */\nexport class ReadDecimalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly decimal: number) {\n\n    }\n\n    readonly type = KnoraConstants.DecimalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDecimalValue;\n    }\n\n    getContent() {\n        return this.decimal.toString();\n    }\n}\n\n/**\n * Represents a still image value object.\n */\nexport class ReadStillImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly imageFilename: string,\n        readonly imageServerIIIFBaseURL: string,\n        readonly imagePath: string,\n        readonly dimX: number,\n        readonly dimY: number) {\n\n        // if the image is a jpeg, it is a preview image\n        this.isPreview = imageFilename.endsWith('.jpg');\n\n    }\n\n    readonly type = KnoraConstants.StillImageFileValue;\n\n    readonly isPreview: boolean;\n\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.imagePath;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.imageServerIIIFBaseURL + '/' + this.imageFilename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadStillImageFileValue;\n    }\n\n    getContent() {\n        return this.imagePath;\n    }\n}\n\n/**\n * Represents a moving image value object.\n */\nexport class ReadMovingImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly filename: string,\n        readonly mediaServerIIIFBaseURL: string,\n        readonly path: string,\n        readonly dimX: number,\n        readonly dimY: number,\n        readonly duration: number,\n        readonly fps?: number,\n        readonly aspectRatio?: string) {\n\n    }\n\n    readonly type = KnoraConstants.MovingImageFileValue;\n\n    // preview doesn't include the video file itself\n    readonly isPreview: boolean;\n\n    /*\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.path;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.mediaServerIIIFBaseURL + '/' + this.filename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n    */\n\n    getClassName(): string {\n        return KnoraConstants.ReadMovingImageFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a text representation value object\n */\nexport class ReadTextFileValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly textFilename: string, readonly textFileURL: string) {\n\n    }\n\n    readonly type = KnoraConstants.TextFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextFileValue;\n    }\n\n    getContent() {\n        return this.textFileURL;\n    }\n\n}\n\n/**\n * Represents a color value object.\n */\nexport class ReadColorValue implements ReadPropertyItem {\n\n    constructor(readonly id: string,\n        readonly propIri,\n        readonly colorHex: string) {\n    }\n\n    readonly type = KnoraConstants.ColorValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadColorValue;\n    }\n\n    getContent() {\n        return this.colorHex;\n    }\n}\n\n/**\n * Represents a point in a 2D-coordinate system (for geometry values).\n */\nexport class Point2D {\n    constructor(public x: number, public y: number) {\n    }\n}\n\n/**\n * Represents a geometry value parsed from JSON.\n */\nexport class RegionGeometry {\n    constructor(public status: string,\n        public lineColor: string,\n        public lineWidth: number,\n        public points: Point2D[],\n        public type: string,\n        public radius?: Point2D\n    ) {\n    }\n}\n\n/**\n * Represents a geometry value object.\n */\nexport class ReadGeomValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly geometryString: string) {\n\n        const geometryJSON = JSON.parse(geometryString);\n\n        const points: Point2D[] = [];\n        for (const point of geometryJSON.points) {\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        let radius;\n        if (geometryJSON.radius) {\n            radius = new Point2D(geometryJSON.radius.x, geometryJSON.radius.y);\n        }\n\n        this.geometry = new RegionGeometry(\n            geometryJSON.status,\n            geometryJSON.lineColor,\n            geometryJSON.lineWidth,\n            points,\n            geometryJSON.type,\n            radius\n        );\n\n    }\n\n    readonly geometry: RegionGeometry;\n\n    readonly type = KnoraConstants.GeomValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadGeomValue;\n    }\n\n    getContent() {\n        return this.geometryString;\n    }\n}\n\n/**\n * Represents a URI value object.\n */\nexport class ReadUriValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly uri: string) {\n\n    }\n\n    readonly type = KnoraConstants.UriValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadUriValue;\n    }\n\n    getContent() {\n        return this.uri;\n    }\n\n}\n\n/**\n * Represents a Boolean value object.\n */\nexport class ReadBooleanValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly bool: boolean) {\n\n    }\n\n    readonly type = KnoraConstants.BooleanValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadBooleanValue;\n    }\n\n    getContent() {\n        return this.bool.toString();\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadIntervalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly intervalStart: number, readonly intervalEnd: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntervalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntervalValue;\n    }\n\n    getContent() {\n        return this.intervalStart.toString() + '-' + this.intervalEnd;\n    }\n\n}\n\n/**\n * Represents a list value object.\n */\nexport class ReadListValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly listNodeIri: string) {\n\n    }\n\n    readonly type = KnoraConstants.ListValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadListValue;\n    }\n\n    getContent() {\n        return this.listNodeIri;\n    }\n\n}\n","import { ReadProperties, StillImageRepresentation } from '../../../';\n\n/**\n * Represents a resource and its properties.\n */\nexport class ReadResource {\n\n    /**\n     *\n     * @param {string} id the resource's Iri.\n     * @param {string} type the resource's type (class).\n     * @param {string} label the resource's rdfs:label.\n     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).\n     * @param {ReadProperties} properties the resources's properties.\n     */\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        // TODO: we should use a more generic object here; or what's about incomingSequences?\n        public incomingRegions: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation\n        public incomingStillImageRepresentations: Array<ReadResource>,\n        public incomingLinks: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like media or fileRepresentation\n        public stillImageRepresentationsToDisplay: StillImageRepresentation[],\n        // TODO: the properties should be a list: Array<ReadProperties> or not?\n        public readonly properties?: ReadProperties) {\n    }\n\n}\n\n/**\n * This is a temporary class, to test a new resource setup.\n * When it works, we will merge it with the ReadResource object\n */\nexport class Resource {\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        public incomingAnnotations: Array<Resource>,\n        public incomingFileRepresentations: Array<Resource>,\n        public incomingLinks: Array<ReadResource>,\n        public fileRepresentationsToDisplay: Array<ReadResource>,\n        public readonly properties?: ReadProperties) {\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceError } from '../declarations/api-service-error';\nimport { ApiServiceResult } from '../declarations/api-service-result';\nimport { from } from 'rxjs';\nimport { KuiCoreConfigToken } from '../core.module';\nimport { KnoraConstants } from '../declarations/api/knora-constants';\n\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\nconst semver = require('semver');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport abstract class ApiService {\n\n    // if is loading, set it true;\n    // it can be used in components\n    // for progress loader element\n    loading = false;\n\n    protected constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config) {\n\n        // console.log('ApiService constructor: config', config);\n    }\n\n    /**\n     * GET\n     *\n     * @param {string} path the URL for the GET request.\n     * @param {HttpParams} params the parameters for the GET request.\n     * @returns Observable of any\n     */\n    httpGet(path: string, params?: HttpParams): Observable<any> {\n\n        this.loading = true;\n\n        return this.http.get(this.config.api + path, { observe: 'response', params: params }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(response.headers.get('Server'));\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * Processes JSON-LD returned by Knora.\n     * Expands Iris and creates an empty context object.\n     *\n     * @param {ApiServiceResult} resourceResponse\n     */\n    protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n        const resPromises = jsonld.promises;\n        // compact JSON-LD using an empty context: expands all Iris\n        const resPromise = resPromises.compact(resourceResponse.body, {});\n\n        // convert promise to Observable and return it\n        // https://www.learnrxjs.io/operators/creation/frompromise.html\n        return from(resPromise);\n\n    }\n\n    /**\n     * POST\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPost(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.post(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * PUT\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPut(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.put(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n    /**\n     * DELETE\n     *\n     * @param {string} path\n     * @returns Observable of any\n     */\n    httpDelete(path: string): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.delete(this.config.api + path, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param {HttpErrorResponse} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        // console.error(error);\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n\n    /**\n     * handle json error in case of type error in json response (json2typescript)\n     *\n     * @param {any} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n        if (error instanceof ApiServiceError) return throwError(error);\n\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = -1;\n        serviceError.statusText = 'Invalid JSON';\n        serviceError.errorInfo = error;\n        serviceError.url = '';\n        return throwError(serviceError);\n\n    }\n\n    protected compareVersion(server: string): void {\n\n        // expected knora api version\n        const expected: string = KnoraConstants.KnoraVersion;\n\n        // existing knora api version\n        if (server) {\n            const versions: string[] = server.split(' ');\n            const existing: string = versions[0].split('/')[1];\n\n            // compare the two versions: expected vs existing\n            if (semver.diff(existing, expected) === 'major') {\n                console.warn('The version of the @knora/core module works with Knora v' + expected + ', but you are using it with Knora v' + existing);\n            }\n        } else {\n            // console.warn('No server information from headers response');\n        }\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { NewOntology } from '../../declarations/api/v2/ontology/new-ontology';\nimport { ApiService } from '../api.service';\nimport { NewResourceClass } from '../../declarations/api/v2/ontology/new-resource-class';\nimport { NewProperty } from '../../declarations/api/v2/ontology/new-property';\n\n/**\n * Requests ontology information from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------\n\n    /**\n     * DEPRECATED: You should use getAllOntologies()\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getOntologiesMetadata(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getAllOntologies(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the ontologies of a specific project\n     *\n     * @param projectIri\n     * @returns Observable<ApiServiceResult> - the metadata of project ontologies.\n     */\n    getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // GET ontology\n    // ------------------------------------------------------------------------\n\n    /**\n     * Requests all entity definitions for the given ontologies from Knora's ontologies route.\n     *\n     * @param {string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.\n     * @returns Observable<ApiServiceResult> - the requested ontology.\n     */\n    getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n    }\n\n    /**\n     * Requests information about the given resource classes from Knora's ontologies route.\n     *\n     * @param {string[]} resourceClassIris the Iris of the resource classes to be queried.\n     * @returns Observable<ApiServiceResult> - the requested resource class definitions.\n     */\n    getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n        if (resourceClassIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n        }\n\n        let resClassUriEnc = '';\n\n        resourceClassIris.forEach(function (resClassIri) {\n            resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n    }\n\n    /**\n     * Requests properties from Knora's ontologies route.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be queried.\n     * @returns Observable<ApiServiceResult> - the requested properties.\n     */\n    getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n        if (propertyIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n        }\n\n        let propertiesUriEnc = '';\n\n        propertyIris.forEach(function (resClassIri) {\n            propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new ontology.\n     *\n     * @param {NewOntology} data Data contains: projectIri, name, label\n     * @returns Observable<ApiServiceResult> incl. ontolog iri and knora-api:lastModificationDate\n     */\n    createOntology(data: NewOntology): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies';\n\n        const ontology = {\n            'knora-api:ontologyName': data.name,\n            'knora-api:attachedToProject': {\n                '@id': data.projectIri,\n            },\n            'rdfs:label': data.label,\n            '@context': {\n                'rdfs': KnoraConstants.RdfsSchema,\n                'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n            }\n        };\n\n        return this.httpPost(path, ontology).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    createResourceClass(data: NewResourceClass): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/classes';\n\n        // TODO: add the following values to parameter\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        const resourceClass = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [{\n                '@id': onto_name + ':' + data.name,\n                '@type': 'owl:Class',\n                'rdfs:label': data.labels,\n                'rdfs:comment': data.comments,\n                'rdfs:subClassOf': {\n                    '@id': data.subClassOf\n                }\n            }],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n\n        };\n\n        return this.httpPost(path, resourceClass).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    createProperty(data: NewProperty[]): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/properties';\n\n        // TODO: add the following values to parameter\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        const graph = [];\n\n        for (const prop of data) {\n            const prop_obj = {\n                '@id': onto_name + ':' + prop.name,\n                '@type': 'owl:ObjectProperty',\n                'rdfs:label': prop.labels,\n                'rdfs:comment': prop.comments,\n                'rdfs:subPropertyOf': prop.subPropertyOf,\n                'salsah-gui:guiElement': {\n                    '@id': prop.guiElement\n                }\n            };\n            graph.push(prop_obj);\n        }\n\n        const property = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [\n                graph\n            ],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'salsah-gui': 'http://api.knora.org/ontology/salsah-gui/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n        };\n\n\n        return this.httpPost(path, property).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    setCardinality(data: any): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/cardinalities';\n\n        // TODO: add the following values to parameter\n        let class_iri: string;\n        let prop_iri: string;\n\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        // TODO: find a way with typescript for the following python construct\n        /*\n        let switcher = {\n            '1': ('owl:cardinality', 1),\n            '0-1': ('owl:maxCardinality', 1),\n            '0-n': ('owl:minCardinality', 0),\n            '1-n': ('owl:minCardinality', 1)\n        };\n\n        let occurrence: any = switcher.get(data.occurrence);\n        */\n\n        const cardinality = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [{\n                '@id': class_iri,\n                '@type': 'owl:Class',\n                'rdfs:subClassOf': {\n                    '@type': 'owl:Restriction',\n                    // occurrence[0]: occurrence[1],\n                    'owl:onProperty': {\n                        '@id': prop_iri\n                    }\n                }\n            }],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n        };\n\n        return this.httpPost(path, cardinality).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { Utils } from '../../declarations/utils';\nimport { OntologyService } from './ontology.service';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n/**\n * Represents an error occurred in OntologyCacheService.\n */\nclass OntologyCacheError extends Error {\n\n    constructor(readonly message: string) {\n        super(message);\n    }\n}\n\n\n/**\n * Represents an ontology's metadata.\n */\nexport class OntologyMetadata {\n\n    /**\n     * @hideconstructor\n     *\n     * @param {string} id Iri identifying the ontology.\n     * @param {string} label a label describing the ontology.\n     */\n    constructor(readonly id: string,\n        readonly label: string) {\n\n    }\n\n}\n\n\n/**\n * Occurrence of a property for a resource class (its cardinality).\n */\nexport enum CardinalityOccurrence {\n    minCard = 0,\n    card = 1,\n    maxCard = 2\n}\n\n\n/**\n * Cardinality of a property for the given resource class.\n */\nexport class Cardinality {\n\n    /**\n     * @param {CardinalityOccurrence} occurrence type of given occurrence.\n     * @param {number} value numerical value of given occurrence.\n     * @param {string} property the property the given occurrence applies to.\n     */\n    constructor(readonly occurrence: CardinalityOccurrence,\n        readonly value: number,\n        readonly property: string) {\n    }\n}\n/**\n * Property gui order\n */\nexport class GuiOrder {\n    /**\n     * @param  {number} value\n     * @param  {string} property\n     */\n    constructor(readonly value: number,\n        readonly property: string\n    ) {\n\n    }\n}\n\n/**\n * A resource class definition.\n */\nexport class ResourceClass {\n\n    /**\n     * @param {string} id Iri identifying the resource class.\n     * @param {string} icon path to an icon representing the resource class.\n     * @param {string} comment comment on the resource class.\n     * @param {string} label label describing the resource class.\n     * @param {Cardinality[]} cardinalities the resource class's properties.\n     * @param {GuiOrder[]} guiOrder the resource class's gui-order properties.\n     */\n    constructor(readonly id: string,\n        readonly icon: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly cardinalities: Array<Cardinality>,\n        readonly guiOrder: Array<GuiOrder>) {\n\n    }\n}\n\n\n/**\n * A map of resource class Iris to resource class definitions.\n */\nexport class ResourceClasses {\n    [index: string]: ResourceClass;\n}\n\n\n/**\n * A property definition.\n */\nexport class Property {\n\n    /**\n     * @param {string} id Iri identifying the property definition.\n     * @param {string} objectType the property's object constraint.\n     * @param {string} comment comment on the property definition.\n     * @param {string} label label describing the property definition.\n     * @param {string[]} subPropertyOf Iris of properties the given property is a subproperty of.\n     * @param {boolean} isEditable indicates whether the given property can be edited by the client.\n     * @param {boolean} isLinkProperty indicates whether the given property is a linking property.\n     * @param {boolean} isLinkValueProperty indicates whether the given property refers to a link value.\n     * @param {string} guiAttribute the gui attribute assigned to this property, if any.\n     */\n    constructor(readonly id: string,\n                readonly objectType: string,\n                readonly comment: string,\n                readonly label: string,\n                readonly subPropertyOf: Array<string>,\n                readonly isEditable: Boolean,\n                readonly isLinkProperty: Boolean,\n                readonly isLinkValueProperty: Boolean,\n                readonly guiAttribute: string[]) {\n    }\n}\n\n\n/**\n * A map of property Iris to property definitions.\n */\nexport class Properties {\n    [index: string]: Property;\n}\n\n\n/**\n * Groups resource classes by the ontology they are defined in.\n *\n * A map of ontology Iris to an array of resource class Iris.\n */\nexport class ResourceClassIrisForOntology {\n    [index: string]: Array<string>;\n}\n\n\n/**\n * Represents cached ontology information (only used by this service internally).\n * This cache is updated whenever new definitions are requested from Knora.\n *\n * Requested ontology information by a service is represented by [[OntologyInformation]].\n */\nclass OntologyCache {\n\n    /**\n     * @param {OntologyMetadata[]} ontologies An array of all existing ontologies.\n     */\n    ontologies: Array<OntologyMetadata>;\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassIrisForOntology list of all resource class Iris for a named graph.\n     */\n    resourceClassIrisForOntology: ResourceClassIrisForOntology;\n\n    /**\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     */\n    resourceClasses: ResourceClasses;\n\n    /**\n     * @param {Properties} properties property definitions.\n     */\n    properties: Properties;\n\n    constructor() {\n        this.ontologies = [];\n\n        this.resourceClassIrisForOntology = new ResourceClassIrisForOntology();\n\n        this.resourceClasses = new ResourceClasses();\n\n        this.properties = new Properties();\n    }\n}\n\n/**\n * Represents ontology information requested from this service.\n *\n * For every request, an instance of this class is returned containing the requested information.\n */\nexport class OntologyInformation {\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassesForOntology all resource class Iris for a given ontology.\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     * @param {Properties} properties property definitions.\n     */\n    constructor(\n        private resourceClassesForOntology: ResourceClassIrisForOntology,\n        private resourceClasses: ResourceClasses,\n        private properties: Properties) {\n    }\n\n    /**\n     * Sorts an array of `ResourceClass` or `Property` by label.\n     *\n     * @param a first element\n     * @param b second element\n     * @return negative -1 if the first element is considered lower than the second, 1 if the second element is considered bigger, 0 if they are equal\n     */\n    static sortFunc(a: ResourceClass | Property, b: ResourceClass | Property) {\n        // dealing with 'undefined' labels\n        if (a.label === undefined) {\n            return 1;\n        } else if (b.label === undefined) {\n            return -1;\n        }\n\n        const labelA = a.label.toLowerCase();\n        const labelB = b.label.toLowerCase();\n\n        if (labelA < labelB) {\n            return -1;\n        } else if (labelA > labelB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Merge the given [[OntologyInformation]] into the current instance,\n     * updating the existing information.\n     * This is necessary when a service like the search fetches new results\n     * that have to be added to an existing collection.\n     * The existing ontology information must not be lost.\n     *\n     * @param {OntologyInformation} ontologyInfo the given definitions that have to be integrated.\n     * @returns void\n     */\n    updateOntologyInformation(ontologyInfo: OntologyInformation): void {\n\n        // get new resourceClassIrisForOntology\n        const newResourceClassesForOntology: ResourceClassIrisForOntology = ontologyInfo.getResourceClassForOntology();\n\n        // update new resourceClassIrisForOntology\n        // tslint:disable-next-line:forin\n        for (const newResClassForOntology in newResourceClassesForOntology) {\n            this.resourceClassesForOntology[newResClassForOntology] = newResourceClassesForOntology[newResClassForOntology];\n        }\n\n        // get new resource class definitions\n        const newResourceClasses = ontologyInfo.getResourceClasses();\n\n        // update resourceClasses\n        // tslint:disable-next-line:forin\n        for (const newResClass in newResourceClasses) {\n            this.resourceClasses[newResClass] = newResourceClasses[newResClass];\n        }\n\n        // get new property definitions\n        const newProperties = ontologyInfo.getProperties();\n\n        // update properties\n        // tslint:disable-next-line:forin\n        for (const newProp in newProperties) {\n            this.properties[newProp] = newProperties[newProp];\n        }\n\n    }\n\n    /**\n     * Returns resource class definitions for ontologies.\n     *\n     * @returns ResourceClassIrisForOntology - all resource class definitions grouped by ontologies.\n     */\n    getResourceClassForOntology(): ResourceClassIrisForOntology {\n        return this.resourceClassesForOntology;\n    }\n\n    /**\n     * Returns all resource classes as an object.\n     *\n     * @returns ResourceClasses - all resource class definitions as an object.\n     */\n    getResourceClasses(): ResourceClasses {\n        return this.resourceClasses;\n    }\n\n    /**\n     * Returns all resource classes as an array.\n     *\n     * @param {boolean} sortAsc sort resource classes by label in ascending order by default\n     * @returns ResourceClass[]\n     */\n    getResourceClassesAsArray(sortAsc: boolean = true): Array<ResourceClass> {\n\n        const resClasses: Array<ResourceClass> = [];\n\n        // tslint:disable-next-line:forin\n        for (const resClassIri in this.resourceClasses) {\n            const resClass: ResourceClass = this.resourceClasses[resClassIri];\n            resClasses.push(resClass);\n        }\n\n        // resourceClasses order by label in ascending order\n        resClasses.sort(OntologyInformation.sortFunc);\n\n        // resourceClasses order by label in descending order\n        if (!sortAsc) {\n            resClasses.reverse();\n        }\n\n        return resClasses;\n\n    }\n\n    /**\n     * Returns a resource class's label.\n     *\n     * @param {string} resClass resource class to query for.\n     * @returns string - the resource class's label.\n     */\n    getLabelForResourceClass(resClass: string): string {\n\n        if (resClass !== undefined) {\n\n            const resClassDef: ResourceClass = this.resourceClasses[resClass];\n\n            if (resClassDef !== undefined && resClassDef.label !== undefined) {\n                return resClassDef.label;\n            } else {\n                console.log(`cannot get label for ${resClass}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForResourceClass without argument resClass');\n        }\n    }\n\n    /**\n     * Returns all properties as an object.\n     *\n     * @returns Properties - all properties as an object.\n     */\n    getProperties(): Properties {\n        return this.properties;\n    }\n\n    /**\n     * Returns all properties as an array.\n     *\n     * @param {boolean} sortAsc sort properties by label in ascending order by default\n     * @returns Property[] - all properties as an array.\n     */\n    getPropertiesAsArray(sortAsc: boolean = true): Array<Property> {\n\n        const properties: Array<Property> = [];\n\n        // tslint:disable-next-line:forin\n        for (const propIri in this.properties) {\n            const prop: Property = this.properties[propIri];\n            properties.push(prop);\n        }\n\n        // properties order by label in ascending order\n        properties.sort(OntologyInformation.sortFunc);\n\n        // properties order by label in descending order\n        if (!sortAsc) {\n            properties.reverse();\n        }\n\n        return properties;\n\n    }\n\n    /**\n     * Returns a property's label.\n     *\n     * @param {string} property to query for.\n     * @returns string - the property's label.\n     */\n    getLabelForProperty(property: string): string {\n\n        if (property !== undefined) {\n\n            const propDef: Property = this.properties[property];\n\n            if (propDef !== undefined && propDef.label !== undefined) {\n                return propDef.label;\n            } else {\n                console.log(`cannot get label for ${property}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForProperty without argument property');\n        }\n    }\n\n}\n\n\n/**\n * Requests ontology information from Knora and caches it.\n * Other components or services obtain ontology information through this service.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class OntologyCacheService {\n\n    /**\n     * Ontologies ingored by this service.\n     * @param {string[]} excludedOntologies\n     */\n    private excludedOntologies: Array<string> = [KnoraConstants.SalsahGuiOntology, KnoraConstants.StandoffOntology];\n\n    /**\n     * @param {string[]} excludedProperties properties that Knora is not responsible for and that have to be ignored because they cannot be resolved at the moment.\n     */\n    private excludedProperties: Array<string> = [KnoraConstants.RdfsLabel];\n\n    /**\n     * @param {string[]} nonResourceClasses class definitions that are not be treated as Knora resource classes\n     */\n    private nonResourceClasses: Array<string> = [KnoraConstants.ForbiddenResource, KnoraConstants.XMLToStandoffMapping, KnoraConstants.ListNode];\n\n    /**\n     * @param {OntologyCache} cacheOntology central instance that caches all definitions\n     */\n    private cacheOntology: OntologyCache = new OntologyCache();\n\n    constructor(private _ontologyService: OntologyService) {\n    }\n\n    /**\n     * Requests the metadata of all ontologies from Knora.\n     *\n     * @returns Observable<object> - metadata for all ontologies as JSON-LD (no prefixes, all Iris fully expanded).\n     */\n    private getOntologiesMetadataFromKnora(): Observable<object> {\n\n        return this._ontologyService.getOntologiesMetadata().pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Requests all entity definitions (resource classes and properties) for the given ontology from Knora.\n     *\n     * @param {string} ontologyIri the Iri of the requested ontology.\n     * @returns Observable<object> - metadata for all entity definitions for ontology from Knora.\n     */\n    private getAllEntityDefinitionsForOntologyFromKnora(ontologyIri: string): Observable<object> {\n\n        return this._ontologyService.getAllEntityDefinitionsForOntologies(ontologyIri).pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Writes all the ontologies' metadata returned by Knora to the cache.\n     *\n     * @param {object[]} ontologies metadata of all existing ontologies as JSON-LD.\n     * @returns a new OntologyMetadata object\n     */\n    private convertAndWriteOntologiesMetadataToCache(ontologies: object[]) {\n\n        this.cacheOntology.ontologies = ontologies.map(\n            ontology => {\n                return new OntologyMetadata(ontology['@id'], ontology[KnoraConstants.RdfsLabel]);\n            }\n        );\n    }\n\n    /**\n     * Returns all ontologies' metadata from the cache and returns them.\n     *\n     * @returns Array<OntologyMetadata> - metadata of all existing ontologies.\n     */\n    private getAllOntologiesMetadataFromCache(): Array<OntologyMetadata> {\n\n        return this.cacheOntology.ontologies;\n\n    }\n\n    /**\n     * Returns resource class Iris from the ontology response.\n     * `knora-api:Resource` will be excluded.\n     *\n     * @param {Array<object>} classDefinitions the class definitions in an ontology response.\n     * @returns string[] - resource class Iris from the given class definitions.\n     */\n    private getResourceClassIrisFromOntologyResponse(classDefinitions: Array<object>): string[] {\n        const resourceClassIris: string[] = [];\n\n        for (const classDef of classDefinitions) {\n            const classIri = classDef['@id'];\n\n            // check that class name is not listed as a non resource class and that the isResourceClass flag is present and set to true\n            if (\n                classIri !== KnoraConstants.Resource && this.nonResourceClasses.indexOf(classIri)\n                === -1 && (classDef[KnoraConstants.IsResourceClass] !== undefined && classDef[KnoraConstants.IsResourceClass] === true)) {\n                // it is not a value class, but a resource class definition\n                resourceClassIris.push(classIri);\n            }\n        }\n\n        return resourceClassIris;\n    }\n\n    /**\n     * Converts a Knora response for all entity definitions for the requested ontology\n     * into an internal representation and caches it.\n     *\n     * Knora automatically includes the property definitions referred to in the cardinalities of resource classes.\n     * If they are defined in another ontology, that ontology is requested from Knora too.\n     *\n     * @param {Object} ontology the ontology to be cached.\n     * @returns void\n     */\n    private convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology: object): void {\n\n        const graph = ontology['@graph'];\n\n        // get all class definitions\n        const classDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlClass;\n            });\n\n        // get all property definitions\n        const propertyDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlObjectProperty ||\n                    entityType === KnoraConstants.OwlDatatypeProperty ||\n                    entityType === KnoraConstants.OwlAnnotationProperty ||\n                    entityType === KnoraConstants.RdfProperty;\n            });\n\n\n        // cache all resource class Iris belonging to the current ontology\n        this.cacheOntology.resourceClassIrisForOntology[ontology['@id']] = this.getResourceClassIrisFromOntologyResponse(classDefs);\n\n        // write class and property defintions to cache\n        this.convertAndWriteEntityDefinitionsToCache(classDefs, propertyDefs);\n\n    }\n\n    /**\n     * Returns definitions for the requested ontologies from the cache.\n     *\n     * @param {string[]} ontologyIris the ontologies for which definitions should be returned.\n     * @returns Observable<OntologyInformation> - the definitions for the requested ontologies.\n     */\n    private getOntologyInformationFromCache(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const resourceClassesForOntology = new ResourceClassIrisForOntology();\n\n        // collect resource class Iris for all requested named graphs\n        let allResourceClassIris = [];\n\n        for (const ontologyIri of ontologyIris) {\n\n            if (this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined) {\n                throw new OntologyCacheError(`getResourceClassesForOntologiesFromCache: ontology not found in cache: ${ontologyIri}`);\n            }\n\n            // add information for the given ontology\n            resourceClassesForOntology[ontologyIri] = this.cacheOntology.resourceClassIrisForOntology[ontologyIri];\n\n            // add all resource class Iris of this ontology\n            allResourceClassIris = allResourceClassIris.concat(this.cacheOntology.resourceClassIrisForOntology[ontologyIri]);\n        }\n\n        // get resource class definitions for all requested ontologies\n        return this.getResourceClassDefinitions(allResourceClassIris).pipe(\n            map(\n                resClassDefs => {\n                    return new OntologyInformation(\n                        resourceClassesForOntology, resClassDefs.getResourceClasses(), resClassDefs.getProperties()\n                    );\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora ontology response into an internal representation and caches it.\n     *\n     * @param {object[]} resourceClassDefinitions the resource class definitions returned by Knora.\n     * @param {object[]} propertyClassDefinitions the property definitions returned by Knora.\n     * @returns void\n     */\n    private convertAndWriteEntityDefinitionsToCache(resourceClassDefinitions: Array<object>, propertyClassDefinitions: Array<object>): void {\n\n        // convert and cache each given resource class definition\n        for (const resClass of resourceClassDefinitions) {\n\n            const resClassIri = resClass['@id'];\n\n            // represents all cardinalities of this resource class\n            const cardinalities: Cardinality[] = [];\n            const guiOrder: GuiOrder[] = [];\n\n            if (resClass[KnoraConstants.RdfsSubclassOf] !== undefined) {\n\n                let subclassOfCollection;\n\n                // check if it is a single object or a collection\n                if (!Array.isArray(resClass[KnoraConstants.RdfsSubclassOf])) {\n                    subclassOfCollection = [resClass[KnoraConstants.RdfsSubclassOf]];\n                } else {\n                    subclassOfCollection = resClass[KnoraConstants.RdfsSubclassOf];\n                }\n\n\n\n                // get cardinalities for the properties of a resource class\n                for (const curCard of subclassOfCollection) {\n\n\n\n                    // make sure it is a cardinality (it could also be an Iri of a superclass)\n                    if (curCard instanceof Object && curCard['@type'] !== undefined && curCard['@type'] === KnoraConstants.OwlRestriction) {\n\n                        let newCard;\n\n                        // get occurrence\n                        if (curCard[KnoraConstants.OwlMinCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.minCard, curCard[KnoraConstants.OwlMinCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.card, curCard[KnoraConstants.OwlCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlMaxCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.maxCard, curCard[KnoraConstants.OwlMaxCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else {\n                            // no known occurrence found\n                            throw new TypeError(`cardinality type invalid for ${resClass['@id']} ${curCard[KnoraConstants.OwlOnProperty]}`);\n                        }\n\n                        // add cardinality\n                        cardinalities.push(newCard);\n\n                        // get gui order\n                        let newGuiOrder;\n                        if (curCard[KnoraConstants.SalsahGuiOrder] !== undefined) {\n                            newGuiOrder = new GuiOrder(curCard[KnoraConstants.SalsahGuiOrder], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                            // add gui order\n                            guiOrder.push(newGuiOrder);\n                        }\n\n\n\n                    }\n\n                }\n            }\n\n            const resClassObj = new ResourceClass(\n                resClassIri,\n                resClass[KnoraConstants.ResourceIcon],\n                resClass[KnoraConstants.RdfsComment],\n                resClass[KnoraConstants.RdfsLabel],\n                cardinalities,\n                guiOrder\n            );\n\n            // write this resource class definition to the cache object\n            this.cacheOntology.resourceClasses[resClassIri] = resClassObj;\n        }\n\n        // cache the property definitions\n        this.convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyClassDefinitions);\n    }\n\n    /**\n     * Gets information about resource classes from the cache.\n     * The answer includes the property definitions referred to by the cardinalities of the given resource classes.\n     *\n     * @param {string[]} resClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - an [[OntologyCache]] representing the requested resource classes.\n     */\n    private getResourceClassDefinitionsFromCache(resClassIris: string[]): Observable<OntologyInformation> {\n        // collect the definitions for each resource class from the cache\n\n        const resClassDefs = new ResourceClasses();\n\n        // collect the properties from the cardinalities of the given resource classes\n        const propertyIris = [];\n\n        resClassIris.forEach(\n            resClassIri => {\n                resClassDefs[resClassIri] = this.cacheOntology.resourceClasses[resClassIri];\n\n                this.cacheOntology.resourceClasses[resClassIri].cardinalities.forEach(\n                    card => {\n                        // get property definition for each cardinality\n                        propertyIris.push(card.property);\n                    }\n                );\n            });\n\n        return this.getPropertyDefinitions(propertyIris).pipe(\n            map(\n                propDefs => {\n                    return new OntologyInformation(new ResourceClassIrisForOntology(), resClassDefs, propDefs.getProperties());\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora response for ontology information about properties\n     * into an internal representation and cache it.\n     *\n     * @param {object[]} propertyDefinitionsFromKnora the property definitions returned by Knora\n     * @returns void\n     */\n    private convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyDefinitionsFromKnora: Array<object>): void {\n\n        // convert and cache each given property definition\n        for (const propDef of propertyDefinitionsFromKnora) {\n\n            const propIri = propDef['@id'];\n\n            let isEditable = false;\n            if (propDef[KnoraConstants.isEditable] !== undefined && propDef[KnoraConstants.isEditable] === true) {\n                isEditable = true;\n            }\n\n            let isLinkProperty = false;\n            if (propDef[KnoraConstants.isLinkProperty] !== undefined && propDef[KnoraConstants.isLinkProperty] === true) {\n                isLinkProperty = true;\n            }\n\n            let isLinkValueProperty = false;\n            if (propDef[KnoraConstants.isLinkValueProperty] !== undefined && propDef[KnoraConstants.isLinkValueProperty] === true) {\n                isLinkValueProperty = true;\n            }\n\n            let subPropertyOf = [];\n            if (propDef[KnoraConstants.subPropertyOf] !== undefined && Array.isArray(propDef[KnoraConstants.subPropertyOf])) {\n                subPropertyOf = propDef[KnoraConstants.subPropertyOf].map((superProp: Object) => superProp['@id']);\n            } else if (propDef[KnoraConstants.subPropertyOf] !== undefined) {\n                subPropertyOf.push(propDef[KnoraConstants.subPropertyOf]['@id']);\n            }\n\n            let objectType;\n            if (propDef[KnoraConstants.ObjectType] !== undefined) {\n                objectType = propDef[KnoraConstants.ObjectType]['@id'];\n            }\n\n            const guiAttribute = [];\n            if (propDef[KnoraConstants.SalsahGuiAttribute] !== undefined) {\n                if (Array.isArray(propDef[KnoraConstants.SalsahGuiAttribute])) {\n                    for (const attr of propDef[KnoraConstants.SalsahGuiAttribute]) {\n                        guiAttribute.push(attr);\n                    }\n                } else {\n                    guiAttribute.push(propDef[KnoraConstants.SalsahGuiAttribute]);\n                }\n            }\n\n            // cache property definition\n            this.cacheOntology.properties[propIri] = new Property(\n                propIri,\n                objectType,\n                propDef[KnoraConstants.RdfsComment],\n                propDef[KnoraConstants.RdfsLabel],\n                subPropertyOf,\n                isEditable,\n                isLinkProperty,\n                isLinkValueProperty,\n                guiAttribute\n            );\n\n        }\n\n    }\n\n    /**\n     * Returns property definitions from the cache.\n     *\n     * @param {string[]} propertyIris the property definitions to be returned.\n     * @returns OntologyInformation - requested property defintions.\n     */\n    private getPropertyDefinitionsFromCache(propertyIris: string[]): OntologyInformation {\n\n        const propertyDefs = new Properties();\n\n        propertyIris.forEach(\n            propIri => {\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return;\n                }\n\n                if (this.cacheOntology.properties[propIri] === undefined) {\n                    throw new OntologyCacheError(`getPropertyDefinitionsFromCache: property not found in cache: ${propIri}`);\n                }\n\n                propertyDefs[propIri] = this.cacheOntology.properties[propIri];\n            }\n        );\n\n        return new OntologyInformation(new ResourceClassIrisForOntology(), new ResourceClasses(), propertyDefs);\n\n    }\n\n    /**\n     * Returns metadata about all ontologies.\n     *\n     * @returns Observable<Array<OntologyMetadata>> - metadata about all ontologies.\n     */\n    public getOntologiesMetadata(): Observable<Array<OntologyMetadata>> {\n\n        if (this.cacheOntology.ontologies.length === 0) {\n            // nothing in cache yet, get metadata from Knora\n            return this.getOntologiesMetadataFromKnora().pipe(\n                map(\n                    metadata => {\n                        this.convertAndWriteOntologiesMetadataToCache(metadata['@graph'].filter((onto) => {\n                            // ignore excluded ontologies\n                            return this.excludedOntologies.indexOf(onto['@id']) === -1;\n                        }));\n                        return this.getAllOntologiesMetadataFromCache();\n                    }\n                )\n            );\n        } else {\n            // return metadata from cache\n            return of(this.getAllOntologiesMetadataFromCache());\n        }\n\n    }\n\n\n    /**\n     * Requests the requested ontologies from Knora, adding them to the cache.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be requested.\n     * @returns Observable<any[]>\n     */\n    private getAndCacheOntologies(ontologyIris: string[]): Observable<any[]> {\n\n        // array to be populated with Observables\n        const observables = [];\n\n        // do a request for each ontology\n        ontologyIris.forEach(ontologyIri => {\n            // push an Observable onto `observables`\n            observables.push(this.getAllEntityDefinitionsForOntologyFromKnora(ontologyIri).pipe(\n                map(\n                    (ontology: object) => {\n                        // write response to cache\n                        this.convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology);\n                    }\n                )\n            ));\n        });\n\n        // forkJoin returns an Observable of an array of results\n        // returned by each Observable contained in `observables`\n        // a subscription to the Observable returned by forkJoin is executed\n        // once all Observables have been completed\n        return forkJoin(observables);\n    }\n\n\n    /**\n     * Returns the entity definitions for the requested ontologies.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be queried.\n     * @returns Observable<OntologyInformation> - all ontology metadata from the cache\n     */\n    public getEntityDefinitionsForOntologies(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const ontologyIrisToQuery = ontologyIris.filter(\n            ontologyIri => {\n                // return the ontology Iris that are not cached yet\n                return this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined;\n            });\n\n        // get ontologies that are mot cached yet\n        if (ontologyIrisToQuery.length > 0) {\n\n            return this.getAndCacheOntologies(ontologyIrisToQuery).pipe(\n                mergeMap(\n                    () => {\n                        // executed once all ontologies have been cached\n                        return this.getOntologyInformationFromCache(ontologyIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getOntologyInformationFromCache(ontologyIris);\n        }\n\n    }\n\n    /**\n     * Returns the definitions for the given resource class Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * Properties contained in the cardinalities will be returned too.\n     *\n     * @param {string[]} resourceClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - the requested resource classes (including properties).\n     */\n    public getResourceClassDefinitions(resourceClassIris: string[]): Observable<OntologyInformation> {\n\n        const resClassIrisToQueryFor: string[] = resourceClassIris.filter(\n            resClassIri => {\n\n                // return the resource class Iris that are not cached yet\n                return this.cacheOntology.resourceClasses[resClassIri] === undefined;\n\n            });\n\n        if (resClassIrisToQueryFor.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing resource classes\n            const ontologyIris: string[] = resClassIrisToQueryFor.map(\n                resClassIri => {\n                    return Utils.getOntologyIriFromEntityIri(resClassIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                mergeMap(\n                    () => {\n\n                        return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n\n        }\n    }\n\n    /**\n     * Get definitions for the given property Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be returned .\n     * @returns Observable<OntologyInformation> - the requested property definitions.\n     */\n    public getPropertyDefinitions(propertyIris: string[]): Observable<OntologyInformation> {\n\n        const propertiesToQuery: string[] = propertyIris.filter(\n            propIri => {\n\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return false;\n                }\n\n                // return the property Iris that are not cached yet\n                return this.cacheOntology.properties[propIri] === undefined;\n            }\n        );\n\n        if (propertiesToQuery.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing properties\n            const ontologyIris: string[] = propertiesToQuery.map(\n                propIri => {\n                    return Utils.getOntologyIriFromEntityIri(propIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                map(\n                    results => {\n                        if (results) {\n                            return this.getPropertyDefinitionsFromCache(propertyIris);\n                        } else {\n                            throw new Error('Problem with: return this.getPropertyDefinitionsFromCache(propertyIris);');\n                        }\n                    }\n                )\n            );\n        } else {\n            return of(this.getPropertyDefinitionsFromCache(propertyIris));\n        }\n    }\n\n}\n","import { ReadResource } from './read-resource';\nimport { OntologyInformation } from '../../../../services/v2/ontology-cache.service';\n\n/**\n * Represents a sequence of resources.\n */\nexport class ReadResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `ReadResource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<ReadResource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor (public readonly resources: Array<ReadResource>, public readonly numberOfResources: number) {\n    }\n\n}\n","/**\n * Represents the result of a count query.\n */\nexport class CountQueryResult {\n\n    /**\n     *\n     * @param numberOfResults total number of results for a query.\n     */\n    constructor(public readonly numberOfResults: number) {\n\n    }\n}\n","import { ReadStillImageFileValue } from '../properties/read-property-item';\nimport { ImageRegion } from './image-region';\n\n/**\n * Represents an image including its regions.\n */\n\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param {ReadStillImageFileValue} stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param {ImageRegion[]} regions the regions belonging to the image.\n     */\n    constructor(readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: ImageRegion[]) {\n\n    }\n\n}\n","import { ReadGeomValue } from '../properties/read-property-item';\nimport { ReadResource } from '../resources/read-resource';\nimport { KnoraConstants } from '../../knora-constants';\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\n\nexport class ImageRegion {\n\n    /**\n     *\n     * @param {ReadResource} regionResource a resource of type Region\n     */\n    constructor(readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns {ReadGeomValue[]}\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, Group, GroupResponse, GroupsResponse } from '../../declarations/';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about group from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupsService extends ApiService {\n\n    private path: string = '/admin/groups';\n\n    /**\n     * Return a list of all groups.\n     *\n     * @returns Observable<Group[]>\n     */\n    getAllGroups(): Observable<Group[]> {\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a group object (filter by IRI).\n     *\n     * @param {string} iri\n     * @returns Observable<Group>\n     */\n    getGroupByIri(iri: string): Observable<Group> {\n        this.path += '/' + encodeURIComponent(iri);\n\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupResponse).group),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, List, ListCreatePayload, ListInfo, ListInfoResponse, ListInfoUpdatePayload, ListNode, ListNodeResponse, ListNodeUpdatePayload, ListResponse, ListsResponse } from '../../declarations';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about lists from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all lists.\n     *\n     * @param {string} [projectIri]\n     * @returns Observable<ListNode[]>\n     */\n    getLists(projectIri?: string): Observable<ListNode[]> {\n        let newPath = this.path;\n        if (projectIri) {\n            newPath += '?projectIri=' + encodeURIComponent(projectIri);\n        }\n        return this.httpGet(newPath).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list object.\n     *\n     * @param {string} listIri\n     * @returns Observable<List>\n     */\n    getList(listIri: string): Observable<List> {\n        return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list info object.\n     *\n     * @param {string} listIri\n     * @returns Observable<ListInfo>\n     */\n    getListInfo(listIri: string): Observable<ListInfo> {\n        return this.httpGet(this.path + '/infos/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list node info object.\n     *\n     * @param {string} nodeIri\n     * @returns Observable<ListNode>\n     */\n    getListNodeInfo(nodeIri: string): Observable<ListNode> {\n        return this.httpGet(this.path + '/nodes/' + encodeURIComponent(nodeIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new list.\n     *\n     * @param {ListCreatePayload} payload\n     * @returns Observable<List>\n     */\n    createList(payload: ListCreatePayload): Observable<List> {\n        return this.httpPost(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Create new list node.\n     *\n     * @param {string} listIri\n     * @param {ListNodeUpdatePayload} payload\n     * @returns Observable<ListNode>\n     */\n    createListItem(listIri: string, payload: ListNodeUpdatePayload): Observable<ListNode> {\n        return this.httpPost(this.path + '/' + encodeURIComponent(listIri), payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit list data.\n     *\n     * @param {ListInfoUpdatePayload} payload\n     * @returns Observable<ListInfo>\n     */\n    updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n        return this.httpPut(this.path + '/infos/' + encodeURIComponent(payload.listIri), payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { ApiServiceResult, Project, ProjectMembersResponse, ProjectResponse, ProjectsResponse, User } from '../../declarations/';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about projects from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all projects.\n     *\n     * @returns Observable<Project[]>\n     */\n    getAllProjects(): Observable<Project[]> {\n        return this.httpGet('/admin/projects').pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    getProjectByIri(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortname(shortname: string): Observable<Project> {\n        const url = '/admin/projects/shortname/' + shortname;\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortcode(shortcode: string): Observable<Project> {\n        const url = '/admin/projects/shortcode/' + shortcode;\n        return this.getProject(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<Project>\n     */\n    protected getProject(url: string): Observable<Project> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is project id (iri).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByIri(iri: string): Observable<User[]> {\n        const url = '/admin/projects/iri/' + encodeURIComponent(iri) + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortname.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortname(shortname: string): Observable<User[]> {\n        const url = '/admin/projects/shortname/' + shortname + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortcode.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n        const url = '/admin/projects/shortcode/' + shortcode + '/members';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project member retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<User[]>\n     */\n     private getProjectMembers(url: string): Observable<User[]> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new project.\n     *\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    createProject(data: any): Observable<Project> {\n        const url: string = '/admin/projects';\n        return this.httpPost(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit project data.\n     *\n     * @param {string} iri identifier of the project\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    updateProject(iri: string, data: any): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate project (if it was deleted).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    activateProject(iri: string): Observable<Project> {\n        const data: any = {\n            status: true\n        };\n\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete (set inactive) project.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    deleteProject(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpDelete(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../api.service';\nimport {\n    ApiServiceResult,\n    Group,\n    GroupsResponse,\n    User,\n    UserResponse,\n    UsersResponse\n} from '../../declarations/';\n\n/**\n * This service uses the Knora admin API and handles all user data.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all users.\n     *\n     * @returns Observable<User[]>\n     */\n    getAllUsers(): Observable<User[]> {\n        return this.httpGet('/admin/users').pipe(\n            map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by username, email or by iri.\n     * @ignore\n     *\n     * @param  {string} identifier username, email or by iri\n     * @param  {String} identifierType\n     * @returns Observable<User>\n     */\n    getUser(identifier: string, identifierType: String): Observable<User> {\n        const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by IRI\n     *\n     * @param  {string} iri\n     * @returns Observable<User>\n     */\n    getUserByIri(iri: string): Observable<User> {\n        return this.getUser(iri, 'iri');\n    }\n\n    /**\n     * Get user by email\n     *\n     * @param  {string} email\n     * @returns Observable<User>\n     */\n    getUserByEmail(email: string): Observable<User> {\n        return this.getUser(email, 'email');\n    }\n\n    /**\n     * Get user by username.\n     *\n     * @param  {string} username\n     * @returns Observable<User>\n     */\n    getUserByUsername(username: string): Observable<User> {\n        return this.getUser(username, 'username');\n    }\n\n    /**\n     * Get all groups, where the user is member of\n     *\n     * @param  {string} userIri\n     * @returns Observable<Group[]>\n     */\n    getUsersGroupMemberships(userIri: string): Observable<Group[]> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new user.\n     *\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    createUser(data: any): Observable<User> {\n        const path = '/admin/users';\n        return this.httpPost(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Remove user from project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Delete user from the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    addUserToGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    /**\n     * remove user from project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    removeUserFromGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n\n    /**\n     * Add user to the admin system.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    addUserToSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': true\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n\n    }\n\n    /**\n     * Remove user from the admin system.\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    removeUserFromSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': false\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n    }\n\n    /**\n     * Update user system admin membership\n     * @ignore\n     *\n     * @param {string} userIri\n     * @param {any} data\n     *\n     * @returns Observable<User>\n     */\n    private updateUserSystemAdmin(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    activateUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';\n\n        const data: any = {\n            status: true\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Update own password.\n     *\n     * @param {string} userIri\n     * @param {string} oldPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: oldPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update password of another user (not own).\n     *\n     * @param {string} userIri\n     * @param {string} requesterPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: requesterPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update basic user information: given name, family name\n     * @param userIri\n     * @param data\n     * @returns Observable<User>\n     */\n    updateBasicUserInformation(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete / deactivate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    deleteUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  private subject = new Subject<any>();\n\n  setLanguage(lang: string) {\n    this.subject.next({ var: lang });\n  }\n  getLanguage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KuiCoreConfig } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusMsgService {\n\n  constructor(private _http: HttpClient,\n    @Inject(KuiCoreConfigToken) public config) {\n  }\n\n  /**\n  * this method get the status messages from the statusMsg.json file\n  * which are defined here: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  * and here: http://www.w3schools.com/tags/ref_httpmessages.asp\n  *\n  */\n  getStatusMsg(): Observable<any> {\n\n    return this._http.get(this.config.app + '/assets/i18n/statusMsg.json')\n      .pipe(map(\n        (res: any) => {\n          return res;\n        },\n        err => {\n          console.error(err);\n        }\n      )\n      );\n\n  }\n}\n","import {\n    CountQueryResult,\n    KnoraConstants,\n    ReadBooleanValue,\n    ReadColorValue,\n    ReadDateValue,\n    ReadDecimalValue,\n    ReadGeomValue,\n    ReadIntegerValue,\n    ReadIntervalValue,\n    ReadLinkValue,\n    ReadListValue,\n    ReadProperties,\n    ReadPropertyItem,\n    ReadResource,\n    ReadResourcesSequence,\n    ReadStillImageFileValue,\n    ReadTextFileValue,\n    ReadTextValueAsHtml,\n    ReadTextValueAsString,\n    ReadTextValueAsXml,\n    ReadUriValue,\n    ReferredResourcesByStandoffLink,\n    Utils\n} from '../../declarations';\n\n/**\n * Contains methods to convert JSON-LD representing resources and properties to classes.\n * These methods works only for instances of resources and properties, not for ontologies (data model).\n */\nexport module ConvertJSONLD {\n\n    /**\n     * Function to be passed to a filter used on an array of property names\n     * sorting out all non value property names.\n     *\n     * Gets all property names that refer to value objects.\n     *\n     * @param propName the name of a property to be checked.\n     * @returns boolean - indicating if the name refers to a value property.\n     */\n    const getPropertyNames = (propName) => {\n        return propName !== '@id'\n            && propName !== '@type'\n            && propName !== KnoraConstants.RdfsLabel\n            && propName !== KnoraConstants.attachedToProject\n            && propName !== KnoraConstants.attachedToUser\n            && propName !== KnoraConstants.creationDate\n            && propName !== KnoraConstants.lastModificationDate\n            && propName !== KnoraConstants.hasPermissions\n            && propName !== KnoraConstants.userHasPermission\n            && propName !== KnoraConstants.ArkUrl\n            && propName !== KnoraConstants.versionArkUrl;\n    };\n\n\n    /**\n     * Constructs a [[ReadResource]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an a resource and its properties serialized as JSON-LD.\n     * @returns ReadResource\n     */\n    function constructReadResource(resourceJSONLD: object): ReadResource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new ReadResource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            properties\n        );\n    }\n\n    /**\n     * Constructs a [[ReadPropertyItem]] from JSON-LD,\n     * taking into account the property's value type.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {Object} propValue the value serialized as JSON-LD.\n     * @param {string} propIri the Iri of the property.\n     * @param {ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.\n     * @returns a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.\n     */\n    function createValueSpecificProp(\n        propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n        // convert a JSON-LD property value to a `ReadPropertyItem`\n\n        let valueSpecificProp: ReadPropertyItem;\n\n        // check for the property's value type\n        switch (propValue['@type']) {\n            case KnoraConstants.TextValue:\n                // a text value might be given as plain string, html or xml.\n                let textValue: ReadPropertyItem;\n\n                if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                    textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n                } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                    const referredResources: ReferredResourcesByStandoffLink = {};\n\n                    // check for standoff links and include referred resources, if any\n                    // when the user interacts with a standoff link, further information about the referred resource can be shown\n                    for (const standoffLink of standoffLinkValues) {\n                        const referredRes: ReadResource = standoffLink.referredResource;\n                        referredResources[referredRes.id] = referredRes;\n                    }\n\n                    textValue = new ReadTextValueAsHtml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                    );\n                } else if (\n                    propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                    textValue = new ReadTextValueAsXml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                    );\n                } else {\n                    // expected text value members not defined\n                    console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n                }\n\n                valueSpecificProp = textValue;\n                break;\n\n            case KnoraConstants.DateValue:\n                const dateValue = new ReadDateValue(propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.dateValueHasCalendar],\n                    propValue[KnoraConstants.dateValueHasStartYear],\n                    propValue[KnoraConstants.dateValueHasEndYear],\n                    propValue[KnoraConstants.dateValueHasStartEra],\n                    propValue[KnoraConstants.dateValueHasEndEra],\n                    propValue[KnoraConstants.dateValueHasStartMonth],\n                    propValue[KnoraConstants.dateValueHasEndMonth],\n                    propValue[KnoraConstants.dateValueHasStartDay],\n                    propValue[KnoraConstants.dateValueHasEndDay]);\n\n                valueSpecificProp = dateValue;\n                break;\n\n            case KnoraConstants.LinkValue:\n\n                let linkValue: ReadLinkValue;\n\n                // check if the referred resource is given as an object or just as an IRI\n                if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                    // linkValueHasTarget contains the object\n\n                    const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n                } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                    // linkValueHasTargetIri contains the resource's Iri\n\n                    const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n                } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // linkValueHasSource contains the object\n\n                    const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n                } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                    // linkValueHasSourceIri contains the resource's Iri\n\n                    const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n                }\n\n                valueSpecificProp = linkValue;\n                break;\n\n            case KnoraConstants.IntValue:\n\n                const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n                valueSpecificProp = intValue;\n\n                break;\n\n            case KnoraConstants.DecimalValue:\n\n                // a decimal value is represented as a string in order to preserve its precision\n                const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n                const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n                valueSpecificProp = decimalValue;\n\n                break;\n\n            // TODO: handle movingImageFileValue and the others here...\n            case KnoraConstants.StillImageFileValue:\n\n                const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.stillImageFileValueHasDimX],\n                    propValue[KnoraConstants.stillImageFileValueHasDimY]\n                );\n\n                valueSpecificProp = stillImageFileValue;\n\n                break;\n\n            case KnoraConstants.TextFileValue:\n\n                const textFileValue = new ReadTextFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = textFileValue;\n\n                break;\n\n            case KnoraConstants.ColorValue:\n\n                const readColorValue: ReadColorValue = new ReadColorValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.colorValueAsColor]\n                );\n\n                valueSpecificProp = readColorValue;\n\n                break;\n\n            case KnoraConstants.GeomValue:\n\n                const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.geometryValueAsGeometry]\n                );\n\n                valueSpecificProp = readGeomValue;\n\n                break;\n\n            case KnoraConstants.UriValue:\n\n                const uriValue: ReadUriValue = new ReadUriValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.uriValueAsUri]['@value']\n                );\n\n                valueSpecificProp = uriValue;\n\n                break;\n\n            case KnoraConstants.BooleanValue:\n\n                const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.booleanValueAsBoolean]\n                );\n\n                valueSpecificProp = boolValue;\n\n                break;\n\n\n            case KnoraConstants.IntervalValue:\n\n                // represented as strings to preserve precision\n                const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n                const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n                const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                    propValue['@id'],\n                    propIri,\n                    intStart,\n                    intEnd\n                );\n\n                valueSpecificProp = intervalValue;\n\n                break;\n\n            case KnoraConstants.ListValue:\n\n                const listValue: ReadListValue = new ReadListValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.listValueAsListNode]['@id']\n                );\n\n                valueSpecificProp = listValue;\n\n                break;\n\n            default:\n                // unsupported value type\n                console.error('ERROR: value type not implemented yet: ' + propValue['@type'] + '(' + propValue['@id'] + ')');\n                break;\n        }\n\n        return valueSpecificProp;\n\n    }\n\n\n    /**\n     * Construct a [[ReadProperties]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an object describing the resource and its properties.\n     * @returns ReadProperties\n     */\n    function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n        // JSON-LD representing standoff link values\n        // text values may contain standoff links\n        const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n        // to be populated with standoff link values\n        const standoffLinkValues: ReadLinkValue[] = [];\n\n        // convert each standoff link value JSON-LD object to a ReadLinkValue\n        // in order populate the collection with all the standoff link values\n        if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n            for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n                const standoffVal: ReadLinkValue = createValueSpecificProp(\n                    standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n                ) as ReadLinkValue;\n\n                standoffLinkValues.push(standoffVal);\n            }\n        } else if (standoffLinkValuesJSONLD !== undefined) {\n            const standoffVal = createValueSpecificProp(\n                standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n\n        let propNames = Object.keys(resourceJSONLD);\n\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const properties: ReadProperties = {};\n\n        // iterate over all the given property names\n        for (const propName of propNames) {\n\n            const propValues: Array<ReadPropertyItem> = [];\n\n            // either an array of values or just one value is given\n            if (Array.isArray(resourceJSONLD[propName])) {\n                // array of values\n\n                // for each property name, an array of property values is given, iterate over it\n                for (const propValue of resourceJSONLD[propName]) {\n\n                    // convert a JSON-LD property value to a `ReadPropertyItem`\n                    const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                    // if it is undefined, the value could not be constructed correctly\n                    // add the property value to the array of property values\n                    if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n                }\n            } else {\n                // only one value\n\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n            }\n\n            // add the property to the properties object\n            properties[propName] = propValues;\n\n        }\n\n        return properties;\n    }\n\n    /**\n     * Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.\n     * @returns ReadResourcesSequence - sequence of read resources\n     */\n    export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n        const resources: Array<ReadResource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ReadResourcesSequence(resources, numberOfResources);\n\n    }\n\n    /**\n     * Collects all the types (classes) of referred resources from a given resource (from its linking properties).\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD JSON-LD describing one resource.\n     * @return string[] - an Array of resource class Iris (including duplicates).\n     */\n    function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n        let propNames = Object.keys(resourceJSONLD);\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const referredResourceClasses = [];\n\n        for (const prop of propNames) {\n\n            // several values given for this property\n            if (Array.isArray(resourceJSONLD[prop])) {\n\n                for (const referredRes of resourceJSONLD[prop]) {\n\n                    // if the property is a LinkValue and it contains an embedded resource, get its type\n                    if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                        // target resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                    } else if (\n                        referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                        // source resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                    }\n\n                }\n            } else {\n                // only one value given for this property\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                    !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                    !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n                }\n            }\n\n        }\n\n        return referredResourceClasses;\n\n    }\n\n    /**\n     * Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.\n     * @returns string[] - the resource class Iris (without duplicates).\n     */\n    export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n        let resourceClasses: Array<string> = [];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n\n            for (const resourceJSONLD of resourcesGraph) {\n                // get class of the current resource\n                resourceClasses.push(resourceJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n            }\n\n        } else {\n            // only one resource\n\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                return [];\n            } else {\n                resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n            }\n        }\n\n        // filter out duplicates\n        return resourceClasses.filter(Utils.filterOutDuplicates);\n\n    }\n\n    /**\n     * Turns a JSON-LD response to a count query into a `CountQueryResult`.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param countQueryJSONLD\n     * @returns {CountQueryResult}\n     */\n    export function createCountQueryResult(countQueryJSONLD: object) {\n        return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceError, ApiServiceResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\n/**\n * Requests representation of resources from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns Observable<ApiServiceResult>\n     */\n    getResource(iri): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource as a `ReadResourceSequence`.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        // TODO: handle case of an ApiServiceError\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n    // TODO: post, put, delete\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceResult, CountQueryResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\nexport interface FulltextSearchParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n\n    limitToStandoffClass?: string;\n}\n\nexport interface SearchByLabelParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n}\n\n/**\n * Performs searches (fulltext or extended) and search count queries into Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor(public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Assign fulltext search params to http params.\n     *\n     * @param {FulltextSearchParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processFulltextSearchParams(params: FulltextSearchParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToStandoffClass !== undefined) {\n            searchParams = searchParams.set('limitToStandoffClass', params.limitToStandoffClass);\n        }\n\n        return searchParams;\n\n    }\n    /**\n     * Assign search by label search params to http params.\n     *\n     * @param {SearchByLabelParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processSearchByLabelParams(params: SearchByLabelParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        return searchParams;\n\n    }\n\n    /**\n     * Converts a JSON-LD object to a `ReadResorceSequence`.\n     * To be passed as a function pointer (arrow notation required).\n     *\n     * @param {Object} resourceResponse\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ReadResourceSequence\n        const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ReadResourceSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search.\n     * TODO: mark as deprecated, use of `doFullTextSearchReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearch(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ReadResourcesSequence> {\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res: Observable<any> = this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search count query.\n     * TODO: mark as deprecated, use of `doFullTextSearchCountQueryCountQueryResult` recommended\n     *\n     * @param searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearchCountQuery(searchTerm: string, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<CountQueryResult>\n     */\n    doFullTextSearchCountQueryCountQueryResult(searchTerm: string, params?: FulltextSearchParams): Observable<CountQueryResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        return this.httpPost('/v2/searchextended', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search count query.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param {string} gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label.\n     * TODO: mark as deprecated, use of `searchByLabelReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabel(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        // httpGet() expects only one argument, not 2\n        return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label and turns the results in a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabelReadResourceSequence(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ReadResourcesSequence> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { ReadResourcesSequence } from '../../declarations';\n\n/**\n * Requests incoming information (regions, links, stillImageRepresentations) from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IncomingService extends SearchService {\n\n    /**\n    * Returns all incoming regions for a particular resource.\n    *\n    * @param {string} resourceIRI the Iri of the resource whose Incoming regions should be returned.\n    * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n    * @returns {Observable<any>}\n    */\n    getIncomingRegions(resourceIRI: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n        // console.log('sparqlQueryStr ', sparqlQueryStr);\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n    /**\n     * Returns all the StillImageRepresentations for the given resource, if any.\n     * StillImageRepresentations link to the given resource via knora-base:isPartOf.\n     *\n     * @param {string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n\n    }\n\n\n    /**\n     * Returns all incoming links for the given resource Iri but incoming regions and still image representations.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinksForResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n/**\n * Represents the parameters of an extended search.\n */\nexport class ExtendedSearchParams {\n\n    /**\n     *\n     * @param generateGravsearch a function that generates a Gravsearch query.\n     *\n     *                           The function takes the offset\n     *                           as a parameter and returns a Gravsearch query string.\n     *                           Returns false if not set correctly (init state).\n     */\n    constructor(public generateGravsearch: (offset: number) => string | boolean) {\n\n    }\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\n/**\n * Temporarily stores the parameters of an extended search.\n */\nexport class SearchParamsService {\n\n    private _currentSearchParams;\n\n    constructor() {\n        // init with a dummy function that returns false\n        // if the application is reloaded, this will be returned\n        this._currentSearchParams = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => false));\n    }\n\n    /**\n     * Updates the parameters of an extended search.\n     *\n     * @param {ExtendedSearchParams} searchParams\n     * @returns void\n     */\n    changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n        this._currentSearchParams.next(searchParams);\n    }\n\n    /**\n     * Gets the search params of an extended search.\n     *\n     * @returns ExtendedSearchParams - search parameters\n     */\n    getSearchParams(): ExtendedSearchParams {\n        return this._currentSearchParams.getValue();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExtendedSearchParams, SearchParamsService } from './search-params.service';\nimport { KnoraConstants, KnoraSchema } from '../../declarations';\nimport { PropertyWithValue } from '../../declarations/api/operators';\n\n/**\n * Create GravSearch queries from provided parameters.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GravsearchGenerationService {\n\n    /**\n     * @ignore\n     *\n     * Map of complex knora-api value types to simple ones.\n     * Use computed property name: http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer.\n     */\n    public static typeConversionComplexToSimple = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.xsdInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.xsdDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.xsdBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.xsdString,\n        'http://api.knora.org/ontology/knora-api/v2#DateValue': KnoraConstants.dateSimple,\n        'http://api.knora.org/ontology/knora-api/v2#IntervalValue': KnoraConstants.intervalSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeomValue': KnoraConstants.geomSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ColorValue': KnoraConstants.colorSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeonameValue': KnoraConstants.geonameSimple,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.xsdUri,\n        'http://api.knora.org/ontology/knora-api/v2#StillImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#FileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DDDFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#AudioFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DocumentFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#TextFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listNodeSimple\n    };\n\n    public static complexTypeToProp = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.integerValueAsInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.decimalValueAsDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.booleanValueAsBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.valueAsString,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.uriValueAsUri,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listValueAsListNode\n    };\n\n    constructor(private _searchParamsService: SearchParamsService) { }\n\n    /**\n     * Generates a Gravsearch query from the provided arguments.\n     *\n     * @param {PropertyWithValue[]} properties the properties specified by the user.\n     * @param {string} [mainResourceClassOption] the class of the main resource, if specified.\n     * @param {number} offset the offset to be used (nth page of results).\n     * @returns string - a KnarQL query string.\n     */\n    createGravsearchQuery(properties: PropertyWithValue[], mainResourceClassOption?: string, offset: number = 0): string {\n\n        // class restriction for the resource searched for\n        let mainResourceClass = '';\n\n        // if given, create the class restriction for the main resource\n        if (mainResourceClassOption !== undefined) {\n            mainResourceClass = `?mainRes a <${mainResourceClassOption}> .`;\n        }\n\n        // criteria for the order by statement\n        const orderByCriteria = [];\n\n        // statements to be returned in query results\n        const returnStatements = [];\n\n        // loop over given properties and create statements and filters from them\n        const props: string[] = properties.map(\n            (propWithVal: PropertyWithValue, index: number) => {\n\n                // represents the object of a statement\n                let propValue;\n                if (!propWithVal.property.isLinkProperty || propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Exists') {\n                    // it is not a linking property, create a variable for the value (to be used by a subsequent FILTER)\n                    // OR the comparison operator Exists is used in which case we do not need to specify the object any further\n                    propValue = `?propVal${index}`;\n                } else {\n                    // it is a linking property and the comparison operator is not Exists, use its IRI\n                    propValue = propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex);\n                }\n\n                // generate statement\n                let statement: string = `?mainRes <${propWithVal.property.id}> ${propValue} .`;\n\n                // check if it is a linking property that has to be wrapped in a FILTER NOT EXISTS (comparison operator NOT_EQUALS) to negate it\n                if (propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                    // do not include statement in results, because the query checks for the absence of this statement\n                    statement = `FILTER NOT EXISTS {\n${statement}\n\n\n}`;\n                } else {\n                    // TODO: check if statement should be returned returned in results (Boolean flag from checkbox)\n                    returnStatements.push(statement);\n                    statement = `\n${statement}\n\n\n`;\n                }\n\n                // generate restricting expression (e.g., a FILTER) if comparison operator is not Exists\n                let restriction: string = '';\n                // only create a FILTER if the comparison operator is not EXISTS and it is not a linking property\n                if (!propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() !== 'Exists') {\n                    // generate variable for value literal\n                    const propValueLiteral = `${propValue}Literal`;\n\n                    if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Like') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use regex function for LIKE\n                        restriction += `FILTER regex(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}, \"i\")`;\n                    } else if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Match') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use contains function for MATCH\n                        restriction += `FILTER <${KnoraConstants.matchFunction}>(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.DateValue) {\n                        // handle date property\n                        restriction = `FILTER(knora-api:toSimpleDate(${propValue}) ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.ListValue) {\n                        // handle list node\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}` + '\\n';\n                        // check for comparison operator \"not equals\"\n                        if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                            restriction = `FILTER NOT EXISTS {\n                                ${restriction}\n                            }`;\n                        }\n                    } else {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // generate filter expression\n                        restriction += `FILTER(${propValueLiteral} ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    }\n                }\n\n                // check if current value is a sort criterion\n                if (propWithVal.isSortCriterion) orderByCriteria.push(propValue);\n\n                return `${statement}\n${restriction}\n`;\n\n            });\n\n        let orderByStatement = '';\n\n        if (orderByCriteria.length > 0) {\n            orderByStatement = `\nORDER BY ${orderByCriteria.join(' ')}\n`;\n        }\n\n        // template of the Gravsearch query with dynamic components\n        const gravsearchTemplate = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/v2#>\nCONSTRUCT {\n\n?mainRes knora-api:isMainResource true .\n\n${returnStatements.join('\\n')}\n\n} WHERE {\n\n?mainRes a knora-api:Resource .\n\n${mainResourceClass}\n\n${props.join('')}\n\n}\n${orderByStatement}`;\n\n        // offset component of the Gravsearch query\n        const offsetTemplate = `\nOFFSET ${offset}\n`;\n\n        // function that generates the same KnarQL query with the given offset\n        const generateGravsearchQueryWithCustomOffset = (localOffset: number): string => {\n            const offsetCustomTemplate = `\nOFFSET ${localOffset}\n`;\n\n            return gravsearchTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another KnarQL query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(new ExtendedSearchParams(generateGravsearchQueryWithCustomOffset));\n        }\n\n\n        return gravsearchTemplate + offsetTemplate;\n\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KuiCoreConfig, RdfDataObject, ResetTriplestoreContentResponse } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor(private http: HttpClient, @Inject(KuiCoreConfigToken) public config) { }\n\n  /**\n     * Resets the content of the triplestore.\n     *\n     * @param rdfDataObjects\n     * @returns Observable<string>\n     */\n  resetTriplestoreContent(rdfDataObjects: RdfDataObject[]): Observable<string> {\n\n    return this.http.post<ResetTriplestoreContentResponse>(this.config.api + '/admin/store/ResetTriplestoreContent', rdfDataObjects)\n      .pipe(\n        map(\n          (data) => {\n            const result: ResetTriplestoreContentResponse = data;\n            // console.log('StoreService - resetTriplestoreContent: ', result);\n            return result.message;\n          },\n          (error: HttpErrorResponse) => {\n            if (error.error instanceof Error) {\n              console.log('StoreService - resetTriplestoreContent - Client-side error occurred.', error);\n            } else {\n              console.log('StoreService - resetTriplestoreContent - Server-side error occurred.', error);\n            }\n            throw error;\n          }\n        ));\n\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicOntologyService extends ApiService {\n\n  /**\n     * returns our list of a basic ontology\n     *\n     * @returns {Observable<any>}\n     */\n  // getBasicOntology(): Observable<any> {\n  //     let url = environment.url;\n  //     return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  // }\n  getBasicOntology(): Observable<any> {\n    const url = this.config.app;\n    return this.httpGet(url + '/data/base-data/basic-ontology.json');\n    // return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceTypesService extends ApiService {\n\n  /**\n     * Get all resource types defined by the vocabulary.\n     *\n     * @param {string} iri Vocabulary iri\n     * @returns Observable<any>\n     */\n  getResourceTypesByVoc(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes?vocabulary=' + encodeURIComponent(iri));\n  }\n\n  /**\n   * Get a specific resource type.\n   *\n   * @param {string} iri resource type iri\n   * @returns Observable<any>\n   */\n  getResourceType(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes/' + encodeURIComponent(iri));\n  }\n\n\n  // putResourceType(iri)\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiServiceError, ApiServiceResult } from '../../declarations';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject(KuiCoreConfigToken) public config) {\n        super(http, config);\n    }\n\n    /**\n     * Gets a hierarchical list from Knora.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListFromKnora(rootNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/lists/' + encodeURIComponent(rootNodeIri));\n    }\n\n    /**\n     * Returns a list as expanded JSON-LD.\n     *\n     * @param {string} rootNodeIri the root node of the list.\n     * @return {Observable<object>} the expanded JSON-LD.\n     */\n    getList(rootNodeIri: string): Observable<object> {\n        const listJSONLD = this.getListFromKnora(rootNodeIri);\n\n        return listJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n\n    /**\n     * Gets a list node from Knora.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListNodeFromKnora(listNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/node/' + encodeURIComponent(listNodeIri));\n    }\n\n    /**\n     * Returns a list node as expanded JSON-LD.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<object> {\n\n        const listNodeJSONLD = this.getListNodeFromKnora(listNodeIri);\n\n        return listNodeJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ListService } from './list.service';\n\n/**\n * Represents a list node v2.\n */\nexport class ListNodeV2 {\n\n    readonly children: ListNodeV2[];\n\n    readonly isRootNode: boolean;\n\n    constructor(readonly id: string, readonly label: string, readonly position?: number, readonly hasRootNode?: string) {\n\n        // if hasRootNode is not given, this node is the root node.\n        this.isRootNode = (hasRootNode === undefined);\n\n        this.children = [];\n    }\n}\n\nclass ListCache {\n\n    [index: string]: ListNodeV2;\n\n}\n\nclass ListNodeIriToListNodeV2 {\n\n    [index: string]: ListNodeV2;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListCacheService {\n\n    private listCache = new ListCache();\n\n    private listNodeIriToListNodeV2 = new ListNodeIriToListNodeV2();\n\n    constructor(private _listService: ListService) {\n    }\n\n    private hasRootNode(listJSONLD) {\n        let hasRoot;\n\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode'] !== undefined) {\n            hasRoot = listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode']['@id'];\n        }\n\n        return hasRoot;\n    }\n\n    /**\n     * Converts a JSON-LD represention of a ListNodeV2 to  a `ListNodeV2`.\n     * Recursively converts child nodes.\n     *\n     * @param {object} listJSONLD the JSON-LD representation of a list node v2.\n     * @return {ListNodeV2}\n     */\n    private convertJSONLDToListNode: (listJSONLD: object) => ListNodeV2 = (listJSONLD: object) => {\n\n        const listNodeIri = listJSONLD['@id'];\n\n        const hasRootNode = this.hasRootNode(listJSONLD);\n\n        const listNode = new ListNodeV2(\n            listNodeIri,\n            listJSONLD['http://www.w3.org/2000/01/rdf-schema#label'],\n            listJSONLD['http://api.knora.org/ontology/knora-api/v2#listNodePosition'],\n            hasRootNode\n        );\n\n        // check if there are child nodes\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'] !== undefined) {\n\n            if (Array.isArray(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'])) {\n                // array of child nodes\n                for (const subListNode of listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']) {\n                    listNode.children.push(this.convertJSONLDToListNode(subListNode));\n                }\n            } else {\n                // single child node\n                listNode.children.push(this.convertJSONLDToListNode(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']));\n            }\n\n        }\n\n        this.listNodeIriToListNodeV2[listNodeIri] = listNode;\n\n        return listNode;\n    };\n\n    /**\n     * Gets a list from the cache or requests it from Knora and caches it.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ListNodeV2>}\n     */\n    getList(rootNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list is already in cache\n        if (this.listCache[rootNodeIri] !== undefined) {\n\n            // return list from cache\n            return of(this.listCache[rootNodeIri]);\n\n        } else {\n            // get list from Knora and cache it\n\n            const listJSONLD = this._listService.getList(rootNodeIri);\n\n            const listV2: Observable<ListNodeV2> = listJSONLD.pipe(\n                map(\n                    this.convertJSONLDToListNode\n                )\n            );\n\n            return listV2.pipe(\n                map(\n                    (list: ListNodeV2) => {\n                        // write list to cache and return it\n                        this.listCache[rootNodeIri] = list;\n                        return list;\n                    }\n                )\n            );\n        }\n    }\n\n    /**\n     * Gets a list node from the cache or requests the whole list from Knora and caches it.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list node is already in cache\n        if (this.listNodeIriToListNodeV2[listNodeIri] !== undefined) {\n\n            // list node is already cached\n            return of(this.listNodeIriToListNodeV2[listNodeIri]);\n\n        } else {\n\n            const listNode = this._listService.getListNode(listNodeIri);\n\n            return listNode.pipe(\n                mergeMap(\n                    (listNodeJSONLD: object) => {\n                        const hasRootNode = this.hasRootNode(listNodeJSONLD);\n\n                        if (hasRootNode !== undefined) {\n                            // get the whole list\n                            return this.getList(hasRootNode).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        } else {\n                            // this is the root node, get the whole list\n                            return this.getList(listNodeIri).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        }\n                    }\n                )\n            );\n        }\n    }\n}\n","import { KnoraConstants, KnoraSchema } from './knora-constants';\nimport { GravsearchGenerationService, Property } from '../../services';\n\n\n/**\n * An abstract interface representing a comparison operator.\n * This interface is implemented for the supported comparison operators.\n */\nexport interface ComparisonOperator {\n\n    // type of comparison operator\n    type: string;\n\n    // the label of the comparison operator to be presented to the user.\n    label: string;\n\n    // returns the class name when called on an instance\n    getClassName(): string;\n}\n\nexport class Equals implements ComparisonOperator {\n\n    type = KnoraConstants.EqualsComparisonOperator;\n    label = KnoraConstants.EqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Equals';\n    }\n}\n\n\nexport class NotEquals implements ComparisonOperator {\n\n    type = KnoraConstants.NotEqualsComparisonOperator;\n    label = KnoraConstants.NotEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'NotEquals';\n    }\n}\n\nexport class GreaterThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanEqualsComparisonOperator;\n    label = KnoraConstants.GreaterThanEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThanEquals';\n    }\n}\n\nexport class GreaterThan implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanComparisonOperator;\n    label = KnoraConstants.GreaterThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThan';\n    }\n}\n\nexport class LessThan implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanComparisonOperator;\n    label = KnoraConstants.LessThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThan';\n    }\n}\n\nexport class LessThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanEqualsComparisonOperator;\n    label = KnoraConstants.LessThanQualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThanEquals';\n    }\n}\n\n\nexport class Exists implements ComparisonOperator {\n\n    type = KnoraConstants.ExistsComparisonOperator;\n    label = KnoraConstants.ExistsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Exists';\n    }\n}\n\nexport class Like implements ComparisonOperator {\n\n    type = KnoraConstants.LikeComparisonOperator;\n    label = KnoraConstants.LikeComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Like';\n    }\n\n}\n\nexport class Match implements ComparisonOperator {\n\n    type = KnoraConstants.MatchComparisonOperator;\n    label = KnoraConstants.MatchComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Match';\n    }\n\n}\n\n/**\n * Combination of a comparison operator and a value literal or an IRI.\n * In case the comparison operator is 'Exists', no value is given.\n */\nexport class ComparisonOperatorAndValue {\n\n    constructor(readonly comparisonOperator: ComparisonOperator, readonly value?: Value) {\n    }\n}\n\n/**\n * An abstract interface representing a value: an IRI or a literal.\n */\nexport interface Value {\n\n    /**\n     * Turns the value into a SPARQL string representation.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string} SPARQL representation of the value.\n     */\n    toSparql(schema: KnoraSchema): string;\n\n}\n\n/**\n * Represents a property's value as a literal with the indication of its type.\n */\nexport class ValueLiteral implements Value {\n\n    /**\n     * Constructs a [ValueLiteral].\n     *\n     * @param {string} value the literal representation of the value.\n     * @param {string} type the type of the value (making use of xsd).\n     */\n    constructor(\n        public readonly value: string,\n        public readonly type: string) {\n    }\n\n\n    /**\n     * Creates a type annotated value literal to be used in a SPARQL query.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n\n        let literalType: string;\n\n        // check if a Knora schema conversion is necessary, e.g., knora-api:dateValue (complex) to knora-api:date (simple).\n        // xsd types will remain unchanged\n        if (schema === KnoraSchema.simple && GravsearchGenerationService.typeConversionComplexToSimple[this.type] !== undefined) {\n            // convert to simple schema\n            literalType = GravsearchGenerationService.typeConversionComplexToSimple[this.type];\n        } else {\n            // do not convert\n            literalType = this.type;\n        }\n        return `\"${this.value}\"^^<${literalType}>`;\n    }\n\n}\n\n/**\n * Represents an IRI.\n */\nexport class IRI implements Value {\n\n    /**\n     * Constructs an [IRI].\n     *\n     * @param {string} iri the IRI of a resource instance.\n     */\n    constructor(readonly iri: string) {\n    }\n\n    /**\n     * Creates a SPARQL representation of the IRI.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n        // this is an instance Iri and does not have to be converted.\n        return `<${this.iri}>`;\n    }\n\n}\n\n/**\n * An abstract interface that represents a value.\n * This interface has to be implemented for all value types (value component classes).\n */\nexport interface PropertyValue {\n\n    /**\n     * Type of the value.\n     */\n    type: string;\n\n    /**\n     * Returns the value.\n     *\n     * @returns {Value}.\n     */\n    getValue(): Value;\n\n}\n\n/**\n * Represents a property, the specified comparison operator, and value.\n */\nexport class PropertyWithValue {\n\n    /**\n     * Constructs a [PropertyWithValue].\n     *\n     * @param {Property} property the specified property.\n     * @param {ComparisonOperatorAndValue} valueLiteral the specified comparison operator and value.\n     * @param isSortCriterion indicates if the property is used as a sort criterion.\n     */\n    constructor(\n        readonly property: Property,\n        readonly valueLiteral: ComparisonOperatorAndValue,\n        readonly isSortCriterion: Boolean) {\n    }\n\n}\n\n/**\n * a list, which is used in the mat-autocomplete form field\n * contains objects with id and name. the id is usual the iri\n */\nexport interface AutocompleteItem {\n    iri: string;\n    name: string;\n    label?: string;\n}\n\n"],"names":["tslib_1.__decorate","tslib_1.__param","jsonld"],"mappings":"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"}