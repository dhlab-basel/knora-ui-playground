/**
 * @deprecated Use **Resource** instead
 *
 * Represents a resource and its properties.
 */
export class ReadResource {
    /**
     *
     * @param {string} id the resource's Iri.
     * @param {string} type the resource's type (class).
     * @param {string} label the resource's rdfs:label.
     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).
     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).
     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).
     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).
     * @param {ReadProperties} properties the resources's properties.
     */
    constructor(id, type, label, 
    // TODO: we should use a more generic object here; or what's about incomingSequences?
    incomingRegions, 
    // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation
    incomingStillImageRepresentations, incomingLinks, 
    // TODO: we should use a more generic object here, something like media or fileRepresentation
    stillImageRepresentationsToDisplay, 
    // TODO: the properties should be a list: Array<ReadProperties> or not?
    properties) {
        this.id = id;
        this.type = type;
        this.label = label;
        this.incomingRegions = incomingRegions;
        this.incomingStillImageRepresentations = incomingStillImageRepresentations;
        this.incomingLinks = incomingLinks;
        this.stillImageRepresentationsToDisplay = stillImageRepresentationsToDisplay;
        this.properties = properties;
    }
}
/**
 * This is a temporary class, to test a new resource setup.
 * When it works, we will replace the ReadResource object
 */
export class Resource {
    constructor(id, type, label, incomingAnnotations, // = incomingRegions in ReadResource
    incomingFileRepresentations, // = incomingStillImageRepresentations in ReadResource
    incomingLinks, fileRepresentationsToDisplay, // = stillImageRepresentationsToDisplay in ReadResource
    properties) {
        this.id = id;
        this.type = type;
        this.label = label;
        this.incomingAnnotations = incomingAnnotations;
        this.incomingFileRepresentations = incomingFileRepresentations;
        this.incomingLinks = incomingLinks;
        this.fileRepresentationsToDisplay = fileRepresentationsToDisplay;
        this.properties = properties;
    }
}
/*
fileRepresentationsToDisplay ==> what is the main media file to display?

in case of

property.hasStillImageFile
property.hasMovingImageFile
property.hasAudioFile
property.hasTextFile
property.hasDocumentFile
property.hasDDDImageFile

show this media file.

Otherwise:

resource.incomingStillImageRepresentations?
resource.incomingMovingImageRepresentations?
resource.incomingAudioRepresentations?
resource.incomingTextRepresentations?
resource.incomingDocumentRepresentations?
resource.incomingDDDImageRepresentations?

A resource can have more than one incomingRepresentation


*/ 
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Brbm9yYS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2RlY2xhcmF0aW9ucy9hcGkvdjIvcmVzb3VyY2VzL3JlYWQtcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0E7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxZQUFZO0lBRXJCOzs7Ozs7Ozs7O09BVUc7SUFDSCxZQUNvQixFQUFVLEVBQ1YsSUFBWSxFQUNaLEtBQWE7SUFDN0IscUZBQXFGO0lBQzlFLGVBQW9DO0lBQzNDLDZHQUE2RztJQUN0RyxpQ0FBc0QsRUFDdEQsYUFBa0M7SUFDekMsNkZBQTZGO0lBQ3RGLGtDQUE4RDtJQUNyRSx1RUFBdUU7SUFDdkQsVUFBMkI7UUFYM0IsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBRXRCLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQUVwQyxzQ0FBaUMsR0FBakMsaUNBQWlDLENBQXFCO1FBQ3RELGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtRQUVsQyx1Q0FBa0MsR0FBbEMsa0NBQWtDLENBQTRCO1FBRXJELGVBQVUsR0FBVixVQUFVLENBQWlCO0lBQy9DLENBQUM7Q0FFSjtBQUVEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxRQUFRO0lBQ2pCLFlBQ29CLEVBQVUsRUFDVixJQUFZLEVBQ1osS0FBYSxFQUN0QixtQkFBb0MsRUFBSyxvQ0FBb0M7SUFDN0UsMkJBQTRDLEVBQUssc0RBQXNEO0lBQ3ZHLGFBQThCLEVBQzlCLDRCQUE0RyxFQUFHLHVEQUF1RDtJQUM3SixVQUEyQjtRQVAzQixPQUFFLEdBQUYsRUFBRSxDQUFRO1FBQ1YsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDdEIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFpQjtRQUNwQyxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQWlCO1FBQzVDLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtRQUM5QixpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQWdGO1FBQ25HLGVBQVUsR0FBVixVQUFVLENBQWlCO0lBQy9DLENBQUM7Q0FDSjtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQTBCRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWRQcm9wZXJ0aWVzLCBTdGlsbEltYWdlUmVwcmVzZW50YXRpb24gfSBmcm9tICcuLi8uLi8uLi8nO1xuaW1wb3J0IHsgRmlsZVJlcHJlc2VudGF0aW9uIH0gZnJvbSAnLi4vcmVwcmVzZW50YXRpb25zL2ZpbGVSZXByZXNlbnRhdGlvbic7XG5pbXBvcnQgeyBNb3ZpbmdJbWFnZVJlcHJlc2VudGF0aW9uIH0gZnJvbSAnLi4vbW92aW5nLWltYWdlL21vdmluZy1pbWFnZS1yZXByZXNlbnRhdGlvbic7XG5pbXBvcnQgeyBSZWFkUHJvcGVydHlJdGVtIH0gZnJvbSAnQGtub3JhL2NvcmUvcHVibGljX2FwaSc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlICoqUmVzb3VyY2UqKiBpbnN0ZWFkXG4gKlxuICogUmVwcmVzZW50cyBhIHJlc291cmNlIGFuZCBpdHMgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWRSZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCB0aGUgcmVzb3VyY2UncyBJcmkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgdGhlIHJlc291cmNlJ3MgdHlwZSAoY2xhc3MpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCB0aGUgcmVzb3VyY2UncyByZGZzOmxhYmVsLlxuICAgICAqIEBwYXJhbSB7QXJyYXk8UmVhZFJlc291cmNlPn0gaW5jb21pbmdSZWdpb25zIHJlZ2lvbnMgcG9pbnRpbmcgdG8gdGhpcyByZXNvdXJjZSwgaWYgYW55IChwb3NzaWJseSB0byBiZSBxdWVyaWVkIGJ5IGFkZGl0aW9uYWwgcmVxdWVzdHMpLlxuICAgICAqIEBwYXJhbSB7QXJyYXk8UmVhZFJlc291cmNlPn0gaW5jb21pbmdTdGlsbEltYWdlUmVwcmVzZW50YXRpb25zIHN0aWxsIGltYWdlIHJlcHJlc2VudGF0aW9ucyBwb2ludGluZyB0byB0aGlzIHJlc291cmNlLCBpZiBhbnkgKHBvc3NpYmx5IHRvIGJlIHF1ZXJpZWQgYnkgYWRkaXRpb25hbCByZXF1ZXN0cykuXG4gICAgICogQHBhcmFtIHtBcnJheTxSZWFkUmVzb3VyY2U+fSBpbmNvbWluZ0xpbmtzIHJlc291cmNlcyBwb2ludGluZyB0byB0aGlzIHJlc291cmNlLCBpZiBhbnkgKHBvc3NpYmx5IHRvIGJlIHF1ZXJpZWQgYnkgYWRkaXRpb25hbCByZXF1ZXN0cykuXG4gICAgICogQHBhcmFtIHtTdGlsbEltYWdlUmVwcmVzZW50YXRpb25bXX0gc3RpbGxJbWFnZVJlcHJlc2VudGF0aW9uc1RvRGlzcGxheSAgc3RpbGwgaW1hZ2UgcmVwcmVzZW50YXRpb25zIHRvIGJlIGRpc3BsYXllZCBmb3IgdGhpcyByZXNvdXJjZSwgaWYgYW55IChwb3NzaWJseSB0byBiZSBxdWVyaWVkIGJ5IGFkZGl0aW9uYWwgcmVxdWVzdHMpLlxuICAgICAqIEBwYXJhbSB7UmVhZFByb3BlcnRpZXN9IHByb3BlcnRpZXMgdGhlIHJlc291cmNlcydzIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaWQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmcsXG4gICAgICAgIC8vIFRPRE86IHdlIHNob3VsZCB1c2UgYSBtb3JlIGdlbmVyaWMgb2JqZWN0IGhlcmU7IG9yIHdoYXQncyBhYm91dCBpbmNvbWluZ1NlcXVlbmNlcz9cbiAgICAgICAgcHVibGljIGluY29taW5nUmVnaW9uczogQXJyYXk8UmVhZFJlc291cmNlPixcbiAgICAgICAgLy8gVE9ETzogd2Ugc2hvdWxkIHVzZSBhIG1vcmUgZ2VuZXJpYyBvYmplY3QgaGVyZSwgc29tZXRoaW5nIGxpa2UgaW5jb21pbmdNZWRpYSBvciBpbmNvbWluZ0ZpbGVSZXByZXNlbnRhdGlvblxuICAgICAgICBwdWJsaWMgaW5jb21pbmdTdGlsbEltYWdlUmVwcmVzZW50YXRpb25zOiBBcnJheTxSZWFkUmVzb3VyY2U+LFxuICAgICAgICBwdWJsaWMgaW5jb21pbmdMaW5rczogQXJyYXk8UmVhZFJlc291cmNlPixcbiAgICAgICAgLy8gVE9ETzogd2Ugc2hvdWxkIHVzZSBhIG1vcmUgZ2VuZXJpYyBvYmplY3QgaGVyZSwgc29tZXRoaW5nIGxpa2UgbWVkaWEgb3IgZmlsZVJlcHJlc2VudGF0aW9uXG4gICAgICAgIHB1YmxpYyBzdGlsbEltYWdlUmVwcmVzZW50YXRpb25zVG9EaXNwbGF5OiBTdGlsbEltYWdlUmVwcmVzZW50YXRpb25bXSxcbiAgICAgICAgLy8gVE9ETzogdGhlIHByb3BlcnRpZXMgc2hvdWxkIGJlIGEgbGlzdDogQXJyYXk8UmVhZFByb3BlcnRpZXM+IG9yIG5vdD9cbiAgICAgICAgcHVibGljIHJlYWRvbmx5IHByb3BlcnRpZXM/OiBSZWFkUHJvcGVydGllcykge1xuICAgIH1cblxufVxuXG4vKipcbiAqIFRoaXMgaXMgYSB0ZW1wb3JhcnkgY2xhc3MsIHRvIHRlc3QgYSBuZXcgcmVzb3VyY2Ugc2V0dXAuXG4gKiBXaGVuIGl0IHdvcmtzLCB3ZSB3aWxsIHJlcGxhY2UgdGhlIFJlYWRSZXNvdXJjZSBvYmplY3RcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogc3RyaW5nLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbGFiZWw6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGluY29taW5nQW5ub3RhdGlvbnM6IEFycmF5PFJlc291cmNlPiwgICAgLy8gPSBpbmNvbWluZ1JlZ2lvbnMgaW4gUmVhZFJlc291cmNlXG4gICAgICAgIHB1YmxpYyBpbmNvbWluZ0ZpbGVSZXByZXNlbnRhdGlvbnM6IEFycmF5PFJlc291cmNlPiwgICAgLy8gPSBpbmNvbWluZ1N0aWxsSW1hZ2VSZXByZXNlbnRhdGlvbnMgaW4gUmVhZFJlc291cmNlXG4gICAgICAgIHB1YmxpYyBpbmNvbWluZ0xpbmtzOiBBcnJheTxSZXNvdXJjZT4sXG4gICAgICAgIHB1YmxpYyBmaWxlUmVwcmVzZW50YXRpb25zVG9EaXNwbGF5OiBBcnJheTxTdGlsbEltYWdlUmVwcmVzZW50YXRpb24gfCBNb3ZpbmdJbWFnZVJlcHJlc2VudGF0aW9uIHwgUmVhZFByb3BlcnR5SXRlbT4sICAvLyA9IHN0aWxsSW1hZ2VSZXByZXNlbnRhdGlvbnNUb0Rpc3BsYXkgaW4gUmVhZFJlc291cmNlXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBwcm9wZXJ0aWVzPzogUmVhZFByb3BlcnRpZXMpIHtcbiAgICB9XG59XG5cbi8qXG5maWxlUmVwcmVzZW50YXRpb25zVG9EaXNwbGF5ID09PiB3aGF0IGlzIHRoZSBtYWluIG1lZGlhIGZpbGUgdG8gZGlzcGxheT9cblxuaW4gY2FzZSBvZlxuXG5wcm9wZXJ0eS5oYXNTdGlsbEltYWdlRmlsZVxucHJvcGVydHkuaGFzTW92aW5nSW1hZ2VGaWxlXG5wcm9wZXJ0eS5oYXNBdWRpb0ZpbGVcbnByb3BlcnR5Lmhhc1RleHRGaWxlXG5wcm9wZXJ0eS5oYXNEb2N1bWVudEZpbGVcbnByb3BlcnR5Lmhhc0REREltYWdlRmlsZVxuXG5zaG93IHRoaXMgbWVkaWEgZmlsZS5cblxuT3RoZXJ3aXNlOlxuXG5yZXNvdXJjZS5pbmNvbWluZ1N0aWxsSW1hZ2VSZXByZXNlbnRhdGlvbnM/XG5yZXNvdXJjZS5pbmNvbWluZ01vdmluZ0ltYWdlUmVwcmVzZW50YXRpb25zP1xucmVzb3VyY2UuaW5jb21pbmdBdWRpb1JlcHJlc2VudGF0aW9ucz9cbnJlc291cmNlLmluY29taW5nVGV4dFJlcHJlc2VudGF0aW9ucz9cbnJlc291cmNlLmluY29taW5nRG9jdW1lbnRSZXByZXNlbnRhdGlvbnM/XG5yZXNvdXJjZS5pbmNvbWluZ0REREltYWdlUmVwcmVzZW50YXRpb25zP1xuXG5BIHJlc291cmNlIGNhbiBoYXZlIG1vcmUgdGhhbiBvbmUgaW5jb21pbmdSZXByZXNlbnRhdGlvblxuXG5cbiovIl19