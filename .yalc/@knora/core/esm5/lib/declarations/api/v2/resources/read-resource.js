/**
 * @deprecated Use **Resource** instead
 *
 * Represents a resource and its properties.
 */
var ReadResource = /** @class */ (function () {
    /**
     *
     * @param {string} id the resource's Iri.
     * @param {string} type the resource's type (class).
     * @param {string} label the resource's rdfs:label.
     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).
     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).
     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).
     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).
     * @param {ReadProperties} properties the resources's properties.
     */
    function ReadResource(id, type, label, 
    // TODO: we should use a more generic object here; or what's about incomingSequences?
    incomingRegions, 
    // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation
    incomingStillImageRepresentations, incomingLinks, 
    // TODO: we should use a more generic object here, something like media or fileRepresentation
    stillImageRepresentationsToDisplay, 
    // TODO: the properties should be a list: Array<ReadProperties> or not?
    properties) {
        this.id = id;
        this.type = type;
        this.label = label;
        this.incomingRegions = incomingRegions;
        this.incomingStillImageRepresentations = incomingStillImageRepresentations;
        this.incomingLinks = incomingLinks;
        this.stillImageRepresentationsToDisplay = stillImageRepresentationsToDisplay;
        this.properties = properties;
    }
    return ReadResource;
}());
export { ReadResource };
/**
 * This is a temporary class, to test a new resource setup.
 * When it works, we will replace the ReadResource object
 */
var Resource = /** @class */ (function () {
    function Resource(id, type, label, incomingAnnotations, // = incomingRegions in ReadResource
    incomingFileRepresentations, // = incomingStillImageRepresentations in ReadResource
    incomingLinks, fileRepresentationsToDisplay, // = stillImageRepresentationsToDisplay in ReadResource
    properties) {
        this.id = id;
        this.type = type;
        this.label = label;
        this.incomingAnnotations = incomingAnnotations;
        this.incomingFileRepresentations = incomingFileRepresentations;
        this.incomingLinks = incomingLinks;
        this.fileRepresentationsToDisplay = fileRepresentationsToDisplay;
        this.properties = properties;
    }
    return Resource;
}());
export { Resource };
/*
fileRepresentationsToDisplay ==> what is the main media file to display?

in case of

property.hasStillImageFile
property.hasMovingImageFile
property.hasAudioFile
property.hasTextFile
property.hasDocumentFile
property.hasDDDImageFile

show this media file.

Otherwise:

resource.incomingStillImageRepresentations?
resource.incomingMovingImageRepresentations?
resource.incomingAudioRepresentations?
resource.incomingTextRepresentations?
resource.incomingDocumentRepresentations?
resource.incomingDDDImageRepresentations?

A resource can have more than one incomingRepresentation


*/ 
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Brbm9yYS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2RlY2xhcmF0aW9ucy9hcGkvdjIvcmVzb3VyY2VzL3JlYWQtcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0E7Ozs7R0FJRztBQUNIO0lBRUk7Ozs7Ozs7Ozs7T0FVRztJQUNILHNCQUNvQixFQUFVLEVBQ1YsSUFBWSxFQUNaLEtBQWE7SUFDN0IscUZBQXFGO0lBQzlFLGVBQW9DO0lBQzNDLDZHQUE2RztJQUN0RyxpQ0FBc0QsRUFDdEQsYUFBa0M7SUFDekMsNkZBQTZGO0lBQ3RGLGtDQUE4RDtJQUNyRSx1RUFBdUU7SUFDdkQsVUFBMkI7UUFYM0IsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBRXRCLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQUVwQyxzQ0FBaUMsR0FBakMsaUNBQWlDLENBQXFCO1FBQ3RELGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtRQUVsQyx1Q0FBa0MsR0FBbEMsa0NBQWtDLENBQTRCO1FBRXJELGVBQVUsR0FBVixVQUFVLENBQWlCO0lBQy9DLENBQUM7SUFFTCxtQkFBQztBQUFELENBQUMsQUE1QkQsSUE0QkM7O0FBRUQ7OztHQUdHO0FBQ0g7SUFDSSxrQkFDb0IsRUFBVSxFQUNWLElBQVksRUFDWixLQUFhLEVBQ3RCLG1CQUFvQyxFQUFLLG9DQUFvQztJQUM3RSwyQkFBNEMsRUFBSyxzREFBc0Q7SUFDdkcsYUFBOEIsRUFDOUIsNEJBQTRHLEVBQUcsdURBQXVEO0lBQzdKLFVBQTJCO1FBUDNCLE9BQUUsR0FBRixFQUFFLENBQVE7UUFDVixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUN0Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQWlCO1FBQ3BDLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBaUI7UUFDNUMsa0JBQWEsR0FBYixhQUFhLENBQWlCO1FBQzlCLGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBZ0Y7UUFDbkcsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7SUFDL0MsQ0FBQztJQUNMLGVBQUM7QUFBRCxDQUFDLEFBWEQsSUFXQzs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUEwQkUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFkUHJvcGVydGllcywgU3RpbGxJbWFnZVJlcHJlc2VudGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vJztcbmltcG9ydCB7IEZpbGVSZXByZXNlbnRhdGlvbiB9IGZyb20gJy4uL3JlcHJlc2VudGF0aW9ucy9maWxlUmVwcmVzZW50YXRpb24nO1xuaW1wb3J0IHsgTW92aW5nSW1hZ2VSZXByZXNlbnRhdGlvbiB9IGZyb20gJy4uL21vdmluZy1pbWFnZS9tb3ZpbmctaW1hZ2UtcmVwcmVzZW50YXRpb24nO1xuaW1wb3J0IHsgUmVhZFByb3BlcnR5SXRlbSB9IGZyb20gJ0Brbm9yYS9jb3JlL3B1YmxpY19hcGknO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSAqKlJlc291cmNlKiogaW5zdGVhZFxuICpcbiAqIFJlcHJlc2VudHMgYSByZXNvdXJjZSBhbmQgaXRzIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWFkUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgdGhlIHJlc291cmNlJ3MgSXJpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSByZXNvdXJjZSdzIHR5cGUgKGNsYXNzKS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgdGhlIHJlc291cmNlJ3MgcmRmczpsYWJlbC5cbiAgICAgKiBAcGFyYW0ge0FycmF5PFJlYWRSZXNvdXJjZT59IGluY29taW5nUmVnaW9ucyByZWdpb25zIHBvaW50aW5nIHRvIHRoaXMgcmVzb3VyY2UsIGlmIGFueSAocG9zc2libHkgdG8gYmUgcXVlcmllZCBieSBhZGRpdGlvbmFsIHJlcXVlc3RzKS5cbiAgICAgKiBAcGFyYW0ge0FycmF5PFJlYWRSZXNvdXJjZT59IGluY29taW5nU3RpbGxJbWFnZVJlcHJlc2VudGF0aW9ucyBzdGlsbCBpbWFnZSByZXByZXNlbnRhdGlvbnMgcG9pbnRpbmcgdG8gdGhpcyByZXNvdXJjZSwgaWYgYW55IChwb3NzaWJseSB0byBiZSBxdWVyaWVkIGJ5IGFkZGl0aW9uYWwgcmVxdWVzdHMpLlxuICAgICAqIEBwYXJhbSB7QXJyYXk8UmVhZFJlc291cmNlPn0gaW5jb21pbmdMaW5rcyByZXNvdXJjZXMgcG9pbnRpbmcgdG8gdGhpcyByZXNvdXJjZSwgaWYgYW55IChwb3NzaWJseSB0byBiZSBxdWVyaWVkIGJ5IGFkZGl0aW9uYWwgcmVxdWVzdHMpLlxuICAgICAqIEBwYXJhbSB7U3RpbGxJbWFnZVJlcHJlc2VudGF0aW9uW119IHN0aWxsSW1hZ2VSZXByZXNlbnRhdGlvbnNUb0Rpc3BsYXkgIHN0aWxsIGltYWdlIHJlcHJlc2VudGF0aW9ucyB0byBiZSBkaXNwbGF5ZWQgZm9yIHRoaXMgcmVzb3VyY2UsIGlmIGFueSAocG9zc2libHkgdG8gYmUgcXVlcmllZCBieSBhZGRpdGlvbmFsIHJlcXVlc3RzKS5cbiAgICAgKiBAcGFyYW0ge1JlYWRQcm9wZXJ0aWVzfSBwcm9wZXJ0aWVzIHRoZSByZXNvdXJjZXMncyBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyByZWFkb25seSB0eXBlOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBsYWJlbDogc3RyaW5nLFxuICAgICAgICAvLyBUT0RPOiB3ZSBzaG91bGQgdXNlIGEgbW9yZSBnZW5lcmljIG9iamVjdCBoZXJlOyBvciB3aGF0J3MgYWJvdXQgaW5jb21pbmdTZXF1ZW5jZXM/XG4gICAgICAgIHB1YmxpYyBpbmNvbWluZ1JlZ2lvbnM6IEFycmF5PFJlYWRSZXNvdXJjZT4sXG4gICAgICAgIC8vIFRPRE86IHdlIHNob3VsZCB1c2UgYSBtb3JlIGdlbmVyaWMgb2JqZWN0IGhlcmUsIHNvbWV0aGluZyBsaWtlIGluY29taW5nTWVkaWEgb3IgaW5jb21pbmdGaWxlUmVwcmVzZW50YXRpb25cbiAgICAgICAgcHVibGljIGluY29taW5nU3RpbGxJbWFnZVJlcHJlc2VudGF0aW9uczogQXJyYXk8UmVhZFJlc291cmNlPixcbiAgICAgICAgcHVibGljIGluY29taW5nTGlua3M6IEFycmF5PFJlYWRSZXNvdXJjZT4sXG4gICAgICAgIC8vIFRPRE86IHdlIHNob3VsZCB1c2UgYSBtb3JlIGdlbmVyaWMgb2JqZWN0IGhlcmUsIHNvbWV0aGluZyBsaWtlIG1lZGlhIG9yIGZpbGVSZXByZXNlbnRhdGlvblxuICAgICAgICBwdWJsaWMgc3RpbGxJbWFnZVJlcHJlc2VudGF0aW9uc1RvRGlzcGxheTogU3RpbGxJbWFnZVJlcHJlc2VudGF0aW9uW10sXG4gICAgICAgIC8vIFRPRE86IHRoZSBwcm9wZXJ0aWVzIHNob3VsZCBiZSBhIGxpc3Q6IEFycmF5PFJlYWRQcm9wZXJ0aWVzPiBvciBub3Q/XG4gICAgICAgIHB1YmxpYyByZWFkb25seSBwcm9wZXJ0aWVzPzogUmVhZFByb3BlcnRpZXMpIHtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgdGVtcG9yYXJ5IGNsYXNzLCB0byB0ZXN0IGEgbmV3IHJlc291cmNlIHNldHVwLlxuICogV2hlbiBpdCB3b3Jrcywgd2Ugd2lsbCByZXBsYWNlIHRoZSBSZWFkUmVzb3VyY2Ugb2JqZWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaWQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyBpbmNvbWluZ0Fubm90YXRpb25zOiBBcnJheTxSZXNvdXJjZT4sICAgIC8vID0gaW5jb21pbmdSZWdpb25zIGluIFJlYWRSZXNvdXJjZVxuICAgICAgICBwdWJsaWMgaW5jb21pbmdGaWxlUmVwcmVzZW50YXRpb25zOiBBcnJheTxSZXNvdXJjZT4sICAgIC8vID0gaW5jb21pbmdTdGlsbEltYWdlUmVwcmVzZW50YXRpb25zIGluIFJlYWRSZXNvdXJjZVxuICAgICAgICBwdWJsaWMgaW5jb21pbmdMaW5rczogQXJyYXk8UmVzb3VyY2U+LFxuICAgICAgICBwdWJsaWMgZmlsZVJlcHJlc2VudGF0aW9uc1RvRGlzcGxheTogQXJyYXk8U3RpbGxJbWFnZVJlcHJlc2VudGF0aW9uIHwgTW92aW5nSW1hZ2VSZXByZXNlbnRhdGlvbiB8IFJlYWRQcm9wZXJ0eUl0ZW0+LCAgLy8gPSBzdGlsbEltYWdlUmVwcmVzZW50YXRpb25zVG9EaXNwbGF5IGluIFJlYWRSZXNvdXJjZVxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcGVydGllcz86IFJlYWRQcm9wZXJ0aWVzKSB7XG4gICAgfVxufVxuXG4vKlxuZmlsZVJlcHJlc2VudGF0aW9uc1RvRGlzcGxheSA9PT4gd2hhdCBpcyB0aGUgbWFpbiBtZWRpYSBmaWxlIHRvIGRpc3BsYXk/XG5cbmluIGNhc2Ugb2ZcblxucHJvcGVydHkuaGFzU3RpbGxJbWFnZUZpbGVcbnByb3BlcnR5Lmhhc01vdmluZ0ltYWdlRmlsZVxucHJvcGVydHkuaGFzQXVkaW9GaWxlXG5wcm9wZXJ0eS5oYXNUZXh0RmlsZVxucHJvcGVydHkuaGFzRG9jdW1lbnRGaWxlXG5wcm9wZXJ0eS5oYXNERERJbWFnZUZpbGVcblxuc2hvdyB0aGlzIG1lZGlhIGZpbGUuXG5cbk90aGVyd2lzZTpcblxucmVzb3VyY2UuaW5jb21pbmdTdGlsbEltYWdlUmVwcmVzZW50YXRpb25zP1xucmVzb3VyY2UuaW5jb21pbmdNb3ZpbmdJbWFnZVJlcHJlc2VudGF0aW9ucz9cbnJlc291cmNlLmluY29taW5nQXVkaW9SZXByZXNlbnRhdGlvbnM/XG5yZXNvdXJjZS5pbmNvbWluZ1RleHRSZXByZXNlbnRhdGlvbnM/XG5yZXNvdXJjZS5pbmNvbWluZ0RvY3VtZW50UmVwcmVzZW50YXRpb25zP1xucmVzb3VyY2UuaW5jb21pbmdERERJbWFnZVJlcHJlc2VudGF0aW9ucz9cblxuQSByZXNvdXJjZSBjYW4gaGF2ZSBtb3JlIHRoYW4gb25lIGluY29taW5nUmVwcmVzZW50YXRpb25cblxuXG4qLyJdfQ==