{"version":3,"file":"knora-core.umd.js","sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@knora/core/lib/core.module.ts","ng://@knora/core/lib/declarations/core.config.ts","ng://@knora/core/lib/declarations/api-service-result.ts","ng://@knora/core/lib/declarations/api-service-error.ts","ng://@knora/core/lib/declarations/api/knora-constants.ts","ng://@knora/core/lib/declarations/utils.ts","ng://@knora/core/lib/declarations/api/shared/strings.ts","ng://@knora/core/lib/declarations/api/shared/date.ts","ng://@knora/core/lib/declarations/api/admin/authentication/authentication-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project.ts","ng://@knora/core/lib/declarations/api/admin/groups/group.ts","ng://@knora/core/lib/declarations/api/admin/groups/group-response.ts","ng://@knora/core/lib/declarations/api/admin/groups/groups-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node.ts","ng://@knora/core/lib/declarations/api/admin/lists/list.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/lists-response.ts","ng://@knora/core/lib/declarations/api/admin/ontologies/ontology-info-short.ts","ng://@knora/core/lib/declarations/api/admin/permissions/permission-data.ts","ng://@knora/core/lib/declarations/api/admin/users/user.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-members-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/projects-response.ts","ng://@knora/core/lib/declarations/api/admin/users/users-response.ts","ng://@knora/core/lib/declarations/api/admin/users/user-response.ts","ng://@knora/core/lib/declarations/api/v2/properties/read-property-item.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resource.ts","ng://@knora/core/lib/services/api.service.ts","ng://@knora/core/lib/services/v2/ontology.service.ts","ng://@knora/core/lib/services/v2/ontology-cache.service.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resources-sequence.ts","ng://@knora/core/lib/declarations/api/v2/count-query/count-query-result.ts","ng://@knora/core/lib/declarations/api/v2/still-image/still-image-representation.ts","ng://@knora/core/lib/declarations/api/v2/still-image/image-region.ts","ng://@knora/core/lib/services/admin/groups.service.ts","ng://@knora/core/lib/services/admin/lists.service.ts","ng://@knora/core/lib/services/admin/projects.service.ts","ng://@knora/core/lib/services/admin/users.service.ts","ng://@knora/core/lib/services/admin/language.service.ts","ng://@knora/core/lib/services/admin/status-msg.service.ts","ng://@knora/core/lib/services/v2/convert-jsonld.ts","ng://@knora/core/lib/services/v2/resource.service.ts","ng://@knora/core/lib/services/v2/search.service.ts","ng://@knora/core/lib/services/v2/incoming.service.ts","ng://@knora/core/lib/services/v2/search-params.service.ts","ng://@knora/core/lib/services/v2/grav-search.service.ts","ng://@knora/core/lib/services/v2/store.service.ts","ng://@knora/core/lib/services/v2/basic-ontology.service.ts","ng://@knora/core/lib/services/v2/resource-types.service.ts","ng://@knora/core/lib/services/v2/list.service.ts","ng://@knora/core/lib/services/v2/list-cache.service.ts","ng://@knora/core/lib/declarations/api/operators.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { KuiCoreConfig } from './declarations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nexport const KuiCoreConfigToken = new InjectionToken<KuiCoreConfig>('KuiCoreConfigToken (knora.core.config)');\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: [],\n    exports: [\n        HttpClientModule\n    ]\n})\nexport class KuiCoreModule {\n    /**\n     *\n     * @param {KuiCoreConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: KuiCoreConfig): ModuleWithProviders {\n        // get the app environment configuration here\n        // console.log('KuiCoreModule - forRoot - config: ', config);\n        return {\n            ngModule: KuiCoreModule,\n            providers: [\n                {provide: KuiCoreConfigToken, useValue: config}\n            ]\n        };\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * Knora-ui core configuration with the server definitions of:\n *  - api: URL of data service e.g. knora: http://localhost:3333\n *  - media: URL of media server service e.g. sipi: http://localhost:1024\n *  - app: URL of the app e.g. salsah: http://localhost:4200\n */\n@JsonObject('KuiCoreConfig')\nexport class KuiCoreConfig {\n\n    /**\n     * name of the app e.g. 'SALSAH'\n     * @type {string}\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * url of the app e.g. 'https://salsah.org'\n     * @type {undefined}\n     */\n    @JsonProperty('app', String)\n    public app: string = undefined;\n\n    /**\n     * url of the api e.g. 'https://api.knora.org'\n     * @type {string}\n     */\n    @JsonProperty('api', String)\n    public api: string = undefined;\n\n    /**\n     * url of media/file server e.g. 'https://iiif.sipi.io'\n     * @type {string}\n     */\n    @JsonProperty('media', String)\n    public media: string = undefined;\n\n    /**\n     * url of the ontology e.g. 'http://api.02.unibas.dasch.swiss'\n     * @type {string}\n     */\n    @JsonProperty('ontologyIRI', String)\n    public ontologyIRI: string = undefined;\n\n}\n","\nimport { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\n\n/**\n * Result class used as API url response in ApiService\n */\nexport class ApiServiceResult {\n\n    private static jsonConvert: JsonConvert = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL);\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Body as JSON\n     */\n    body: any;\n\n    /**\n     * Gets the result body as instance of classObject.\n     * @param classObject\n     * @returns {any}\n     * @throws\n     */\n\n    getBody(classObject?: { new(): any }): any {\n        // console.log(this.body);\n        return ApiServiceResult.jsonConvert.deserialize(this.body, classObject);\n    }\n\n\n}\n","\n/**\n * Error class used as API response in ApiService\n */\nexport class ApiServiceError {\n\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Additional error info\n     */\n    errorInfo = '';\n\n}\n","export class KnoraConstants {\n\n    // The following version of Knora is needed to work properly with this module\n    public static KnoraVersion: string = '9.0.0';\n\n    public static KnoraApi: string = 'http://api.knora.org/ontology/knora-api';\n    public static PathSeparator: string = '#';\n\n    public static KnoraOntologyPath: string = 'http://www.knora.org/ontology';\n    public static KnoraBase: string = KnoraConstants.KnoraOntologyPath + '/knora-base';\n    public static KnoraAdmin: string = KnoraConstants.KnoraOntologyPath + '/knora-admin';\n\n    public static DefaultSharedOntologyIRI: string = KnoraConstants.KnoraAdmin + '#DefaultSharedOntologiesProject';\n    public static SystemProjectIRI: string = KnoraConstants.KnoraAdmin + '#SystemProject';\n    public static SystemAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#SystemAdmin';\n    public static ProjectAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectAdmin';\n    public static ProjectMemberGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectMember';\n\n    public static KnoraApiV2WithValueObjectPath: string = KnoraConstants.KnoraApi + '/v2' + KnoraConstants.PathSeparator;\n    public static KnoraApiV2SimplePath: string = KnoraConstants.KnoraApi + '/simple/v2' + KnoraConstants.PathSeparator;\n\n    public static SalsahGuiOntology: string = 'http://api.knora.org/ontology/salsah-gui/v2';\n\n    public static SalsahGuiOrder: string = KnoraConstants.SalsahGuiOntology + '#guiOrder';\n    public static SalsahGuiAttribute: string = KnoraConstants.SalsahGuiOntology + '#guiAttribute';\n\n\n    public static StandoffOntology: string = 'http://api.knora.org/ontology/standoff/v2';\n\n    public static Resource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Resource';\n    public static TextValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextValue';\n    public static IntValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntValue';\n    public static BooleanValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'BooleanValue';\n    public static UriValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'UriValue';\n    public static DecimalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DecimalValue';\n    public static DateValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DateValue';\n    public static ColorValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ColorValue';\n    public static GeomValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeomValue';\n    public static ListValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListValue';\n    public static IntervalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntervalValue';\n    public static LinkValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'LinkValue';\n    public static GeonameValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeonameValue';\n    public static FileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'FileValue';\n    public static AudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'AudioFileValue';\n    public static DDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DDDFileValue';\n    public static DocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DocumentFileValue';\n    public static StillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'StillImageFileValue';\n    public static MovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'MovingImageFileValue';\n    public static TextFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextFileValue';\n    public static IsResourceClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isResourceClass';\n    public static IsValueClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isValueClass';\n    public static ForbiddenResource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ForbiddenResource';\n    public static XMLToStandoffMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'XMLToStandoffMapping';\n    public static ListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListNode';\n\n    public static ArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'arkUrl';\n    public static versionArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'versionArkUrl';\n    public static ObjectType = KnoraConstants.KnoraApiV2WithValueObjectPath + 'objectType';\n\n    public static ResourceIcon: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'resourceIcon';\n    public static isEditable: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isEditable';\n    public static isLinkProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkProperty';\n    public static isLinkValueProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkValueProperty';\n    public static hasGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasGeometry';\n\n    public static schemaName: string = 'http://schema.org/name';\n    public static schemaNumberOfItems: string = 'http://schema.org/numberOfItems';\n    public static schemaItemListElement: string = 'http://schema.org/itemListElement';\n\n\n    public static RdfProperty: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property';\n    public static RdfsSchema: string = 'http://www.w3.org/2000/01/rdf-schema' + KnoraConstants.PathSeparator;\n    public static RdfsLabel: string = KnoraConstants.RdfsSchema + 'label';\n    public static RdfsComment: string = KnoraConstants.RdfsSchema + 'comment';\n    public static RdfsSubclassOf: string = KnoraConstants.RdfsSchema + 'subClassOf';\n    public static subPropertyOf: string = KnoraConstants.RdfsSchema + 'subPropertyOf';\n\n    public static owl: string = 'http://www.w3.org/2002/07/owl';\n\n    public static OwlClass: string = KnoraConstants.owl + '#Class';\n    public static OwlObjectProperty: string = KnoraConstants.owl + '#ObjectProperty';\n    public static OwlDatatypeProperty: string = KnoraConstants.owl + '#DatatypeProperty';\n    public static OwlAnnotationProperty: string = KnoraConstants.owl + '#AnnotationProperty';\n    public static OwlOnProperty: string = KnoraConstants.owl + '#onProperty';\n    public static OwlMaxCardinality: string = KnoraConstants.owl + '#maxCardinality';\n    public static OwlMinCardinality: string = KnoraConstants.owl + '#minCardinality';\n    public static OwlCardinality: string = KnoraConstants.owl + '#cardinality';\n    public static OwlRestriction: string = KnoraConstants.owl + '#Restriction';\n\n    public static creationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'creationDate';\n    public static lastModificationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'lastModificationDate';\n    public static hasPermissions: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasPermissions';\n    public static userHasPermission: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'userHasPermission';\n    public static attachedToProject: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToProject';\n    public static attachedToUser: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToUser';\n\n    public static Region: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Region';\n\n    public static ReadTextValueAsHtml: string = 'ReadTextValueAsHtml';\n    public static ReadTextValueAsString: string = 'ReadTextValueAsString';\n    public static ReadTextValueAsXml: string = 'ReadTextValueAsXml';\n    public static ReadDateValue: string = 'ReadDateValue';\n    public static ReadLinkValue: string = 'ReadLinkValue';\n    public static ReadIntegerValue: string = 'ReadIntegerValue';\n    public static ReadDecimalValue: string = 'ReadDecimalValue';\n    public static ReadStillImageFileValue: string = 'ReadStillImageFileValue';\n    public static ReadMovingImageFileValue: string = 'ReadMovingImageFileValue';\n    public static ReadAudioFileValue: string = 'ReadAudioFileValue';\n    public static ReadTextFileValue: string = 'ReadTextFileValue';\n    public static ReadGeomValue: string = 'ReadGeomValue';\n    public static ReadColorValue: string = 'ReadColorValue';\n    public static ReadUriValue: string = 'ReadUriValue';\n    public static ReadBooleanValue: string = 'ReadBooleanValue';\n    public static ReadIntervalValue: string = 'ReadIntervalValue';\n    public static ReadListValue: string = 'ReadListValue';\n\n    public static valueAsString: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'valueAsString';\n\n    public static textValueAsHtml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsHtml';\n    public static textValueAsXml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsXml';\n    public static textValueHasMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueHasMapping';\n\n    public static hasStandoffLinkToValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStandoffLinkToValue';\n\n    public static dateValueHasStartYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartYear';\n    public static dateValueHasEndYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndYear';\n    public static dateValueHasStartEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartEra';\n    public static dateValueHasEndEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndEra';\n    public static dateValueHasStartMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartMonth';\n    public static dateValueHasEndMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndMonth';\n    public static dateValueHasStartDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartDay';\n    public static dateValueHasEndDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndDay';\n    public static dateValueHasCalendar: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasCalendar';\n\n    public static linkValueHasTarget: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTarget';\n    public static linkValueHasSource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSource';\n    public static linkValueHasSourceIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSourceIri';\n    public static linkValueHasTargetIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTargetIri';\n\n    public static integerValueAsInteger: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intValueAsInt';\n\n    public static decimalValueAsDecimal: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'decimalValueAsDecimal';\n\n    public static fileValueAsUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueAsUrl';\n    public static fileValueIsPreview: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueIsPreview';\n    public static fileValueHasFilename: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueHasFilename';\n\n    public static hasStillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStillImageFileValue';\n\n    public static stillImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimX';\n    public static stillImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimY';\n    public static stillImageFileValueHasIIIFBaseUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasIIIFBaseUrl';\n\n    public static colorValueAsColor: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'colorValueAsColor';\n    public static geometryValueAsGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'geometryValueAsGeometry';\n    public static uriValueAsUri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'uriValueAsUri';\n    public static booleanValueAsBoolean: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'booleanValueAsBoolean';\n\n    public static intervalValueHasStart: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasStart';\n    public static intervalValueHasEnd: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasEnd';\n\n    public static listValueAsListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNode';\n\n    public static Xsd: string = 'http://www.w3.org/2001/XMLSchema#';\n\n    public static xsdString: string = KnoraConstants.Xsd + 'string';\n    public static xsdBoolean: string = KnoraConstants.Xsd + 'boolean';\n    public static xsdInteger: string = KnoraConstants.Xsd + 'integer';\n    public static xsdDecimal: string = KnoraConstants.Xsd + 'decimal';\n    public static xsdUri: string = KnoraConstants.Xsd + 'anyURI';\n\n    public static resourceSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Resource';\n    public static dateSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Date';\n    public static intervalSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Interval';\n    public static geomSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geom';\n    public static colorSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Color';\n    public static geonameSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geoname';\n    public static fileSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'File';\n    public static listNodeSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'ListNode';\n\n    public static matchFunction: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'match';\n\n    public static EqualsComparisonOperator: string = '=';\n    public static EqualsComparisonLabel: string = 'is equal to';\n\n    public static NotEqualsComparisonOperator: string = '!=';\n    public static NotEqualsComparisonLabel: string = 'is not equal to';\n\n    public static GreaterThanComparisonOperator: string = '>';\n    public static GreaterThanComparisonLabel: string = 'is greater than';\n\n    public static GreaterThanEqualsComparisonOperator: string = '>=';\n    public static GreaterThanEqualsComparisonLabel: string = 'is greater than equals to';\n\n    public static LessThanComparisonOperator: string = '<';\n    public static LessThanComparisonLabel: string = 'is less than';\n\n    public static LessThanEqualsComparisonOperator: string = '<=';\n    public static LessThanQualsComparisonLabel: string = 'is less than equals to';\n\n    public static ExistsComparisonOperator: string = 'E';\n    public static ExistsComparisonLabel: string = 'exists';\n\n    public static LikeComparisonOperator: string = 'regex';\n    public static LikeComparisonLabel: string = 'is like';\n\n    public static MatchComparisonOperator: string = 'contains';\n    public static MatchComparisonLabel: string = 'matches';\n\n    public static SalsahLink: string = 'salsah-link'; // class on an HTML <a> element that indicates a link to a Knora resource\n    public static RefMarker: string = 'ref-marker'; // class on an HTML element that refers to another element in the same document\n\n    public static GNDPrefix: string = '(DE-588)';\n    public static GNDResolver: string = 'http://d-nb.info/gnd/';\n\n    public static VIAFPrefix: string = '(VIAF)';\n    public static VIAFResolver: string = 'https://viaf.org/viaf/';\n\n}\n\n\nexport enum KnoraSchema {\n    complex = 0,\n    simple = 1\n}\n","/**\n * Collection of useful utility functions.\n */\nimport { KnoraConstants } from './api/knora-constants';\n\n// @dynamic\nexport class Utils {\n    /**\n     * A regex to validate Email address.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    /**\n     * A regex to validate Username.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUsername = /^[a-zA-Z0-9]+$/;\n\n    /**\n     * A regex to validate URLs.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUrl = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/i;\n\n    /**\n     * A regex to validate Passwords\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexPassword = /^(?=.*\\d)(?=.*[a-zA-Z]).{8,}$/i;\n\n    /**\n     * A regex to validate Hexadecimal values\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexHex = /^[0-9A-Fa-f]+$/;\n\n    /**\n     * A regex to validate shortname in projects\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexShortname = /^[a-zA-Z]+\\S*$/;\n\n\n    /**\n     * Lambda function eliminating duplicates in a collection to be passed to [[filter]].\n     *\n     * @param elem element of an Array that is currently being looked at.\n     * @param index current elements index.\n     * @param self reference to the whole Array.\n     * @returns {boolean} true if the same element does not already exist in the Array.\n     */\n    public static filterOutDuplicates = (elem, index: number, self) => {\n\n        // https://stackoverflow.com/questions/16747798/delete-duplicate-elements-from-an-array\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example\n\n        // returns true if the element's index equals the index of the leftmost element\n        // -> this means that there is no identical element before this index, hence it is not a duplicate\n        // for all other elements, false is returned\n        return index === self.indexOf(elem);\n\n    }\n\n    /**\n     * Given a Knora entity IRI, gets the ontology Iri.\n     *\n     * @param {string} entityIri an entity Iri.\n     * @return {string} the ontology IRI\n     */\n    public static getOntologyIriFromEntityIri(entityIri: string) {\n\n        // split class Iri on \"#\"\n        const segments: string[] = entityIri.split(KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${entityIri} is not a valid entity IRI.`);\n\n        return segments[0];\n\n    }\n\n    /**\n     * Converts a complex knora-api entity Iri to a knora-api simple entity Iri.\n     *\n     * @param {string} complexEntityIri\n     * @returns {string}\n     */\n    public static convertComplexKnoraApiEntityIritoSimple(complexEntityIri: string) {\n\n        // split entity Iri on \"#\"\n        const segments: string[] = complexEntityIri.split('v2' + KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${complexEntityIri} is not a valid entity IRI.`);\n\n        // add 'simple' to base path\n        return segments[0] + 'simple/v2' + KnoraConstants.PathSeparator + segments[1];\n\n    }\n\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('StringLiteral')\nexport class StringLiteral {\n\n    @JsonProperty('value', String, false)\n    public value: string = undefined;\n\n    @JsonProperty('language', String, true)\n    public language: string = '';\n}\n","/**\n * Precision for DateSalsah.\n */\nexport enum Precision {\n    yearPrecision,\n    monthPrecision,\n    dayPrecision\n}\n\n/**\n * Represents a Salsah date object with a precision information.\n */\nexport class DateSalsah {\n\n    private static separator = '-';\n\n    readonly precision: Precision;\n\n    constructor(\n        readonly calendar: string,\n        readonly era: string,\n        readonly year: number,\n        readonly month?: number,\n        readonly day?: number\n    ) {\n        if (this.month === undefined) {\n            // year precision\n            this.precision = Precision.yearPrecision;\n        } else if (this.day === undefined) {\n            // month precision\n            this.precision = Precision.monthPrecision;\n        } else {\n            // day precision\n            this.precision = Precision.dayPrecision;\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the date without the calendar.\n     *\n     * @returns {string}\n     */\n    getDateAsStringWithoutCalendar() {\n\n        let dateString = '(' + this.era + ') ';\n\n        switch (this.precision) {\n\n            case Precision.yearPrecision: {\n                dateString += this.year.toString();\n                break;\n            }\n\n            case Precision.monthPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month;\n                break;\n            }\n\n            case Precision.dayPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month + DateSalsah.separator + this.day;\n                break;\n            }\n\n            default: {\n                break;\n            }\n\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Returns a string representation of the date (with calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString(): string {\n\n        return this.calendar + ':' + this.getDateAsStringWithoutCalendar();\n    }\n\n}\n\n/**\n * Represents a period (with start date and end date).\n */\nexport class DateRangeSalsah {\n\n    constructor(\n        readonly start: DateSalsah,\n        readonly end: DateSalsah\n    ) {\n    }\n\n    /**\n     * Returns a string representation of the date range (with preceding calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString() {\n        return this.start.getDateAsString() + ':' + this.end.getDateAsStringWithoutCalendar();\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('AuthenticationResponse')\nexport class AuthenticationResponse {\n\n    @JsonProperty('token', String)\n    public token: string = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n\n@JsonObject('Project')\nexport class Project {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('shortname', String)\n    public shortname: string = undefined;\n\n    @JsonProperty('shortcode', String, true)\n    public shortcode: string = undefined;\n\n    @JsonProperty('longname', String, true)\n    public longname: string = undefined;\n\n    @JsonProperty('description', [StringLiteral], true)\n    public description: StringLiteral[] = [new StringLiteral()];\n\n    @JsonProperty('keywords', [String], true)\n    public keywords: string[] = undefined;\n\n    @JsonProperty('logo', String, true)\n    public logo: string = undefined;\n\n    @JsonProperty('institution', String, true)\n    public institution: string = undefined;\n\n    @JsonProperty('ontologies', [String])\n    public ontologies: string[] = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from '../projects/project';\n\n@JsonObject('Group')\nexport class Group {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('description', String)\n    public description: string = undefined;\n\n    @JsonProperty('project', Project, false)\n    public project: Project = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupResponse')\nexport class GroupResponse {\n\n    @JsonProperty('group', Group)\n    public group: Group = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupsResponse')\nexport class GroupsResponse {\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListInfo')\nexport class ListInfo {\n\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral], true)\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral], true)\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListNode')\nexport class ListNode {\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('hasRootNode', String, true)\n    public hasRootNode: string = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n\n    @JsonProperty('children', [ListNode], true)\n    public children: ListNode[] = undefined;\n\n    @JsonProperty('position', Number, true)\n    public position: number = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\nimport { ListNode } from './list-node';\n\n@JsonObject('List')\nexport class List {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n\n    @JsonProperty('children', [ListNode], false)\n    public children: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\n\n@JsonObject('ListInfoResponse')\nexport class ListInfoResponse {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n/**\n * @deprecated You should use ListNode instead\n */\n@JsonObject('ListNodeInfo')\nexport class ListNodeInfo {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n/**\n * @deprecated You should use ListNodeResponse instead\n */\n@JsonObject('ListNodeInfoResponse')\nexport class ListNodeInfoResponse {\n\n    @JsonProperty('nodeinfo', ListNode, false)\n    public nodeinfo: ListNode = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { List } from './list';\n\n@JsonObject('ListResponse')\nexport class ListResponse {\n\n    @JsonProperty('list', List, false)\n    public list: List = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n@JsonObject('ListNodeResponse')\nexport class ListNodeResponse {\n\n    @JsonProperty('nodeinfo', ListNode, false)\n    public nodeinfo: ListNode = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n@JsonObject('ListsResponse')\nexport class ListsResponse {\n\n    @JsonProperty('lists', [ListNode], false)\n    public lists: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('OntologyInfoShort')\nexport class OntologyInfoShort {\n\n    @JsonProperty('ontologyIri', String)\n    public ontologyIri: string = undefined;\n\n    @JsonProperty('ontologyName', String)\n    public ontologyName: string = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('PermissionData')\nexport class PermissionData {\n\n    @JsonProperty('groupsPerProject', Object)\n    public groupsPerProject: any = undefined;\n\n    @JsonProperty('administrativePermissionsPerProject', Object)\n    public administrativePermissionsPerProject: any = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from '../groups/group';\nimport { PermissionData } from '../permissions/permission-data';\nimport { Project } from '../projects/project';\n\n@JsonObject('User')\nexport class User {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('email', String)\n    public email: string = undefined;\n\n    @JsonProperty('username', String)\n    public username: string = undefined;\n\n    @JsonProperty('password', String, true)\n    public password: string = undefined;\n\n    @JsonProperty('token', String, true)\n    public token: string = undefined;\n\n    @JsonProperty('givenName', String)\n    public givenName: string = undefined;\n\n    @JsonProperty('familyName', String)\n    public familyName: string = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('lang', String)\n    public lang: string = undefined;\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n    @JsonProperty('sessionId', String, true)\n    public sessionId: string = undefined;\n\n    @JsonProperty('permissions', PermissionData)\n    public permissions: PermissionData = undefined;\n\n    @JsonProperty('systemAdmin', Boolean, true)\n    public systemAdmin?: boolean = false;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from '../users/user';\n\n@JsonObject('ProjectMembersResponse')\nexport class ProjectMembersResponse {\n    @JsonProperty('members', [User])\n    public members: User[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n\n@JsonObject('ProjectResponse')\nexport class ProjectResponse {\n\n    @JsonProperty('project', Project)\n    public project: Project = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n@JsonObject('ProjectsResponse')\nexport class ProjectsResponse {\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UsersResponse')\nexport class UsersResponse {\n\n    @JsonProperty('users', [User])\n    public users: User[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UserResponse')\nexport class UserResponse {\n\n    @JsonProperty('user', User)\n    public user: User = undefined;\n}\n","import { ReadResource } from '../resources/read-resource';\nimport { OntologyInformation } from '../../../../services';\nimport { KnoraConstants } from '../../knora-constants';\nimport { DateRangeSalsah, DateSalsah } from '../../shared/date';\n\n/**\n * An abstract interface representing any value object.\n */\nexport interface ReadPropertyItem {\n\n    /**\n     * The value object's Iri.\n     */\n    readonly id: string;\n\n    /**\n     * The value object's type.\n     */\n    readonly type: string;\n\n    /**\n     * The property pointing to the value object.\n     */\n    readonly propIri: string;\n\n    /**\n     * Gets the class name of the class that implements this interface.\n     *\n     * @returns {string}\n     */\n    getClassName(): string;\n\n    /**\n     * Gets the value as a string (complexity of the value possibly reduced).\n     *\n     * @returns {string}\n     */\n    getContent(): string;\n}\n\n/**\n * Abstract class representing a text value object with or without markup.\n */\nexport abstract class ReadTextValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string = KnoraConstants.TextValue;\n\n    abstract propIri: string;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a text value object without markup (mere character string).\n */\nexport class ReadTextValueAsString extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly str: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsString;\n    }\n\n    getContent() {\n        return this.str;\n    }\n}\n\n/**\n * Represents resources referred to by standoff links.\n */\nexport class ReferredResourcesByStandoffLink {\n    [index: string]: ReadResource;\n}\n\n/**\n * Represents a text value object with markup that has been turned into HTML.\n */\nexport class ReadTextValueAsHtml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly html: string, readonly referredResources: ReferredResourcesByStandoffLink) {\n        super();\n    }\n\n    /**\n     * Gets information about a resource referred to by a standoff link from a text value.\n     *\n     * @param {string} resourceIri the Iri of the referred resource.\n     * @param {OntologyInformation} ontologyInfo ontology information.\n     * @returns {string} information about the referred resource's class and its label.\n     */\n\n\n    getReferredResourceInfo(resourceIri: string, ontologyInfo: OntologyInformation) {\n        if (this.referredResources !== undefined && this.referredResources[resourceIri] !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResources[resourceIri].type);\n\n            return this.referredResources[resourceIri].label + ` (${resClassLabel})`;\n        } else {\n            return 'no information found about referred resource (target of standoff link)';\n        }\n    }\n\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsHtml;\n    }\n\n    getContent() {\n        return this.html;\n    }\n\n}\n\n/**\n * Represents a text value object with markup as XML.\n */\nexport class ReadTextValueAsXml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly xml: string, readonly mappingIri: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsXml;\n    }\n\n    getContent() {\n        return this.xml;\n    }\n\n}\n\n\n/**\n * Represents a date value object.\n */\nexport class ReadDateValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly calendar: string,\n        readonly startYear: number,\n        readonly endYear: number,\n        readonly startEra: string,\n        readonly endEra: string,\n        readonly startMonth?: number,\n        readonly endMonth?: number,\n        readonly startDay?: number,\n        readonly endDay?: number) {\n    }\n\n    readonly type = KnoraConstants.DateValue;\n\n    private separator = '/';\n\n    getDateSalsah(): DateSalsah | DateRangeSalsah {\n        if (this.startYear === this.endYear && this.startMonth === this.endMonth && this.startDay === this.endDay && this.startEra === this.endEra) {\n            // precise date\n            return new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay);\n        } else {\n            // date period\n            return new DateRangeSalsah(new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay), new DateSalsah(this.calendar, this.endEra, this.endYear, this.endMonth, this.endDay));\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadDateValue;\n    }\n\n    getContent() {\n        return this.getDateSalsah().getDateAsString();\n    }\n}\n\n/**\n * Represents a link value object (reification).\n */\nexport class ReadLinkValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly referredResourceIri: string, readonly referredResource?: ReadResource) {\n\n    }\n\n    readonly type = KnoraConstants.LinkValue;\n\n    getReferredResourceInfo(ontologyInfo: OntologyInformation) {\n        if (this.referredResource !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResource.type);\n\n            return this.referredResource.label + ` (${resClassLabel})`;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadLinkValue;\n    }\n\n    getContent() {\n        if (this.referredResource !== undefined) {\n            return this.referredResource.label;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n}\n\n/**\n * Represents an integer value object.\n */\nexport class ReadIntegerValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly integer: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntegerValue;\n    }\n\n    getContent() {\n        return this.integer.toString();\n    }\n\n}\n\n/**\n * Represents a decimal value object.\n */\nexport class ReadDecimalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly decimal: number) {\n\n    }\n\n    readonly type = KnoraConstants.DecimalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDecimalValue;\n    }\n\n    getContent() {\n        return this.decimal.toString();\n    }\n}\n\n/**\n * Represents a still image value object.\n */\nexport class ReadStillImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly imageFilename: string,\n        readonly imageServerIIIFBaseURL: string,\n        readonly imagePath: string,\n        readonly dimX: number,\n        readonly dimY: number) {\n\n        // if the image is a jpeg, it is a preview image\n        this.isPreview = imageFilename.endsWith('.jpg');\n\n    }\n\n    readonly type = KnoraConstants.StillImageFileValue;\n\n    readonly isPreview: boolean;\n\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.imagePath;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.imageServerIIIFBaseURL + '/' + this.imageFilename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadStillImageFileValue;\n    }\n\n    getContent() {\n        return this.imagePath;\n    }\n}\n\n/**\n * Represents a moving image value object.\n */\nexport class ReadMovingImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly filename: string,\n        readonly mediaServerIIIFBaseURL: string,\n        readonly path: string,\n        readonly dimX: number,\n        readonly dimY: number,\n        readonly duration: number,\n        readonly fps?: number,\n        readonly aspectRatio?: string) {\n\n    }\n\n    readonly type = KnoraConstants.MovingImageFileValue;\n\n    // preview doesn't include the video file itself\n    readonly isPreview: boolean;\n\n    /*\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.path;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.mediaServerIIIFBaseURL + '/' + this.filename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n    */\n\n    getClassName(): string {\n        return KnoraConstants.ReadMovingImageFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a text representation value object\n */\nexport class ReadTextFileValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly textFilename: string, readonly textFileURL: string) {\n\n    }\n\n    readonly type = KnoraConstants.TextFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextFileValue;\n    }\n\n    getContent() {\n        return this.textFileURL;\n    }\n\n}\n\n/**\n * Represents a color value object.\n */\nexport class ReadColorValue implements ReadPropertyItem {\n\n    constructor(readonly id: string,\n        readonly propIri,\n        readonly colorHex: string) {\n    }\n\n    readonly type = KnoraConstants.ColorValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadColorValue;\n    }\n\n    getContent() {\n        return this.colorHex;\n    }\n}\n\n/**\n * Represents a point in a 2D-coordinate system (for geometry values).\n */\nexport class Point2D {\n    constructor(public x: number, public y: number) {\n    }\n}\n\n/**\n * Represents a geometry value parsed from JSON.\n */\nexport class RegionGeometry {\n    constructor(public status: string,\n        public lineColor: string,\n        public lineWidth: number,\n        public points: Point2D[],\n        public type: string,\n        public radius?: Point2D\n    ) {\n    }\n}\n\n/**\n * Represents a geometry value object.\n */\nexport class ReadGeomValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly geometryString: string) {\n\n        const geometryJSON = JSON.parse(geometryString);\n\n        const points: Point2D[] = [];\n        for (const point of geometryJSON.points) {\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        let radius;\n        if (geometryJSON.radius) {\n            radius = new Point2D(geometryJSON.radius.x, geometryJSON.radius.y);\n        }\n\n        this.geometry = new RegionGeometry(\n            geometryJSON.status,\n            geometryJSON.lineColor,\n            geometryJSON.lineWidth,\n            points,\n            geometryJSON.type,\n            radius\n        );\n\n    }\n\n    readonly geometry: RegionGeometry;\n\n    readonly type = KnoraConstants.GeomValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadGeomValue;\n    }\n\n    getContent() {\n        return this.geometryString;\n    }\n}\n\n/**\n * Represents a URI value object.\n */\nexport class ReadUriValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly uri: string) {\n\n    }\n\n    readonly type = KnoraConstants.UriValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadUriValue;\n    }\n\n    getContent() {\n        return this.uri;\n    }\n\n}\n\n/**\n * Represents a Boolean value object.\n */\nexport class ReadBooleanValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly bool: boolean) {\n\n    }\n\n    readonly type = KnoraConstants.BooleanValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadBooleanValue;\n    }\n\n    getContent() {\n        return this.bool.toString();\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadIntervalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly intervalStart: number, readonly intervalEnd: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntervalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntervalValue;\n    }\n\n    getContent() {\n        return this.intervalStart.toString() + '-' + this.intervalEnd;\n    }\n\n}\n\n/**\n * Represents a list value object.\n */\nexport class ReadListValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly listNodeIri: string) {\n\n    }\n\n    readonly type = KnoraConstants.ListValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadListValue;\n    }\n\n    getContent() {\n        return this.listNodeIri;\n    }\n\n}\n","import { ReadProperties, StillImageRepresentation } from '../../../';\n\n/**\n * Represents a resource and its properties.\n */\nexport class ReadResource {\n\n    /**\n     *\n     * @param {string} id the resource's Iri.\n     * @param {string} type the resource's type (class).\n     * @param {string} label the resource's rdfs:label.\n     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).\n     * @param {ReadProperties} properties the resources's properties.\n     */\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        // TODO: we should use a more generic object here; or what's about incomingSequences?\n        public incomingRegions: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation\n        public incomingStillImageRepresentations: Array<ReadResource>,\n        public incomingLinks: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like media or fileRepresentation\n        public stillImageRepresentationsToDisplay: StillImageRepresentation[],\n        // TODO: the properties should be a list: Array<ReadProperties> or not?\n        public readonly properties?: ReadProperties) {\n    }\n\n}\n\n/**\n * This is a temporary class, to test a new resource setup.\n * When it works, we will merge it with the ReadResource object\n */\nexport class Resource {\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        public incomingAnnotations: Array<Resource>,\n        public incomingFileRepresentations: Array<Resource>,\n        public incomingLinks: Array<ReadResource>,\n        public fileRepresentationsToDisplay: Array<ReadResource>,\n        public readonly properties?: ReadProperties) {\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceError } from '../declarations/api-service-error';\nimport { ApiServiceResult } from '../declarations/api-service-result';\nimport { from } from 'rxjs';\nimport { KuiCoreConfigToken } from '../core.module';\nimport { KnoraConstants } from '../declarations/api/knora-constants';\n\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\nconst semver = require('semver');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport abstract class ApiService {\n\n    // if is loading, set it true;\n    // it can be used in components\n    // for progress loader element\n    loading = false;\n\n    protected constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config) {\n\n        // console.log('ApiService constructor: config', config);\n    }\n\n    /**\n     * GET\n     *\n     * @param {string} path the URL for the GET request.\n     * @param {HttpParams} params the parameters for the GET request.\n     * @returns Observable of any\n     */\n    httpGet(path: string, params?: HttpParams): Observable<any> {\n\n        this.loading = true;\n\n        return this.http.get(this.config.api + path, { observe: 'response', params: params }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(response.headers.get('Server'));\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * Processes JSON-LD returned by Knora.\n     * Expands Iris and creates an empty context object.\n     *\n     * @param {ApiServiceResult} resourceResponse\n     */\n    protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n        const resPromises = jsonld.promises;\n        // compact JSON-LD using an empty context: expands all Iris\n        const resPromise = resPromises.compact(resourceResponse.body, {});\n\n        // convert promise to Observable and return it\n        // https://www.learnrxjs.io/operators/creation/frompromise.html\n        return from(resPromise);\n\n    }\n\n    /**\n     * POST\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPost(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.post(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * PUT\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPut(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.put(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n    /**\n     * DELETE\n     *\n     * @param {string} path\n     * @returns Observable of any\n     */\n    httpDelete(path: string): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.delete(this.config.api + path, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param {HttpErrorResponse} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        // console.error(error);\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n\n    /**\n     * handle json error in case of type error in json response (json2typescript)\n     *\n     * @param {any} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n        if (error instanceof ApiServiceError) return throwError(error);\n\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = -1;\n        serviceError.statusText = 'Invalid JSON';\n        serviceError.errorInfo = error;\n        serviceError.url = '';\n        return throwError(serviceError);\n\n    }\n\n    protected compareVersion(server: string): void {\n\n        // expected knora api version\n        const expected: string = KnoraConstants.KnoraVersion;\n\n        // existing knora api version\n        if (server) {\n            const versions: string[] = server.split(' ');\n            const existing: string = versions[0].split('/')[1];\n\n            // compare the two versions: expected vs existing\n            if (semver.diff(existing, expected) === 'major') {\n                console.warn('The version of the @knora/core module works with Knora v' + expected + ', but you are using it with Knora v' + existing);\n            }\n        } else {\n            // console.warn('No server information from headers response');\n        }\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { NewOntology } from '../../declarations/api/v2/ontology/new-ontology';\nimport { ApiService } from '../api.service';\nimport { NewResourceClass } from '../../declarations/api/v2/ontology/new-resource-class';\nimport { NewProperty } from '../../declarations/api/v2/ontology/new-property';\n\n/**\n * Requests ontology information from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------\n\n    /**\n     * DEPRECATED: You should use getAllOntologies()\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getOntologiesMetadata(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getAllOntologies(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the ontologies of a specific project\n     *\n     * @param projectIri\n     * @returns Observable<ApiServiceResult> - the metadata of project ontologies.\n     */\n    getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // GET ontology\n    // ------------------------------------------------------------------------\n\n    /**\n     * Requests all entity definitions for the given ontologies from Knora's ontologies route.\n     *\n     * @param {string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.\n     * @returns Observable<ApiServiceResult> - the requested ontology.\n     */\n    getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n    }\n\n    /**\n     * Requests information about the given resource classes from Knora's ontologies route.\n     *\n     * @param {string[]} resourceClassIris the Iris of the resource classes to be queried.\n     * @returns Observable<ApiServiceResult> - the requested resource class definitions.\n     */\n    getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n        if (resourceClassIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n        }\n\n        let resClassUriEnc = '';\n\n        resourceClassIris.forEach(function (resClassIri) {\n            resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n    }\n\n    /**\n     * Requests properties from Knora's ontologies route.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be queried.\n     * @returns Observable<ApiServiceResult> - the requested properties.\n     */\n    getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n        if (propertyIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n        }\n\n        let propertiesUriEnc = '';\n\n        propertyIris.forEach(function (resClassIri) {\n            propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new ontology.\n     *\n     * @param {NewOntology} data Data contains: projectIri, name, label\n     * @returns Observable<ApiServiceResult> incl. ontolog iri and knora-api:lastModificationDate\n     */\n    createOntology(data: NewOntology): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies';\n\n        const ontology = {\n            'knora-api:ontologyName': data.name,\n            'knora-api:attachedToProject': {\n                '@id': data.projectIri,\n            },\n            'rdfs:label': data.label,\n            '@context': {\n                'rdfs': KnoraConstants.RdfsSchema,\n                'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n            }\n        };\n\n        return this.httpPost(path, ontology).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    createResourceClass(data: NewResourceClass): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/classes';\n\n        // TODO: add the following values to parameter\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        const resourceClass = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [{\n                '@id': onto_name + ':' + data.name,\n                '@type': 'owl:Class',\n                'rdfs:label': data.labels,\n                'rdfs:comment': data.comments,\n                'rdfs:subClassOf': {\n                    '@id': data.subClassOf\n                }\n            }],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n\n        };\n\n        return this.httpPost(path, resourceClass).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    createProperty(data: NewProperty[]): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/properties';\n\n        // TODO: add the following values to parameter\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        const graph = [];\n\n        for (const prop of data) {\n            const prop_obj = {\n                '@id': onto_name + ':' + prop.name,\n                '@type': 'owl:ObjectProperty',\n                'rdfs:label': prop.labels,\n                'rdfs:comment': prop.comments,\n                'rdfs:subPropertyOf': prop.subPropertyOf,\n                'salsah-gui:guiElement': {\n                    '@id': prop.guiElement\n                }\n            };\n            graph.push(prop_obj);\n        }\n\n        const property = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [\n                graph\n            ],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'salsah-gui': 'http://api.knora.org/ontology/salsah-gui/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n        };\n\n\n        return this.httpPost(path, property).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    setCardinality(data: any): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/cardinalities';\n\n        // TODO: add the following values to parameter\n        let class_iri: string;\n        let prop_iri: string;\n\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        // TODO: find a way with typescript for the following python construct\n        /*\n        let switcher = {\n            '1': ('owl:cardinality', 1),\n            '0-1': ('owl:maxCardinality', 1),\n            '0-n': ('owl:minCardinality', 0),\n            '1-n': ('owl:minCardinality', 1)\n        };\n\n        let occurrence: any = switcher.get(data.occurrence);\n        */\n\n        const cardinality = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [{\n                '@id': class_iri,\n                '@type': 'owl:Class',\n                'rdfs:subClassOf': {\n                    '@type': 'owl:Restriction',\n                    // occurrence[0]: occurrence[1],\n                    'owl:onProperty': {\n                        '@id': prop_iri\n                    }\n                }\n            }],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n        };\n\n        return this.httpPost(path, cardinality).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { Utils } from '../../declarations/utils';\nimport { OntologyService } from './ontology.service';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n/**\n * Represents an error occurred in OntologyCacheService.\n */\nclass OntologyCacheError extends Error {\n\n    constructor(readonly message: string) {\n        super(message);\n    }\n}\n\n\n/**\n * Represents an ontology's metadata.\n */\nexport class OntologyMetadata {\n\n    /**\n     * @hideconstructor\n     *\n     * @param {string} id Iri identifying the ontology.\n     * @param {string} label a label describing the ontology.\n     */\n    constructor(readonly id: string,\n        readonly label: string) {\n\n    }\n\n}\n\n\n/**\n * Occurrence of a property for a resource class (its cardinality).\n */\nexport enum CardinalityOccurrence {\n    minCard = 0,\n    card = 1,\n    maxCard = 2\n}\n\n\n/**\n * Cardinality of a property for the given resource class.\n */\nexport class Cardinality {\n\n    /**\n     * @param {CardinalityOccurrence} occurrence type of given occurrence.\n     * @param {number} value numerical value of given occurrence.\n     * @param {string} property the property the given occurrence applies to.\n     */\n    constructor(readonly occurrence: CardinalityOccurrence,\n        readonly value: number,\n        readonly property: string) {\n    }\n}\n/**\n * Property gui order\n */\nexport class GuiOrder {\n    /**\n     * @param  {number} value\n     * @param  {string} property\n     */\n    constructor(readonly value: number,\n        readonly property: string\n    ) {\n\n    }\n}\n\n/**\n * A resource class definition.\n */\nexport class ResourceClass {\n\n    /**\n     * @param {string} id Iri identifying the resource class.\n     * @param {string} icon path to an icon representing the resource class.\n     * @param {string} comment comment on the resource class.\n     * @param {string} label label describing the resource class.\n     * @param {Cardinality[]} cardinalities the resource class's properties.\n     * @param {GuiOrder[]} guiOrder the resource class's gui-order properties.\n     */\n    constructor(readonly id: string,\n        readonly icon: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly cardinalities: Array<Cardinality>,\n        readonly guiOrder: Array<GuiOrder>) {\n\n    }\n}\n\n\n/**\n * A map of resource class Iris to resource class definitions.\n */\nexport class ResourceClasses {\n    [index: string]: ResourceClass;\n}\n\n\n/**\n * A property definition.\n */\nexport class Property {\n\n    /**\n     * @param {string} id Iri identifying the property definition.\n     * @param {string} objectType the property's object constraint.\n     * @param {string} comment comment on the property definition.\n     * @param {string} label label describing the property definition.\n     * @param {string[]} subPropertyOf Iris of properties the given property is a subproperty of.\n     * @param {boolean} isEditable indicates whether the given property can be edited by the client.\n     * @param {boolean} isLinkProperty indicates whether the given property is a linking property.\n     * @param {boolean} isLinkValueProperty indicates whether the given property refers to a link value.\n     * @param {string} guiAttribute the gui attribute assigned to this property, if any.\n     */\n    constructor(readonly id: string,\n                readonly objectType: string,\n                readonly comment: string,\n                readonly label: string,\n                readonly subPropertyOf: Array<string>,\n                readonly isEditable: Boolean,\n                readonly isLinkProperty: Boolean,\n                readonly isLinkValueProperty: Boolean,\n                readonly guiAttribute: string[]) {\n    }\n}\n\n\n/**\n * A map of property Iris to property definitions.\n */\nexport class Properties {\n    [index: string]: Property;\n}\n\n\n/**\n * Groups resource classes by the ontology they are defined in.\n *\n * A map of ontology Iris to an array of resource class Iris.\n */\nexport class ResourceClassIrisForOntology {\n    [index: string]: Array<string>;\n}\n\n\n/**\n * Represents cached ontology information (only used by this service internally).\n * This cache is updated whenever new definitions are requested from Knora.\n *\n * Requested ontology information by a service is represented by [[OntologyInformation]].\n */\nclass OntologyCache {\n\n    /**\n     * @param {OntologyMetadata[]} ontologies An array of all existing ontologies.\n     */\n    ontologies: Array<OntologyMetadata>;\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassIrisForOntology list of all resource class Iris for a named graph.\n     */\n    resourceClassIrisForOntology: ResourceClassIrisForOntology;\n\n    /**\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     */\n    resourceClasses: ResourceClasses;\n\n    /**\n     * @param {Properties} properties property definitions.\n     */\n    properties: Properties;\n\n    constructor() {\n        this.ontologies = [];\n\n        this.resourceClassIrisForOntology = new ResourceClassIrisForOntology();\n\n        this.resourceClasses = new ResourceClasses();\n\n        this.properties = new Properties();\n    }\n}\n\n/**\n * Represents ontology information requested from this service.\n *\n * For every request, an instance of this class is returned containing the requested information.\n */\nexport class OntologyInformation {\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassesForOntology all resource class Iris for a given ontology.\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     * @param {Properties} properties property definitions.\n     */\n    constructor(\n        private resourceClassesForOntology: ResourceClassIrisForOntology,\n        private resourceClasses: ResourceClasses,\n        private properties: Properties) {\n    }\n\n    /**\n     * Sorts an array of `ResourceClass` or `Property` by label.\n     *\n     * @param a first element\n     * @param b second element\n     * @return negative -1 if the first element is considered lower than the second, 1 if the second element is considered bigger, 0 if they are equal\n     */\n    static sortFunc(a: ResourceClass | Property, b: ResourceClass | Property) {\n        // dealing with 'undefined' labels\n        if (a.label === undefined) {\n            return 1;\n        } else if (b.label === undefined) {\n            return -1;\n        }\n\n        const labelA = a.label.toLowerCase();\n        const labelB = b.label.toLowerCase();\n\n        if (labelA < labelB) {\n            return -1;\n        } else if (labelA > labelB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Merge the given [[OntologyInformation]] into the current instance,\n     * updating the existing information.\n     * This is necessary when a service like the search fetches new results\n     * that have to be added to an existing collection.\n     * The existing ontology information must not be lost.\n     *\n     * @param {OntologyInformation} ontologyInfo the given definitions that have to be integrated.\n     * @returns void\n     */\n    updateOntologyInformation(ontologyInfo: OntologyInformation): void {\n\n        // get new resourceClassIrisForOntology\n        const newResourceClassesForOntology: ResourceClassIrisForOntology = ontologyInfo.getResourceClassForOntology();\n\n        // update new resourceClassIrisForOntology\n        // tslint:disable-next-line:forin\n        for (const newResClassForOntology in newResourceClassesForOntology) {\n            this.resourceClassesForOntology[newResClassForOntology] = newResourceClassesForOntology[newResClassForOntology];\n        }\n\n        // get new resource class definitions\n        const newResourceClasses = ontologyInfo.getResourceClasses();\n\n        // update resourceClasses\n        // tslint:disable-next-line:forin\n        for (const newResClass in newResourceClasses) {\n            this.resourceClasses[newResClass] = newResourceClasses[newResClass];\n        }\n\n        // get new property definitions\n        const newProperties = ontologyInfo.getProperties();\n\n        // update properties\n        // tslint:disable-next-line:forin\n        for (const newProp in newProperties) {\n            this.properties[newProp] = newProperties[newProp];\n        }\n\n    }\n\n    /**\n     * Returns resource class definitions for ontologies.\n     *\n     * @returns ResourceClassIrisForOntology - all resource class definitions grouped by ontologies.\n     */\n    getResourceClassForOntology(): ResourceClassIrisForOntology {\n        return this.resourceClassesForOntology;\n    }\n\n    /**\n     * Returns all resource classes as an object.\n     *\n     * @returns ResourceClasses - all resource class definitions as an object.\n     */\n    getResourceClasses(): ResourceClasses {\n        return this.resourceClasses;\n    }\n\n    /**\n     * Returns all resource classes as an array.\n     *\n     * @param {boolean} sortAsc sort resource classes by label in ascending order by default\n     * @returns ResourceClass[]\n     */\n    getResourceClassesAsArray(sortAsc: boolean = true): Array<ResourceClass> {\n\n        const resClasses: Array<ResourceClass> = [];\n\n        // tslint:disable-next-line:forin\n        for (const resClassIri in this.resourceClasses) {\n            const resClass: ResourceClass = this.resourceClasses[resClassIri];\n            resClasses.push(resClass);\n        }\n\n        // resourceClasses order by label in ascending order\n        resClasses.sort(OntologyInformation.sortFunc);\n\n        // resourceClasses order by label in descending order\n        if (!sortAsc) {\n            resClasses.reverse();\n        }\n\n        return resClasses;\n\n    }\n\n    /**\n     * Returns a resource class's label.\n     *\n     * @param {string} resClass resource class to query for.\n     * @returns string - the resource class's label.\n     */\n    getLabelForResourceClass(resClass: string): string {\n\n        if (resClass !== undefined) {\n\n            const resClassDef: ResourceClass = this.resourceClasses[resClass];\n\n            if (resClassDef !== undefined && resClassDef.label !== undefined) {\n                return resClassDef.label;\n            } else {\n                console.log(`cannot get label for ${resClass}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForResourceClass without argument resClass');\n        }\n    }\n\n    /**\n     * Returns all properties as an object.\n     *\n     * @returns Properties - all properties as an object.\n     */\n    getProperties(): Properties {\n        return this.properties;\n    }\n\n    /**\n     * Returns all properties as an array.\n     *\n     * @param {boolean} sortAsc sort properties by label in ascending order by default\n     * @returns Property[] - all properties as an array.\n     */\n    getPropertiesAsArray(sortAsc: boolean = true): Array<Property> {\n\n        const properties: Array<Property> = [];\n\n        // tslint:disable-next-line:forin\n        for (const propIri in this.properties) {\n            const prop: Property = this.properties[propIri];\n            properties.push(prop);\n        }\n\n        // properties order by label in ascending order\n        properties.sort(OntologyInformation.sortFunc);\n\n        // properties order by label in descending order\n        if (!sortAsc) {\n            properties.reverse();\n        }\n\n        return properties;\n\n    }\n\n    /**\n     * Returns a property's label.\n     *\n     * @param {string} property to query for.\n     * @returns string - the property's label.\n     */\n    getLabelForProperty(property: string): string {\n\n        if (property !== undefined) {\n\n            const propDef: Property = this.properties[property];\n\n            if (propDef !== undefined && propDef.label !== undefined) {\n                return propDef.label;\n            } else {\n                console.log(`cannot get label for ${property}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForProperty without argument property');\n        }\n    }\n\n}\n\n\n/**\n * Requests ontology information from Knora and caches it.\n * Other components or services obtain ontology information through this service.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class OntologyCacheService {\n\n    /**\n     * Ontologies ingored by this service.\n     * @param {string[]} excludedOntologies\n     */\n    private excludedOntologies: Array<string> = [KnoraConstants.SalsahGuiOntology, KnoraConstants.StandoffOntology];\n\n    /**\n     * @param {string[]} excludedProperties properties that Knora is not responsible for and that have to be ignored because they cannot be resolved at the moment.\n     */\n    private excludedProperties: Array<string> = [KnoraConstants.RdfsLabel];\n\n    /**\n     * @param {string[]} nonResourceClasses class definitions that are not be treated as Knora resource classes\n     */\n    private nonResourceClasses: Array<string> = [KnoraConstants.ForbiddenResource, KnoraConstants.XMLToStandoffMapping, KnoraConstants.ListNode];\n\n    /**\n     * @param {OntologyCache} cacheOntology central instance that caches all definitions\n     */\n    private cacheOntology: OntologyCache = new OntologyCache();\n\n    constructor(private _ontologyService: OntologyService) {\n    }\n\n    /**\n     * Requests the metadata of all ontologies from Knora.\n     *\n     * @returns Observable<object> - metadata for all ontologies as JSON-LD (no prefixes, all Iris fully expanded).\n     */\n    private getOntologiesMetadataFromKnora(): Observable<object> {\n\n        return this._ontologyService.getOntologiesMetadata().pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Requests all entity definitions (resource classes and properties) for the given ontology from Knora.\n     *\n     * @param {string} ontologyIri the Iri of the requested ontology.\n     * @returns Observable<object> - metadata for all entity definitions for ontology from Knora.\n     */\n    private getAllEntityDefinitionsForOntologyFromKnora(ontologyIri: string): Observable<object> {\n\n        return this._ontologyService.getAllEntityDefinitionsForOntologies(ontologyIri).pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Writes all the ontologies' metadata returned by Knora to the cache.\n     *\n     * @param {object[]} ontologies metadata of all existing ontologies as JSON-LD.\n     * @returns a new OntologyMetadata object\n     */\n    private convertAndWriteOntologiesMetadataToCache(ontologies: object[]) {\n\n        this.cacheOntology.ontologies = ontologies.map(\n            ontology => {\n                return new OntologyMetadata(ontology['@id'], ontology[KnoraConstants.RdfsLabel]);\n            }\n        );\n    }\n\n    /**\n     * Returns all ontologies' metadata from the cache and returns them.\n     *\n     * @returns Array<OntologyMetadata> - metadata of all existing ontologies.\n     */\n    private getAllOntologiesMetadataFromCache(): Array<OntologyMetadata> {\n\n        return this.cacheOntology.ontologies;\n\n    }\n\n    /**\n     * Returns resource class Iris from the ontology response.\n     * `knora-api:Resource` will be excluded.\n     *\n     * @param {Array<object>} classDefinitions the class definitions in an ontology response.\n     * @returns string[] - resource class Iris from the given class definitions.\n     */\n    private getResourceClassIrisFromOntologyResponse(classDefinitions: Array<object>): string[] {\n        const resourceClassIris: string[] = [];\n\n        for (const classDef of classDefinitions) {\n            const classIri = classDef['@id'];\n\n            // check that class name is not listed as a non resource class and that the isResourceClass flag is present and set to true\n            if (\n                classIri !== KnoraConstants.Resource && this.nonResourceClasses.indexOf(classIri)\n                === -1 && (classDef[KnoraConstants.IsResourceClass] !== undefined && classDef[KnoraConstants.IsResourceClass] === true)) {\n                // it is not a value class, but a resource class definition\n                resourceClassIris.push(classIri);\n            }\n        }\n\n        return resourceClassIris;\n    }\n\n    /**\n     * Converts a Knora response for all entity definitions for the requested ontology\n     * into an internal representation and caches it.\n     *\n     * Knora automatically includes the property definitions referred to in the cardinalities of resource classes.\n     * If they are defined in another ontology, that ontology is requested from Knora too.\n     *\n     * @param {Object} ontology the ontology to be cached.\n     * @returns void\n     */\n    private convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology: object): void {\n\n        const graph = ontology['@graph'];\n\n        // get all class definitions\n        const classDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlClass;\n            });\n\n        // get all property definitions\n        const propertyDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlObjectProperty ||\n                    entityType === KnoraConstants.OwlDatatypeProperty ||\n                    entityType === KnoraConstants.OwlAnnotationProperty ||\n                    entityType === KnoraConstants.RdfProperty;\n            });\n\n\n        // cache all resource class Iris belonging to the current ontology\n        this.cacheOntology.resourceClassIrisForOntology[ontology['@id']] = this.getResourceClassIrisFromOntologyResponse(classDefs);\n\n        // write class and property defintions to cache\n        this.convertAndWriteEntityDefinitionsToCache(classDefs, propertyDefs);\n\n    }\n\n    /**\n     * Returns definitions for the requested ontologies from the cache.\n     *\n     * @param {string[]} ontologyIris the ontologies for which definitions should be returned.\n     * @returns Observable<OntologyInformation> - the definitions for the requested ontologies.\n     */\n    private getOntologyInformationFromCache(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const resourceClassesForOntology = new ResourceClassIrisForOntology();\n\n        // collect resource class Iris for all requested named graphs\n        let allResourceClassIris = [];\n\n        for (const ontologyIri of ontologyIris) {\n\n            if (this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined) {\n                throw new OntologyCacheError(`getResourceClassesForOntologiesFromCache: ontology not found in cache: ${ontologyIri}`);\n            }\n\n            // add information for the given ontology\n            resourceClassesForOntology[ontologyIri] = this.cacheOntology.resourceClassIrisForOntology[ontologyIri];\n\n            // add all resource class Iris of this ontology\n            allResourceClassIris = allResourceClassIris.concat(this.cacheOntology.resourceClassIrisForOntology[ontologyIri]);\n        }\n\n        // get resource class definitions for all requested ontologies\n        return this.getResourceClassDefinitions(allResourceClassIris).pipe(\n            map(\n                resClassDefs => {\n                    return new OntologyInformation(\n                        resourceClassesForOntology, resClassDefs.getResourceClasses(), resClassDefs.getProperties()\n                    );\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora ontology response into an internal representation and caches it.\n     *\n     * @param {object[]} resourceClassDefinitions the resource class definitions returned by Knora.\n     * @param {object[]} propertyClassDefinitions the property definitions returned by Knora.\n     * @returns void\n     */\n    private convertAndWriteEntityDefinitionsToCache(resourceClassDefinitions: Array<object>, propertyClassDefinitions: Array<object>): void {\n\n        // convert and cache each given resource class definition\n        for (const resClass of resourceClassDefinitions) {\n\n            const resClassIri = resClass['@id'];\n\n            // represents all cardinalities of this resource class\n            const cardinalities: Cardinality[] = [];\n            const guiOrder: GuiOrder[] = [];\n\n            if (resClass[KnoraConstants.RdfsSubclassOf] !== undefined) {\n\n                let subclassOfCollection;\n\n                // check if it is a single object or a collection\n                if (!Array.isArray(resClass[KnoraConstants.RdfsSubclassOf])) {\n                    subclassOfCollection = [resClass[KnoraConstants.RdfsSubclassOf]];\n                } else {\n                    subclassOfCollection = resClass[KnoraConstants.RdfsSubclassOf];\n                }\n\n\n\n                // get cardinalities for the properties of a resource class\n                for (const curCard of subclassOfCollection) {\n\n\n\n                    // make sure it is a cardinality (it could also be an Iri of a superclass)\n                    if (curCard instanceof Object && curCard['@type'] !== undefined && curCard['@type'] === KnoraConstants.OwlRestriction) {\n\n                        let newCard;\n\n                        // get occurrence\n                        if (curCard[KnoraConstants.OwlMinCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.minCard, curCard[KnoraConstants.OwlMinCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.card, curCard[KnoraConstants.OwlCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlMaxCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.maxCard, curCard[KnoraConstants.OwlMaxCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else {\n                            // no known occurrence found\n                            throw new TypeError(`cardinality type invalid for ${resClass['@id']} ${curCard[KnoraConstants.OwlOnProperty]}`);\n                        }\n\n                        // add cardinality\n                        cardinalities.push(newCard);\n\n                        // get gui order\n                        let newGuiOrder;\n                        if (curCard[KnoraConstants.SalsahGuiOrder] !== undefined) {\n                            newGuiOrder = new GuiOrder(curCard[KnoraConstants.SalsahGuiOrder], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                            // add gui order\n                            guiOrder.push(newGuiOrder);\n                        }\n\n\n\n                    }\n\n                }\n            }\n\n            const resClassObj = new ResourceClass(\n                resClassIri,\n                resClass[KnoraConstants.ResourceIcon],\n                resClass[KnoraConstants.RdfsComment],\n                resClass[KnoraConstants.RdfsLabel],\n                cardinalities,\n                guiOrder\n            );\n\n            // write this resource class definition to the cache object\n            this.cacheOntology.resourceClasses[resClassIri] = resClassObj;\n        }\n\n        // cache the property definitions\n        this.convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyClassDefinitions);\n    }\n\n    /**\n     * Gets information about resource classes from the cache.\n     * The answer includes the property definitions referred to by the cardinalities of the given resource classes.\n     *\n     * @param {string[]} resClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - an [[OntologyCache]] representing the requested resource classes.\n     */\n    private getResourceClassDefinitionsFromCache(resClassIris: string[]): Observable<OntologyInformation> {\n        // collect the definitions for each resource class from the cache\n\n        const resClassDefs = new ResourceClasses();\n\n        // collect the properties from the cardinalities of the given resource classes\n        const propertyIris = [];\n\n        resClassIris.forEach(\n            resClassIri => {\n                resClassDefs[resClassIri] = this.cacheOntology.resourceClasses[resClassIri];\n\n                this.cacheOntology.resourceClasses[resClassIri].cardinalities.forEach(\n                    card => {\n                        // get property definition for each cardinality\n                        propertyIris.push(card.property);\n                    }\n                );\n            });\n\n        return this.getPropertyDefinitions(propertyIris).pipe(\n            map(\n                propDefs => {\n                    return new OntologyInformation(new ResourceClassIrisForOntology(), resClassDefs, propDefs.getProperties());\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora response for ontology information about properties\n     * into an internal representation and cache it.\n     *\n     * @param {object[]} propertyDefinitionsFromKnora the property definitions returned by Knora\n     * @returns void\n     */\n    private convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyDefinitionsFromKnora: Array<object>): void {\n\n        // convert and cache each given property definition\n        for (const propDef of propertyDefinitionsFromKnora) {\n\n            const propIri = propDef['@id'];\n\n            let isEditable = false;\n            if (propDef[KnoraConstants.isEditable] !== undefined && propDef[KnoraConstants.isEditable] === true) {\n                isEditable = true;\n            }\n\n            let isLinkProperty = false;\n            if (propDef[KnoraConstants.isLinkProperty] !== undefined && propDef[KnoraConstants.isLinkProperty] === true) {\n                isLinkProperty = true;\n            }\n\n            let isLinkValueProperty = false;\n            if (propDef[KnoraConstants.isLinkValueProperty] !== undefined && propDef[KnoraConstants.isLinkValueProperty] === true) {\n                isLinkValueProperty = true;\n            }\n\n            let subPropertyOf = [];\n            if (propDef[KnoraConstants.subPropertyOf] !== undefined && Array.isArray(propDef[KnoraConstants.subPropertyOf])) {\n                subPropertyOf = propDef[KnoraConstants.subPropertyOf].map((superProp: Object) => superProp['@id']);\n            } else if (propDef[KnoraConstants.subPropertyOf] !== undefined) {\n                subPropertyOf.push(propDef[KnoraConstants.subPropertyOf]['@id']);\n            }\n\n            let objectType;\n            if (propDef[KnoraConstants.ObjectType] !== undefined) {\n                objectType = propDef[KnoraConstants.ObjectType]['@id'];\n            }\n\n            const guiAttribute = [];\n            if (propDef[KnoraConstants.SalsahGuiAttribute] !== undefined) {\n                if (Array.isArray(propDef[KnoraConstants.SalsahGuiAttribute])) {\n                    for (const attr of propDef[KnoraConstants.SalsahGuiAttribute]) {\n                        guiAttribute.push(attr);\n                    }\n                } else {\n                    guiAttribute.push(propDef[KnoraConstants.SalsahGuiAttribute]);\n                }\n            }\n\n            // cache property definition\n            this.cacheOntology.properties[propIri] = new Property(\n                propIri,\n                objectType,\n                propDef[KnoraConstants.RdfsComment],\n                propDef[KnoraConstants.RdfsLabel],\n                subPropertyOf,\n                isEditable,\n                isLinkProperty,\n                isLinkValueProperty,\n                guiAttribute\n            );\n\n        }\n\n    }\n\n    /**\n     * Returns property definitions from the cache.\n     *\n     * @param {string[]} propertyIris the property definitions to be returned.\n     * @returns OntologyInformation - requested property defintions.\n     */\n    private getPropertyDefinitionsFromCache(propertyIris: string[]): OntologyInformation {\n\n        const propertyDefs = new Properties();\n\n        propertyIris.forEach(\n            propIri => {\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return;\n                }\n\n                if (this.cacheOntology.properties[propIri] === undefined) {\n                    throw new OntologyCacheError(`getPropertyDefinitionsFromCache: property not found in cache: ${propIri}`);\n                }\n\n                propertyDefs[propIri] = this.cacheOntology.properties[propIri];\n            }\n        );\n\n        return new OntologyInformation(new ResourceClassIrisForOntology(), new ResourceClasses(), propertyDefs);\n\n    }\n\n    /**\n     * Returns metadata about all ontologies.\n     *\n     * @returns Observable<Array<OntologyMetadata>> - metadata about all ontologies.\n     */\n    public getOntologiesMetadata(): Observable<Array<OntologyMetadata>> {\n\n        if (this.cacheOntology.ontologies.length === 0) {\n            // nothing in cache yet, get metadata from Knora\n            return this.getOntologiesMetadataFromKnora().pipe(\n                map(\n                    metadata => {\n                        this.convertAndWriteOntologiesMetadataToCache(metadata['@graph'].filter((onto) => {\n                            // ignore excluded ontologies\n                            return this.excludedOntologies.indexOf(onto['@id']) === -1;\n                        }));\n                        return this.getAllOntologiesMetadataFromCache();\n                    }\n                )\n            );\n        } else {\n            // return metadata from cache\n            return of(this.getAllOntologiesMetadataFromCache());\n        }\n\n    }\n\n\n    /**\n     * Requests the requested ontologies from Knora, adding them to the cache.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be requested.\n     * @returns Observable<any[]>\n     */\n    private getAndCacheOntologies(ontologyIris: string[]): Observable<any[]> {\n\n        // array to be populated with Observables\n        const observables = [];\n\n        // do a request for each ontology\n        ontologyIris.forEach(ontologyIri => {\n            // push an Observable onto `observables`\n            observables.push(this.getAllEntityDefinitionsForOntologyFromKnora(ontologyIri).pipe(\n                map(\n                    (ontology: object) => {\n                        // write response to cache\n                        this.convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology);\n                    }\n                )\n            ));\n        });\n\n        // forkJoin returns an Observable of an array of results\n        // returned by each Observable contained in `observables`\n        // a subscription to the Observable returned by forkJoin is executed\n        // once all Observables have been completed\n        return forkJoin(observables);\n    }\n\n\n    /**\n     * Returns the entity definitions for the requested ontologies.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be queried.\n     * @returns Observable<OntologyInformation> - all ontology metadata from the cache\n     */\n    public getEntityDefinitionsForOntologies(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const ontologyIrisToQuery = ontologyIris.filter(\n            ontologyIri => {\n                // return the ontology Iris that are not cached yet\n                return this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined;\n            });\n\n        // get ontologies that are mot cached yet\n        if (ontologyIrisToQuery.length > 0) {\n\n            return this.getAndCacheOntologies(ontologyIrisToQuery).pipe(\n                mergeMap(\n                    () => {\n                        // executed once all ontologies have been cached\n                        return this.getOntologyInformationFromCache(ontologyIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getOntologyInformationFromCache(ontologyIris);\n        }\n\n    }\n\n    /**\n     * Returns the definitions for the given resource class Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * Properties contained in the cardinalities will be returned too.\n     *\n     * @param {string[]} resourceClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - the requested resource classes (including properties).\n     */\n    public getResourceClassDefinitions(resourceClassIris: string[]): Observable<OntologyInformation> {\n\n        const resClassIrisToQueryFor: string[] = resourceClassIris.filter(\n            resClassIri => {\n\n                // return the resource class Iris that are not cached yet\n                return this.cacheOntology.resourceClasses[resClassIri] === undefined;\n\n            });\n\n        if (resClassIrisToQueryFor.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing resource classes\n            const ontologyIris: string[] = resClassIrisToQueryFor.map(\n                resClassIri => {\n                    return Utils.getOntologyIriFromEntityIri(resClassIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                mergeMap(\n                    () => {\n\n                        return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n\n        }\n    }\n\n    /**\n     * Get definitions for the given property Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be returned .\n     * @returns Observable<OntologyInformation> - the requested property definitions.\n     */\n    public getPropertyDefinitions(propertyIris: string[]): Observable<OntologyInformation> {\n\n        const propertiesToQuery: string[] = propertyIris.filter(\n            propIri => {\n\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return false;\n                }\n\n                // return the property Iris that are not cached yet\n                return this.cacheOntology.properties[propIri] === undefined;\n            }\n        );\n\n        if (propertiesToQuery.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing properties\n            const ontologyIris: string[] = propertiesToQuery.map(\n                propIri => {\n                    return Utils.getOntologyIriFromEntityIri(propIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                map(\n                    results => {\n                        if (results) {\n                            return this.getPropertyDefinitionsFromCache(propertyIris);\n                        } else {\n                            throw new Error('Problem with: return this.getPropertyDefinitionsFromCache(propertyIris);');\n                        }\n                    }\n                )\n            );\n        } else {\n            return of(this.getPropertyDefinitionsFromCache(propertyIris));\n        }\n    }\n\n}\n","import { ReadResource } from './read-resource';\nimport { OntologyInformation } from '../../../../services/v2/ontology-cache.service';\n\n/**\n * Represents a sequence of resources.\n */\nexport class ReadResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `ReadResource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<ReadResource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor (public readonly resources: Array<ReadResource>, public readonly numberOfResources: number) {\n    }\n\n}\n","/**\n * Represents the result of a count query.\n */\nexport class CountQueryResult {\n\n    /**\n     *\n     * @param numberOfResults total number of results for a query.\n     */\n    constructor(public readonly numberOfResults: number) {\n\n    }\n}\n","import { ReadStillImageFileValue } from '../properties/read-property-item';\nimport { ImageRegion } from './image-region';\n\n/**\n * Represents an image including its regions.\n */\n\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param {ReadStillImageFileValue} stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param {ImageRegion[]} regions the regions belonging to the image.\n     */\n    constructor(readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: ImageRegion[]) {\n\n    }\n\n}\n","import { ReadGeomValue } from '../properties/read-property-item';\nimport { ReadResource } from '../resources/read-resource';\nimport { KnoraConstants } from '../../knora-constants';\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\n\nexport class ImageRegion {\n\n    /**\n     *\n     * @param {ReadResource} regionResource a resource of type Region\n     */\n    constructor(readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns {ReadGeomValue[]}\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, Group, GroupResponse, GroupsResponse } from '../../declarations/';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about group from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupsService extends ApiService {\n\n    private path: string = '/admin/groups';\n\n    /**\n     * Return a list of all groups.\n     *\n     * @returns Observable<Group[]>\n     */\n    getAllGroups(): Observable<Group[]> {\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a group object (filter by IRI).\n     *\n     * @param {string} iri\n     * @returns Observable<Group>\n     */\n    getGroupByIri(iri: string): Observable<Group> {\n        this.path += '/' + encodeURIComponent(iri);\n\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupResponse).group),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // get group members needs the following api path:\n    // /admin/groups/<groupIri>/members\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, List, ListCreatePayload, ListInfo, ListInfoResponse, ListInfoUpdatePayload, ListNode, ListNodeResponse, ListNodeUpdatePayload, ListResponse, ListsResponse } from '../../declarations';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about lists from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all lists.\n     *\n     * @param {string} [projectIri]\n     * @returns Observable<ListNode[]>\n     */\n    getLists(projectIri?: string): Observable<ListNode[]> {\n        let newPath = this.path;\n        if (projectIri) {\n            newPath += '?projectIri=' + encodeURIComponent(projectIri);\n        }\n        return this.httpGet(newPath).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list object.\n     *\n     * @param {string} listIri\n     * @returns Observable<List>\n     */\n    getList(listIri: string): Observable<List> {\n        return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list info object.\n     *\n     * @param {string} listIri\n     * @returns Observable<ListInfo>\n     */\n    getListInfo(listIri: string): Observable<ListInfo> {\n        return this.httpGet(this.path + '/infos/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list node info object.\n     *\n     * @param {string} nodeIri\n     * @returns Observable<ListNode>\n     */\n    getListNodeInfo(nodeIri: string): Observable<ListNode> {\n        return this.httpGet(this.path + '/nodes/' + encodeURIComponent(nodeIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new list.\n     *\n     * @param {ListCreatePayload} payload\n     * @returns Observable<List>\n     */\n    createList(payload: ListCreatePayload): Observable<List> {\n        return this.httpPost(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Create new list node.\n     *\n     * @param {string} listIri\n     * @param {ListNodeUpdatePayload} payload\n     * @returns Observable<ListNode>\n     */\n    createListItem(listIri: string, payload: ListNodeUpdatePayload): Observable<ListNode> {\n        return this.httpPost(this.path + '/' + encodeURIComponent(listIri), payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit list data.\n     *\n     * @param {ListInfoUpdatePayload} payload\n     * @returns Observable<ListInfo>\n     */\n    updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n        return this.httpPut(this.path + '/infos/' + encodeURIComponent(payload.listIri), payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { ApiServiceResult, Project, ProjectMembersResponse, ProjectResponse, ProjectsResponse, User } from '../../declarations/';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about projects from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all projects.\n     *\n     * @returns Observable<Project[]>\n     */\n    getAllProjects(): Observable<Project[]> {\n        return this.httpGet('/admin/projects').pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    getProjectByIri(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortname(shortname: string): Observable<Project> {\n        const url = '/admin/projects/shortname/' + shortname;\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortcode(shortcode: string): Observable<Project> {\n        const url = '/admin/projects/shortcode/' + shortcode;\n        return this.getProject(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<Project>\n     */\n    protected getProject(url: string): Observable<Project> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is project id (iri).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByIri(iri: string): Observable<User[]> {\n        const url = '/admin/projects/iri/' + encodeURIComponent(iri) + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortname.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortname(shortname: string): Observable<User[]> {\n        const url = '/admin/projects/shortname/' + shortname + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortcode.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n        const url = '/admin/projects/shortcode/' + shortcode + '/members';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project member retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<User[]>\n     */\n     private getProjectMembers(url: string): Observable<User[]> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new project.\n     *\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    createProject(data: any): Observable<Project> {\n        const url: string = '/admin/projects';\n        return this.httpPost(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit project data.\n     *\n     * @param {string} iri identifier of the project\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    updateProject(iri: string, data: any): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate project (if it was deleted).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    activateProject(iri: string): Observable<Project> {\n        const data: any = {\n            status: true\n        };\n\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete (set inactive) project.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    deleteProject(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpDelete(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../api.service';\nimport {\n    ApiServiceResult,\n    Group,\n    GroupsResponse,\n    User,\n    UserResponse,\n    UsersResponse\n} from '../../declarations/';\n\n/**\n * This service uses the Knora admin API and handles all user data.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all users.\n     *\n     * @returns Observable<User[]>\n     */\n    getAllUsers(): Observable<User[]> {\n        return this.httpGet('/admin/users').pipe(\n            map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by username, email or by iri.\n     * @ignore\n     *\n     * @param  {string} identifier username, email or by iri\n     * @param  {String} identifierType\n     * @returns Observable<User>\n     */\n    getUser(identifier: string, identifierType: String): Observable<User> {\n        const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by IRI\n     *\n     * @param  {string} iri\n     * @returns Observable<User>\n     */\n    getUserByIri(iri: string): Observable<User> {\n        return this.getUser(iri, 'iri');\n    }\n\n    /**\n     * Get user by email\n     *\n     * @param  {string} email\n     * @returns Observable<User>\n     */\n    getUserByEmail(email: string): Observable<User> {\n        return this.getUser(email, 'email');\n    }\n\n    /**\n     * Get user by username.\n     *\n     * @param  {string} username\n     * @returns Observable<User>\n     */\n    getUserByUsername(username: string): Observable<User> {\n        return this.getUser(username, 'username');\n    }\n\n    /**\n     * Get all groups, where the user is member of\n     *\n     * @param  {string} userIri\n     * @returns Observable<Group[]>\n     */\n    getUsersGroupMemberships(userIri: string): Observable<Group[]> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new user.\n     *\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    createUser(data: any): Observable<User> {\n        const path = '/admin/users';\n        return this.httpPost(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Remove user from project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Delete user from the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    addUserToGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    /**\n     * remove user from project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    removeUserFromGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n\n    /**\n     * Add user to the admin system.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    addUserToSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': true\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n\n    }\n\n    /**\n     * Remove user from the admin system.\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    removeUserFromSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': false\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n    }\n\n    /**\n     * Update user system admin membership\n     * @ignore\n     *\n     * @param {string} userIri\n     * @param {any} data\n     *\n     * @returns Observable<User>\n     */\n    private updateUserSystemAdmin(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    activateUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';\n\n        const data: any = {\n            status: true\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Update own password.\n     *\n     * @param {string} userIri\n     * @param {string} oldPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: oldPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update password of another user (not own).\n     *\n     * @param {string} userIri\n     * @param {string} requesterPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: requesterPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update basic user information: given name, family name\n     * @param userIri\n     * @param data\n     * @returns Observable<User>\n     */\n    updateBasicUserInformation(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete / deactivate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    deleteUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  private subject = new Subject<any>();\n\n  setLanguage(lang: string) {\n    this.subject.next({ var: lang });\n  }\n  getLanguage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KuiCoreConfig } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusMsgService {\n\n  constructor(private _http: HttpClient,\n    @Inject(KuiCoreConfigToken) public config) {\n  }\n\n  /**\n  * this method get the status messages from the statusMsg.json file\n  * which are defined here: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  * and here: http://www.w3schools.com/tags/ref_httpmessages.asp\n  *\n  */\n  getStatusMsg(): Observable<any> {\n\n    return this._http.get(this.config.app + '/assets/i18n/statusMsg.json')\n      .pipe(map(\n        (res: any) => {\n          return res;\n        },\n        err => {\n          console.error(err);\n        }\n      )\n      );\n\n  }\n}\n","import {\n    CountQueryResult,\n    KnoraConstants,\n    ReadBooleanValue,\n    ReadColorValue,\n    ReadDateValue,\n    ReadDecimalValue,\n    ReadGeomValue,\n    ReadIntegerValue,\n    ReadIntervalValue,\n    ReadLinkValue,\n    ReadListValue,\n    ReadProperties,\n    ReadPropertyItem,\n    ReadResource,\n    ReadResourcesSequence,\n    ReadStillImageFileValue,\n    ReadTextFileValue,\n    ReadTextValueAsHtml,\n    ReadTextValueAsString,\n    ReadTextValueAsXml,\n    ReadUriValue,\n    ReferredResourcesByStandoffLink,\n    Utils\n} from '../../declarations';\n\n/**\n * Contains methods to convert JSON-LD representing resources and properties to classes.\n * These methods works only for instances of resources and properties, not for ontologies (data model).\n */\nexport module ConvertJSONLD {\n\n    /**\n     * Function to be passed to a filter used on an array of property names\n     * sorting out all non value property names.\n     *\n     * Gets all property names that refer to value objects.\n     *\n     * @param propName the name of a property to be checked.\n     * @returns boolean - indicating if the name refers to a value property.\n     */\n    const getPropertyNames = (propName) => {\n        return propName !== '@id'\n            && propName !== '@type'\n            && propName !== KnoraConstants.RdfsLabel\n            && propName !== KnoraConstants.attachedToProject\n            && propName !== KnoraConstants.attachedToUser\n            && propName !== KnoraConstants.creationDate\n            && propName !== KnoraConstants.lastModificationDate\n            && propName !== KnoraConstants.hasPermissions\n            && propName !== KnoraConstants.userHasPermission\n            && propName !== KnoraConstants.ArkUrl\n            && propName !== KnoraConstants.versionArkUrl;\n    };\n\n\n    /**\n     * Constructs a [[ReadResource]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an a resource and its properties serialized as JSON-LD.\n     * @returns ReadResource\n     */\n    function constructReadResource(resourceJSONLD: object): ReadResource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new ReadResource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            properties\n        );\n    }\n\n    /**\n     * Constructs a [[ReadPropertyItem]] from JSON-LD,\n     * taking into account the property's value type.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {Object} propValue the value serialized as JSON-LD.\n     * @param {string} propIri the Iri of the property.\n     * @param {ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.\n     * @returns a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.\n     */\n    function createValueSpecificProp(\n        propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n        // convert a JSON-LD property value to a `ReadPropertyItem`\n\n        let valueSpecificProp: ReadPropertyItem;\n\n        // check for the property's value type\n        switch (propValue['@type']) {\n            case KnoraConstants.TextValue:\n                // a text value might be given as plain string, html or xml.\n                let textValue: ReadPropertyItem;\n\n                if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                    textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n                } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                    const referredResources: ReferredResourcesByStandoffLink = {};\n\n                    // check for standoff links and include referred resources, if any\n                    // when the user interacts with a standoff link, further information about the referred resource can be shown\n                    for (const standoffLink of standoffLinkValues) {\n                        const referredRes: ReadResource = standoffLink.referredResource;\n                        referredResources[referredRes.id] = referredRes;\n                    }\n\n                    textValue = new ReadTextValueAsHtml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                    );\n                } else if (\n                    propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                    textValue = new ReadTextValueAsXml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                    );\n                } else {\n                    // expected text value members not defined\n                    console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n                }\n\n                valueSpecificProp = textValue;\n                break;\n\n            case KnoraConstants.DateValue:\n                const dateValue = new ReadDateValue(propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.dateValueHasCalendar],\n                    propValue[KnoraConstants.dateValueHasStartYear],\n                    propValue[KnoraConstants.dateValueHasEndYear],\n                    propValue[KnoraConstants.dateValueHasStartEra],\n                    propValue[KnoraConstants.dateValueHasEndEra],\n                    propValue[KnoraConstants.dateValueHasStartMonth],\n                    propValue[KnoraConstants.dateValueHasEndMonth],\n                    propValue[KnoraConstants.dateValueHasStartDay],\n                    propValue[KnoraConstants.dateValueHasEndDay]);\n\n                valueSpecificProp = dateValue;\n                break;\n\n            case KnoraConstants.LinkValue:\n\n                let linkValue: ReadLinkValue;\n\n                // check if the referred resource is given as an object or just as an IRI\n                if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                    // linkValueHasTarget contains the object\n\n                    const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n                } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                    // linkValueHasTargetIri contains the resource's Iri\n\n                    const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n                } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // linkValueHasSource contains the object\n\n                    const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n                } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                    // linkValueHasSourceIri contains the resource's Iri\n\n                    const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n                }\n\n                valueSpecificProp = linkValue;\n                break;\n\n            case KnoraConstants.IntValue:\n\n                const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n                valueSpecificProp = intValue;\n\n                break;\n\n            case KnoraConstants.DecimalValue:\n\n                // a decimal value is represented as a string in order to preserve its precision\n                const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n                const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n                valueSpecificProp = decimalValue;\n\n                break;\n\n            // TODO: handle movingImageFileValue and the others here...\n            case KnoraConstants.StillImageFileValue:\n\n                const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.stillImageFileValueHasDimX],\n                    propValue[KnoraConstants.stillImageFileValueHasDimY]\n                );\n\n                valueSpecificProp = stillImageFileValue;\n\n                break;\n\n            case KnoraConstants.TextFileValue:\n\n                const textFileValue = new ReadTextFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = textFileValue;\n\n                break;\n\n            case KnoraConstants.ColorValue:\n\n                const readColorValue: ReadColorValue = new ReadColorValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.colorValueAsColor]\n                );\n\n                valueSpecificProp = readColorValue;\n\n                break;\n\n            case KnoraConstants.GeomValue:\n\n                const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.geometryValueAsGeometry]\n                );\n\n                valueSpecificProp = readGeomValue;\n\n                break;\n\n            case KnoraConstants.UriValue:\n\n                const uriValue: ReadUriValue = new ReadUriValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.uriValueAsUri]['@value']\n                );\n\n                valueSpecificProp = uriValue;\n\n                break;\n\n            case KnoraConstants.BooleanValue:\n\n                const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.booleanValueAsBoolean]\n                );\n\n                valueSpecificProp = boolValue;\n\n                break;\n\n\n            case KnoraConstants.IntervalValue:\n\n                // represented as strings to preserve precision\n                const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n                const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n                const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                    propValue['@id'],\n                    propIri,\n                    intStart,\n                    intEnd\n                );\n\n                valueSpecificProp = intervalValue;\n\n                break;\n\n            case KnoraConstants.ListValue:\n\n                const listValue: ReadListValue = new ReadListValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.listValueAsListNode]['@id']\n                );\n\n                valueSpecificProp = listValue;\n\n                break;\n\n            default:\n                // unsupported value type\n                console.error('ERROR: value type not implemented yet: ' + propValue['@type'] + '(' + propValue['@id'] + ')');\n                break;\n        }\n\n        return valueSpecificProp;\n\n    }\n\n\n    /**\n     * Construct a [[ReadProperties]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an object describing the resource and its properties.\n     * @returns ReadProperties\n     */\n    function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n        // JSON-LD representing standoff link values\n        // text values may contain standoff links\n        const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n        // to be populated with standoff link values\n        const standoffLinkValues: ReadLinkValue[] = [];\n\n        // convert each standoff link value JSON-LD object to a ReadLinkValue\n        // in order populate the collection with all the standoff link values\n        if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n            for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n                const standoffVal: ReadLinkValue = createValueSpecificProp(\n                    standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n                ) as ReadLinkValue;\n\n                standoffLinkValues.push(standoffVal);\n            }\n        } else if (standoffLinkValuesJSONLD !== undefined) {\n            const standoffVal = createValueSpecificProp(\n                standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n\n        let propNames = Object.keys(resourceJSONLD);\n\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const properties: ReadProperties = {};\n\n        // iterate over all the given property names\n        for (const propName of propNames) {\n\n            const propValues: Array<ReadPropertyItem> = [];\n\n            // either an array of values or just one value is given\n            if (Array.isArray(resourceJSONLD[propName])) {\n                // array of values\n\n                // for each property name, an array of property values is given, iterate over it\n                for (const propValue of resourceJSONLD[propName]) {\n\n                    // convert a JSON-LD property value to a `ReadPropertyItem`\n                    const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                    // if it is undefined, the value could not be constructed correctly\n                    // add the property value to the array of property values\n                    if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n                }\n            } else {\n                // only one value\n\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n            }\n\n            // add the property to the properties object\n            properties[propName] = propValues;\n\n        }\n\n        return properties;\n    }\n\n    /**\n     * Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.\n     * @returns ReadResourcesSequence - sequence of read resources\n     */\n    export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n        const resources: Array<ReadResource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ReadResourcesSequence(resources, numberOfResources);\n\n    }\n\n    /**\n     * Collects all the types (classes) of referred resources from a given resource (from its linking properties).\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD JSON-LD describing one resource.\n     * @return string[] - an Array of resource class Iris (including duplicates).\n     */\n    function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n        let propNames = Object.keys(resourceJSONLD);\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const referredResourceClasses = [];\n\n        for (const prop of propNames) {\n\n            // several values given for this property\n            if (Array.isArray(resourceJSONLD[prop])) {\n\n                for (const referredRes of resourceJSONLD[prop]) {\n\n                    // if the property is a LinkValue and it contains an embedded resource, get its type\n                    if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                        // target resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                    } else if (\n                        referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                        // source resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                    }\n\n                }\n            } else {\n                // only one value given for this property\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                    !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                    !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n                }\n            }\n\n        }\n\n        return referredResourceClasses;\n\n    }\n\n    /**\n     * Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.\n     * @returns string[] - the resource class Iris (without duplicates).\n     */\n    export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n        let resourceClasses: Array<string> = [];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n\n            for (const resourceJSONLD of resourcesGraph) {\n                // get class of the current resource\n                resourceClasses.push(resourceJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n            }\n\n        } else {\n            // only one resource\n\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                return [];\n            } else {\n                resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n            }\n        }\n\n        // filter out duplicates\n        return resourceClasses.filter(Utils.filterOutDuplicates);\n\n    }\n\n    /**\n     * Turns a JSON-LD response to a count query into a `CountQueryResult`.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param countQueryJSONLD\n     * @returns {CountQueryResult}\n     */\n    export function createCountQueryResult(countQueryJSONLD: object) {\n        return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceError, ApiServiceResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\n/**\n * Requests representation of resources from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns Observable<ApiServiceResult>\n     */\n    getResource(iri): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource as a `ReadResourceSequence`.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        // TODO: handle case of an ApiServiceError\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n    // TODO: post, put, delete\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceResult, CountQueryResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\nexport interface FulltextSearchParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n\n    limitToStandoffClass?: string;\n}\n\nexport interface SearchByLabelParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n}\n\n/**\n * Performs searches (fulltext or extended) and search count queries into Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor(public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Assign fulltext search params to http params.\n     *\n     * @param {FulltextSearchParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processFulltextSearchParams(params: FulltextSearchParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToStandoffClass !== undefined) {\n            searchParams = searchParams.set('limitToStandoffClass', params.limitToStandoffClass);\n        }\n\n        return searchParams;\n\n    }\n    /**\n     * Assign search by label search params to http params.\n     *\n     * @param {SearchByLabelParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processSearchByLabelParams(params: SearchByLabelParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        return searchParams;\n\n    }\n\n    /**\n     * Converts a JSON-LD object to a `ReadResorceSequence`.\n     * To be passed as a function pointer (arrow notation required).\n     *\n     * @param {Object} resourceResponse\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ReadResourceSequence\n        const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ReadResourceSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search.\n     * TODO: mark as deprecated, use of `doFullTextSearchReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearch(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ReadResourcesSequence> {\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res: Observable<any> = this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search count query.\n     * TODO: mark as deprecated, use of `doFullTextSearchCountQueryCountQueryResult` recommended\n     *\n     * @param searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearchCountQuery(searchTerm: string, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<CountQueryResult>\n     */\n    doFullTextSearchCountQueryCountQueryResult(searchTerm: string, params?: FulltextSearchParams): Observable<CountQueryResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        return this.httpPost('/v2/searchextended', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search count query.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param {string} gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label.\n     * TODO: mark as deprecated, use of `searchByLabelReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabel(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        // httpGet() expects only one argument, not 2\n        return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label and turns the results in a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabelReadResourceSequence(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ReadResourcesSequence> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { ReadResourcesSequence } from '../../declarations';\n\n/**\n * Requests incoming information (regions, links, stillImageRepresentations) from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IncomingService extends SearchService {\n\n    /**\n    * Returns all incoming regions for a particular resource.\n    *\n    * @param {string} resourceIRI the Iri of the resource whose Incoming regions should be returned.\n    * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n    * @returns {Observable<any>}\n    */\n    getIncomingRegions(resourceIRI: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n        // console.log('sparqlQueryStr ', sparqlQueryStr);\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n    /**\n     * Returns all the StillImageRepresentations for the given resource, if any.\n     * StillImageRepresentations link to the given resource via knora-base:isPartOf.\n     *\n     * @param {string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n\n    }\n\n\n    /**\n     * Returns all incoming links for the given resource Iri but incoming regions and still image representations.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinksForResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n/**\n * Represents the parameters of an extended search.\n */\nexport class ExtendedSearchParams {\n\n    /**\n     *\n     * @param generateGravsearch a function that generates a Gravsearch query.\n     *\n     *                           The function takes the offset\n     *                           as a parameter and returns a Gravsearch query string.\n     *                           Returns false if not set correctly (init state).\n     */\n    constructor(public generateGravsearch: (offset: number) => string | boolean) {\n\n    }\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\n/**\n * Temporarily stores the parameters of an extended search.\n */\nexport class SearchParamsService {\n\n    private _currentSearchParams;\n\n    constructor() {\n        // init with a dummy function that returns false\n        // if the application is reloaded, this will be returned\n        this._currentSearchParams = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => false));\n    }\n\n    /**\n     * Updates the parameters of an extended search.\n     *\n     * @param {ExtendedSearchParams} searchParams\n     * @returns void\n     */\n    changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n        this._currentSearchParams.next(searchParams);\n    }\n\n    /**\n     * Gets the search params of an extended search.\n     *\n     * @returns ExtendedSearchParams - search parameters\n     */\n    getSearchParams(): ExtendedSearchParams {\n        return this._currentSearchParams.getValue();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExtendedSearchParams, SearchParamsService } from './search-params.service';\nimport { KnoraConstants, KnoraSchema } from '../../declarations';\nimport { PropertyWithValue } from '../../declarations/api/operators';\n\n/**\n * Create GravSearch queries from provided parameters.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GravsearchGenerationService {\n\n    /**\n     * @ignore\n     *\n     * Map of complex knora-api value types to simple ones.\n     * Use computed property name: http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer.\n     */\n    public static typeConversionComplexToSimple = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.xsdInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.xsdDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.xsdBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.xsdString,\n        'http://api.knora.org/ontology/knora-api/v2#DateValue': KnoraConstants.dateSimple,\n        'http://api.knora.org/ontology/knora-api/v2#IntervalValue': KnoraConstants.intervalSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeomValue': KnoraConstants.geomSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ColorValue': KnoraConstants.colorSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeonameValue': KnoraConstants.geonameSimple,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.xsdUri,\n        'http://api.knora.org/ontology/knora-api/v2#StillImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#FileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DDDFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#AudioFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DocumentFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#TextFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listNodeSimple\n    };\n\n    public static complexTypeToProp = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.integerValueAsInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.decimalValueAsDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.booleanValueAsBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.valueAsString,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.uriValueAsUri,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listValueAsListNode\n    };\n\n    constructor(private _searchParamsService: SearchParamsService) { }\n\n    /**\n     * Generates a Gravsearch query from the provided arguments.\n     *\n     * @param {PropertyWithValue[]} properties the properties specified by the user.\n     * @param {string} [mainResourceClassOption] the class of the main resource, if specified.\n     * @param {number} offset the offset to be used (nth page of results).\n     * @returns string - a KnarQL query string.\n     */\n    createGravsearchQuery(properties: PropertyWithValue[], mainResourceClassOption?: string, offset: number = 0): string {\n\n        // class restriction for the resource searched for\n        let mainResourceClass = '';\n\n        // if given, create the class restriction for the main resource\n        if (mainResourceClassOption !== undefined) {\n            mainResourceClass = `?mainRes a <${mainResourceClassOption}> .`;\n        }\n\n        // criteria for the order by statement\n        const orderByCriteria = [];\n\n        // statements to be returned in query results\n        const returnStatements = [];\n\n        // loop over given properties and create statements and filters from them\n        const props: string[] = properties.map(\n            (propWithVal: PropertyWithValue, index: number) => {\n\n                // represents the object of a statement\n                let propValue;\n                if (!propWithVal.property.isLinkProperty || propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Exists') {\n                    // it is not a linking property, create a variable for the value (to be used by a subsequent FILTER)\n                    // OR the comparison operator Exists is used in which case we do not need to specify the object any further\n                    propValue = `?propVal${index}`;\n                } else {\n                    // it is a linking property and the comparison operator is not Exists, use its IRI\n                    propValue = propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex);\n                }\n\n                // generate statement\n                let statement: string = `?mainRes <${propWithVal.property.id}> ${propValue} .`;\n\n                // check if it is a linking property that has to be wrapped in a FILTER NOT EXISTS (comparison operator NOT_EQUALS) to negate it\n                if (propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                    // do not include statement in results, because the query checks for the absence of this statement\n                    statement = `FILTER NOT EXISTS {\n${statement}\n\n\n}`;\n                } else {\n                    // TODO: check if statement should be returned returned in results (Boolean flag from checkbox)\n                    returnStatements.push(statement);\n                    statement = `\n${statement}\n\n\n`;\n                }\n\n                // generate restricting expression (e.g., a FILTER) if comparison operator is not Exists\n                let restriction: string = '';\n                // only create a FILTER if the comparison operator is not EXISTS and it is not a linking property\n                if (!propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() !== 'Exists') {\n                    // generate variable for value literal\n                    const propValueLiteral = `${propValue}Literal`;\n\n                    if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Like') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use regex function for LIKE\n                        restriction += `FILTER regex(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}, \"i\")`;\n                    } else if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Match') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use contains function for MATCH\n                        restriction += `FILTER <${KnoraConstants.matchFunction}>(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.DateValue) {\n                        // handle date property\n                        restriction = `FILTER(knora-api:toSimpleDate(${propValue}) ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.ListValue) {\n                        // handle list node\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}` + '\\n';\n                        // check for comparison operator \"not equals\"\n                        if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                            restriction = `FILTER NOT EXISTS {\n                                ${restriction}\n                            }`;\n                        }\n                    } else {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // generate filter expression\n                        restriction += `FILTER(${propValueLiteral} ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    }\n                }\n\n                // check if current value is a sort criterion\n                if (propWithVal.isSortCriterion) orderByCriteria.push(propValue);\n\n                return `${statement}\n${restriction}\n`;\n\n            });\n\n        let orderByStatement = '';\n\n        if (orderByCriteria.length > 0) {\n            orderByStatement = `\nORDER BY ${orderByCriteria.join(' ')}\n`;\n        }\n\n        // template of the Gravsearch query with dynamic components\n        const gravsearchTemplate = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/v2#>\nCONSTRUCT {\n\n?mainRes knora-api:isMainResource true .\n\n${returnStatements.join('\\n')}\n\n} WHERE {\n\n?mainRes a knora-api:Resource .\n\n${mainResourceClass}\n\n${props.join('')}\n\n}\n${orderByStatement}`;\n\n        // offset component of the Gravsearch query\n        const offsetTemplate = `\nOFFSET ${offset}\n`;\n\n        // function that generates the same KnarQL query with the given offset\n        const generateGravsearchQueryWithCustomOffset = (localOffset: number): string => {\n            const offsetCustomTemplate = `\nOFFSET ${localOffset}\n`;\n\n            return gravsearchTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another KnarQL query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(new ExtendedSearchParams(generateGravsearchQueryWithCustomOffset));\n        }\n\n\n        return gravsearchTemplate + offsetTemplate;\n\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KuiCoreConfig, RdfDataObject, ResetTriplestoreContentResponse } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor(private http: HttpClient, @Inject(KuiCoreConfigToken) public config) { }\n\n  /**\n     * Resets the content of the triplestore.\n     *\n     * @param rdfDataObjects\n     * @returns Observable<string>\n     */\n  resetTriplestoreContent(rdfDataObjects: RdfDataObject[]): Observable<string> {\n\n    return this.http.post<ResetTriplestoreContentResponse>(this.config.api + '/admin/store/ResetTriplestoreContent', rdfDataObjects)\n      .pipe(\n        map(\n          (data) => {\n            const result: ResetTriplestoreContentResponse = data;\n            // console.log('StoreService - resetTriplestoreContent: ', result);\n            return result.message;\n          },\n          (error: HttpErrorResponse) => {\n            if (error.error instanceof Error) {\n              console.log('StoreService - resetTriplestoreContent - Client-side error occurred.', error);\n            } else {\n              console.log('StoreService - resetTriplestoreContent - Server-side error occurred.', error);\n            }\n            throw error;\n          }\n        ));\n\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicOntologyService extends ApiService {\n\n  /**\n     * returns our list of a basic ontology\n     *\n     * @returns {Observable<any>}\n     */\n  // getBasicOntology(): Observable<any> {\n  //     let url = environment.url;\n  //     return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  // }\n  getBasicOntology(): Observable<any> {\n    const url = this.config.app;\n    return this.httpGet(url + '/data/base-data/basic-ontology.json');\n    // return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceTypesService extends ApiService {\n\n  /**\n     * Get all resource types defined by the vocabulary.\n     *\n     * @param {string} iri Vocabulary iri\n     * @returns Observable<any>\n     */\n  getResourceTypesByVoc(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes?vocabulary=' + encodeURIComponent(iri));\n  }\n\n  /**\n   * Get a specific resource type.\n   *\n   * @param {string} iri resource type iri\n   * @returns Observable<any>\n   */\n  getResourceType(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes/' + encodeURIComponent(iri));\n  }\n\n\n  // putResourceType(iri)\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiServiceError, ApiServiceResult } from '../../declarations';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject(KuiCoreConfigToken) public config) {\n        super(http, config);\n    }\n\n    /**\n     * Gets a hierarchical list from Knora.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListFromKnora(rootNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/lists/' + encodeURIComponent(rootNodeIri));\n    }\n\n    /**\n     * Returns a list as expanded JSON-LD.\n     *\n     * @param {string} rootNodeIri the root node of the list.\n     * @return {Observable<object>} the expanded JSON-LD.\n     */\n    getList(rootNodeIri: string): Observable<object> {\n        const listJSONLD = this.getListFromKnora(rootNodeIri);\n\n        return listJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n\n    /**\n     * Gets a list node from Knora.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListNodeFromKnora(listNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/node/' + encodeURIComponent(listNodeIri));\n    }\n\n    /**\n     * Returns a list node as expanded JSON-LD.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<object> {\n\n        const listNodeJSONLD = this.getListNodeFromKnora(listNodeIri);\n\n        return listNodeJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ListService } from './list.service';\n\n/**\n * Represents a list node v2.\n */\nexport class ListNodeV2 {\n\n    readonly children: ListNodeV2[];\n\n    readonly isRootNode: boolean;\n\n    constructor(readonly id: string, readonly label: string, readonly position?: number, readonly hasRootNode?: string) {\n\n        // if hasRootNode is not given, this node is the root node.\n        this.isRootNode = (hasRootNode === undefined);\n\n        this.children = [];\n    }\n}\n\nclass ListCache {\n\n    [index: string]: ListNodeV2;\n\n}\n\nclass ListNodeIriToListNodeV2 {\n\n    [index: string]: ListNodeV2;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListCacheService {\n\n    private listCache = new ListCache();\n\n    private listNodeIriToListNodeV2 = new ListNodeIriToListNodeV2();\n\n    constructor(private _listService: ListService) {\n    }\n\n    private hasRootNode(listJSONLD) {\n        let hasRoot;\n\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode'] !== undefined) {\n            hasRoot = listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode']['@id'];\n        }\n\n        return hasRoot;\n    }\n\n    /**\n     * Converts a JSON-LD represention of a ListNodeV2 to  a `ListNodeV2`.\n     * Recursively converts child nodes.\n     *\n     * @param {object} listJSONLD the JSON-LD representation of a list node v2.\n     * @return {ListNodeV2}\n     */\n    private convertJSONLDToListNode: (listJSONLD: object) => ListNodeV2 = (listJSONLD: object) => {\n\n        const listNodeIri = listJSONLD['@id'];\n\n        const hasRootNode = this.hasRootNode(listJSONLD);\n\n        const listNode = new ListNodeV2(\n            listNodeIri,\n            listJSONLD['http://www.w3.org/2000/01/rdf-schema#label'],\n            listJSONLD['http://api.knora.org/ontology/knora-api/v2#listNodePosition'],\n            hasRootNode\n        );\n\n        // check if there are child nodes\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'] !== undefined) {\n\n            if (Array.isArray(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'])) {\n                // array of child nodes\n                for (const subListNode of listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']) {\n                    listNode.children.push(this.convertJSONLDToListNode(subListNode));\n                }\n            } else {\n                // single child node\n                listNode.children.push(this.convertJSONLDToListNode(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']));\n            }\n\n        }\n\n        this.listNodeIriToListNodeV2[listNodeIri] = listNode;\n\n        return listNode;\n    };\n\n    /**\n     * Gets a list from the cache or requests it from Knora and caches it.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ListNodeV2>}\n     */\n    getList(rootNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list is already in cache\n        if (this.listCache[rootNodeIri] !== undefined) {\n\n            // return list from cache\n            return of(this.listCache[rootNodeIri]);\n\n        } else {\n            // get list from Knora and cache it\n\n            const listJSONLD = this._listService.getList(rootNodeIri);\n\n            const listV2: Observable<ListNodeV2> = listJSONLD.pipe(\n                map(\n                    this.convertJSONLDToListNode\n                )\n            );\n\n            return listV2.pipe(\n                map(\n                    (list: ListNodeV2) => {\n                        // write list to cache and return it\n                        this.listCache[rootNodeIri] = list;\n                        return list;\n                    }\n                )\n            );\n        }\n    }\n\n    /**\n     * Gets a list node from the cache or requests the whole list from Knora and caches it.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list node is already in cache\n        if (this.listNodeIriToListNodeV2[listNodeIri] !== undefined) {\n\n            // list node is already cached\n            return of(this.listNodeIriToListNodeV2[listNodeIri]);\n\n        } else {\n\n            const listNode = this._listService.getListNode(listNodeIri);\n\n            return listNode.pipe(\n                mergeMap(\n                    (listNodeJSONLD: object) => {\n                        const hasRootNode = this.hasRootNode(listNodeJSONLD);\n\n                        if (hasRootNode !== undefined) {\n                            // get the whole list\n                            return this.getList(hasRootNode).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        } else {\n                            // this is the root node, get the whole list\n                            return this.getList(listNodeIri).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        }\n                    }\n                )\n            );\n        }\n    }\n}\n","import { KnoraConstants, KnoraSchema } from './knora-constants';\nimport { GravsearchGenerationService, Property } from '../../services';\n\n\n/**\n * An abstract interface representing a comparison operator.\n * This interface is implemented for the supported comparison operators.\n */\nexport interface ComparisonOperator {\n\n    // type of comparison operator\n    type: string;\n\n    // the label of the comparison operator to be presented to the user.\n    label: string;\n\n    // returns the class name when called on an instance\n    getClassName(): string;\n}\n\nexport class Equals implements ComparisonOperator {\n\n    type = KnoraConstants.EqualsComparisonOperator;\n    label = KnoraConstants.EqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Equals';\n    }\n}\n\n\nexport class NotEquals implements ComparisonOperator {\n\n    type = KnoraConstants.NotEqualsComparisonOperator;\n    label = KnoraConstants.NotEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'NotEquals';\n    }\n}\n\nexport class GreaterThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanEqualsComparisonOperator;\n    label = KnoraConstants.GreaterThanEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThanEquals';\n    }\n}\n\nexport class GreaterThan implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanComparisonOperator;\n    label = KnoraConstants.GreaterThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThan';\n    }\n}\n\nexport class LessThan implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanComparisonOperator;\n    label = KnoraConstants.LessThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThan';\n    }\n}\n\nexport class LessThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanEqualsComparisonOperator;\n    label = KnoraConstants.LessThanQualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThanEquals';\n    }\n}\n\n\nexport class Exists implements ComparisonOperator {\n\n    type = KnoraConstants.ExistsComparisonOperator;\n    label = KnoraConstants.ExistsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Exists';\n    }\n}\n\nexport class Like implements ComparisonOperator {\n\n    type = KnoraConstants.LikeComparisonOperator;\n    label = KnoraConstants.LikeComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Like';\n    }\n\n}\n\nexport class Match implements ComparisonOperator {\n\n    type = KnoraConstants.MatchComparisonOperator;\n    label = KnoraConstants.MatchComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Match';\n    }\n\n}\n\n/**\n * Combination of a comparison operator and a value literal or an IRI.\n * In case the comparison operator is 'Exists', no value is given.\n */\nexport class ComparisonOperatorAndValue {\n\n    constructor(readonly comparisonOperator: ComparisonOperator, readonly value?: Value) {\n    }\n}\n\n/**\n * An abstract interface representing a value: an IRI or a literal.\n */\nexport interface Value {\n\n    /**\n     * Turns the value into a SPARQL string representation.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string} SPARQL representation of the value.\n     */\n    toSparql(schema: KnoraSchema): string;\n\n}\n\n/**\n * Represents a property's value as a literal with the indication of its type.\n */\nexport class ValueLiteral implements Value {\n\n    /**\n     * Constructs a [ValueLiteral].\n     *\n     * @param {string} value the literal representation of the value.\n     * @param {string} type the type of the value (making use of xsd).\n     */\n    constructor(\n        public readonly value: string,\n        public readonly type: string) {\n    }\n\n\n    /**\n     * Creates a type annotated value literal to be used in a SPARQL query.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n\n        let literalType: string;\n\n        // check if a Knora schema conversion is necessary, e.g., knora-api:dateValue (complex) to knora-api:date (simple).\n        // xsd types will remain unchanged\n        if (schema === KnoraSchema.simple && GravsearchGenerationService.typeConversionComplexToSimple[this.type] !== undefined) {\n            // convert to simple schema\n            literalType = GravsearchGenerationService.typeConversionComplexToSimple[this.type];\n        } else {\n            // do not convert\n            literalType = this.type;\n        }\n        return `\"${this.value}\"^^<${literalType}>`;\n    }\n\n}\n\n/**\n * Represents an IRI.\n */\nexport class IRI implements Value {\n\n    /**\n     * Constructs an [IRI].\n     *\n     * @param {string} iri the IRI of a resource instance.\n     */\n    constructor(readonly iri: string) {\n    }\n\n    /**\n     * Creates a SPARQL representation of the IRI.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n        // this is an instance Iri and does not have to be converted.\n        return `<${this.iri}>`;\n    }\n\n}\n\n/**\n * An abstract interface that represents a value.\n * This interface has to be implemented for all value types (value component classes).\n */\nexport interface PropertyValue {\n\n    /**\n     * Type of the value.\n     */\n    type: string;\n\n    /**\n     * Returns the value.\n     *\n     * @returns {Value}.\n     */\n    getValue(): Value;\n\n}\n\n/**\n * Represents a property, the specified comparison operator, and value.\n */\nexport class PropertyWithValue {\n\n    /**\n     * Constructs a [PropertyWithValue].\n     *\n     * @param {Property} property the specified property.\n     * @param {ComparisonOperatorAndValue} valueLiteral the specified comparison operator and value.\n     * @param isSortCriterion indicates if the property is used as a sort criterion.\n     */\n    constructor(\n        readonly property: Property,\n        readonly valueLiteral: ComparisonOperatorAndValue,\n        readonly isSortCriterion: Boolean) {\n    }\n\n}\n\n/**\n * a list, which is used in the mat-autocomplete form field\n * contains objects with id and name. the id is usual the iri\n */\nexport interface AutocompleteItem {\n    iri: string;\n    name: string;\n    label?: string;\n}\n\n"],"names":["InjectionToken","NgModule","CommonModule","HttpClientModule","tslib_1.__decorate","JsonProperty","JsonObject","JsonConvert","OperationMode","ValueCheckingMode","KnoraSchema","Precision","tslib_1.__extends","tslib_1.__values","map","catchError","from","throwError","Injectable","tslib_1.__param","Inject","HttpClient","Observable","jsonld","CardinalityOccurrence","mergeMap","of","forkJoin","Subject","ConvertJSONLD","HttpParams","BehaviorSubject"],"mappings":"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"}