{"version":3,"sources":["ng://@knora/core/lib/core.module.ts","node_modules/tslib/tslib.es6.js","ng://@knora/core/lib/declarations/api/knora-constants.ts","ng://@knora/core/lib/declarations/core.config.ts","ng://@knora/core/lib/declarations/api-service-result.ts","ng://@knora/core/lib/declarations/api-service-error.ts","ng://@knora/core/lib/declarations/utils.ts","ng://@knora/core/lib/declarations/api/shared/date.ts","ng://@knora/core/lib/declarations/api/shared/strings.ts","ng://@knora/core/lib/services/v2/ontology-cache.service.ts","ng://@knora/core/lib/declarations/api/admin/authentication/authentication-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project.ts","ng://@knora/core/lib/declarations/api/admin/groups/group.ts","ng://@knora/core/lib/declarations/api/admin/groups/group-response.ts","ng://@knora/core/lib/declarations/api/admin/groups/groups-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node.ts","ng://@knora/core/lib/declarations/api/admin/lists/list.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/lists-response.ts","ng://@knora/core/lib/declarations/api/admin/ontologies/ontology-info-short.ts","ng://@knora/core/lib/declarations/api/admin/permissions/permission-data.ts","ng://@knora/core/lib/declarations/api/admin/users/user.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-members-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/projects-response.ts","ng://@knora/core/lib/declarations/api/admin/users/users-response.ts","ng://@knora/core/lib/declarations/api/admin/users/user-response.ts","ng://@knora/core/lib/declarations/api/v2/properties/read-property-item.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resource.ts","ng://@knora/core/lib/services/api.service.ts","ng://@knora/core/lib/services/v2/ontology.service.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resources-sequence.ts","ng://@knora/core/lib/declarations/api/v2/count-query/count-query-result.ts","ng://@knora/core/lib/declarations/api/v2/still-image/still-image-representation.ts","ng://@knora/core/lib/declarations/api/v2/still-image/image-region.ts","ng://@knora/core/lib/services/admin/groups.service.ts","ng://@knora/core/lib/services/admin/lists.service.ts","ng://@knora/core/lib/services/admin/projects.service.ts","ng://@knora/core/lib/services/admin/users.service.ts","ng://@knora/core/lib/services/admin/language.service.ts","ng://@knora/core/lib/services/admin/status-msg.service.ts","ng://@knora/core/lib/services/v2/convert-jsonld.ts","ng://@knora/core/lib/services/v2/search.service.ts","ng://@knora/core/lib/services/v2/incoming.service.ts","ng://@knora/core/lib/services/v2/resource.service.ts","ng://@knora/core/lib/services/v2/search-params.service.ts","ng://@knora/core/lib/services/v2/grav-search.service.ts","ng://@knora/core/lib/services/v2/store.service.ts","ng://@knora/core/lib/services/v2/basic-ontology.service.ts","ng://@knora/core/lib/services/v2/resource-types.service.ts","ng://@knora/core/lib/services/v2/list.service.ts","ng://@knora/core/lib/services/v2/list-cache.service.ts","ng://@knora/core/lib/declarations/api/operators.ts"],"names":["KuiCoreConfigToken","InjectionToken","KuiCoreModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","args","imports","CommonModule","HttpClientModule","declarations","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","KnoraSchema","KuiCoreConfig","name","undefined","app","api","media","tslib_1.__decorate","JsonProperty","String","JsonObject","ApiServiceResult","status","statusText","url","getBody","classObject","jsonConvert","deserialize","body","JsonConvert","OperationMode","ENABLE","ValueCheckingMode","ALLOW_NULL","ApiServiceError","errorInfo","KnoraConstants","KnoraVersion","KnoraApi","PathSeparator","KnoraBase","KnoraOntologyPath","DefaultSharedOntologyIRI","KnoraAdmin","SystemProjectIRI","SystemAdminGroupIRI","ProjectAdminGroupIRI","ProjectMemberGroupIRI","KnoraApiV2WithValueObjectPath","KnoraApiV2SimplePath","SalsahGuiOrder","SalsahGuiOntology","SalsahGuiAttribute","StandoffOntology","Resource","TextValue","IntValue","BooleanValue","UriValue","DecimalValue","DateValue","ColorValue","GeomValue","ListValue","IntervalValue","LinkValue","GeonameValue","FileValue","AudioFileValue","DDDFileValue","DocumentFileValue","StillImageFileValue","MovingImageFileValue","TextFileValue","IsResourceClass","IsValueClass","ForbiddenResource","XMLToStandoffMapping","ListNode","ArkUrl","versionArkUrl","ObjectType","ResourceIcon","isEditable","isLinkProperty","isLinkValueProperty","hasGeometry","schemaName","schemaNumberOfItems","schemaItemListElement","RdfProperty","RdfsLabel","RdfsSchema","RdfsComment","RdfsSubclassOf","subPropertyOf","OwlClass","owl","OwlObjectProperty","OwlDatatypeProperty","OwlAnnotationProperty","OwlOnProperty","OwlMaxCardinality","OwlMinCardinality","OwlCardinality","OwlRestriction","creationDate","lastModificationDate","hasPermissions","userHasPermission","attachedToProject","attachedToUser","Region","ReadTextValueAsHtml","ReadTextValueAsString","ReadTextValueAsXml","ReadDateValue","ReadLinkValue","ReadIntegerValue","ReadDecimalValue","ReadStillImageFileValue","ReadMovingImageFileValue","ReadAudioFileValue","ReadTextFileValue","ReadDDDFileValue","ReadDocumentFileValue","ReadGeomValue","ReadColorValue","ReadUriValue","ReadBooleanValue","ReadIntervalValue","ReadListValue","valueAsString","textValueAsHtml","textValueAsXml","textValueHasMapping","hasStandoffLinkToValue","dateValueHasStartYear","dateValueHasEndYear","dateValueHasStartEra","dateValueHasEndEra","dateValueHasStartMonth","dateValueHasEndMonth","dateValueHasStartDay","dateValueHasEndDay","dateValueHasCalendar","linkValueHasTarget","linkValueHasSource","linkValueHasSourceIri","linkValueHasTargetIri","integerValueAsInteger","decimalValueAsDecimal","fileValueAsUrl","fileValueIsPreview","fileValueHasFilename","hasStillImageFileValue","stillImageFileValueHasDimX","stillImageFileValueHasDimY","stillImageFileValueHasIIIFBaseUrl","hasMovingImageFileValue","movingImageFileValueHasDimX","movingImageFileValueHasDimY","movingImageFileValueHasDuration","movingImageFileValueHasFps","hasAudioFileValue","audioFileValueHasDuration","hasDocumentFileValue","hasDDDFileValue","colorValueAsColor","geometryValueAsGeometry","uriValueAsUri","booleanValueAsBoolean","intervalValueHasStart","intervalValueHasEnd","listValueAsListNode","xsdString","Xsd","xsdBoolean","xsdInteger","xsdDecimal","xsdUri","resourceSimple","dateSimple","intervalSimple","geomSimple","colorSimple","geonameSimple","fileSimple","listNodeSimple","matchFunction","EqualsComparisonOperator","EqualsComparisonLabel","NotEqualsComparisonOperator","NotEqualsComparisonLabel","GreaterThanComparisonOperator","GreaterThanComparisonLabel","GreaterThanEqualsComparisonOperator","GreaterThanEqualsComparisonLabel","LessThanComparisonOperator","LessThanComparisonLabel","LessThanEqualsComparisonOperator","LessThanQualsComparisonLabel","ExistsComparisonOperator","ExistsComparisonLabel","LikeComparisonOperator","LikeComparisonLabel","MatchComparisonOperator","MatchComparisonLabel","SalsahLink","RefMarker","GNDPrefix","GNDResolver","VIAFPrefix","VIAFResolver","Precision","Utils","getOntologyIriFromEntityIri","entityIri","segments","split","console","error","convertComplexKnoraApiEntityIritoSimple","complexEntityIri","RegexEmail","RegexUsername","RegexUrl","RegexPassword","RegexHex","RegexShortname","filterOutDuplicates","elem","index","self","indexOf","StringLiteral","language","CardinalityOccurrence","DateSalsah","calendar","era","year","month","day","precision","yearPrecision","monthPrecision","dayPrecision","getDateAsStringWithoutCalendar","dateString","toString","separator","getDateAsString","DateRangeSalsah","start","end","AuthenticationResponse","token","Project","id","shortname","shortcode","longname","description","keywords","logo","institution","ontologies","selfjoin","Boolean","Group","project","GroupResponse","group","GroupsResponse","groups","ListInfo","projectIri","labels","comments","label","children","level","position","ListNode_1","Number","List","listinfo","ListInfoResponse","ListNodeInfo","isRootNode","ListNodeInfoResponse","nodeinfo","ListResponse","list","ListsResponse","lists","OntologyInfoShort","ontologyIri","ontologyName","PermissionData","groupsPerProject","administrativePermissionsPerProject","User","email","username","password","givenName","familyName","lang","projects","sessionId","permissions","systemAdmin","ProjectMembersResponse","members","ProjectResponse","ProjectsResponse","UsersResponse","users","UserResponse","user","ReadTextValue","type","_super","propIri","str","_this","tslib_1.__extends","getClassName","getContent","ReferredResourcesByStandoffLink","html","referredResources","getReferredResourceInfo","resourceIri","ontologyInfo","resClassLabel","getLabelForResourceClass","xml","mappingIri","startYear","endYear","startEra","endEra","startMonth","endMonth","startDay","endDay","getDateSalsah","referredResourceIri","referredResource","integer","decimal","imageFilename","imageServerIIIFBaseURL","imagePath","dimX","dimY","isPreview","endsWith","makeIIIFUrl","reduceFactor","percentage","Math","floor","filename","path","duration","fps","textFilename","textFileURL","colorHex","Point2D","x","y","RegionGeometry","lineColor","lineWidth","points","radius","geometryString","geometryJSON","JSON","parse","_b","tslib_1.__values","_c","point","push","geometry","uri","bool","intervalStart","intervalEnd","listNodeIri","ReadResource","incomingRegions","incomingStillImageRepresentations","incomingLinks","stillImageRepresentationsToDisplay","properties","incomingAnnotations","incomingFileRepresentations","fileRepresentationsToDisplay","jsonld","require","semver","ApiService","http","loading","httpGet","params","get","observe","pipe","map","response","result","header","server","headers","compareVersion","catchError","handleRequestError","processJSONLD","resourceResponse","resPromises","promises","resPromise","compact","log","from","httpPost","post","httpPut","put","httpDelete","delete","serviceError","message","throwError","handleJsonError","expected","existing","diff","warn","Injectable","providedIn","HttpClient","Inject","OntologyService","getOntologiesMetadata","getAllOntologies","getProjectOntologies","encodeURIComponent","getAllEntityDefinitionsForOntologies","getResourceClasses","resourceClassIris","Observable","observer","resClassUriEnc","forEach","resClassIri","getProperties","propertyIris","propertiesUriEnc","createOntology","data","ontology","knora-api:ontologyName","knora-api:attachedToProject","@id","rdfs:label","@context","rdfs","knora-api","OntologyCacheError","Error","OntologyMetadata","Cardinality","occurrence","property","GuiOrder","ResourceClass","icon","comment","cardinalities","guiOrder","ResourceClasses","Property","objectType","guiAttribute","Properties","ResourceClassIrisForOntology","OntologyCache","resourceClassIrisForOntology","resourceClasses","OntologyInformation","resourceClassesForOntology","sortFunc","a","labelA","toLowerCase","labelB","updateOntologyInformation","newResourceClassesForOntology","getResourceClassForOntology","newResClassForOntology","newResourceClasses","newResClass","newProperties","newProp","getResourceClassesAsArray","sortAsc","resClasses","resClass","sort","reverse","resClassDef","getPropertiesAsArray","prop","getLabelForProperty","propDef","OntologyCacheService","_ontologyService","excludedOntologies","excludedProperties","nonResourceClasses","cacheOntology","getOntologiesMetadataFromKnora","mergeMap","ontRes","ontPromise","getAllEntityDefinitionsForOntologyFromKnora","convertAndWriteOntologiesMetadataToCache","getAllOntologiesMetadataFromCache","getResourceClassIrisFromOntologyResponse","classDefinitions","classDefinitions_1","classDefinitions_1_1","classDef","classIri","convertAndWriteAllEntityDefinitionsForOntologyToCache","graph","classDefs","filter","entity","propertyDefs","entityType","convertAndWriteEntityDefinitionsToCache","getOntologyInformationFromCache","ontologyIris","allResourceClassIris","ontologyIris_1","ontologyIris_1_1","concat","getResourceClassDefinitions","resClassDefs","resourceClassDefinitions","propertyClassDefinitions","resourceClassDefinitions_1","resourceClassDefinitions_1_1","subclassOfCollection","isArray","subclassOfCollection_1","subclassOfCollection_1_1","curCard","newCard","minCard","card","TypeError","maxCard","newGuiOrder","resClassObj","convertAndWriteKnoraPropertyDefinitionsToOntologyCache","getResourceClassDefinitionsFromCache","resClassIris","getPropertyDefinitions","propDefs","propertyDefinitionsFromKnora","propertyDefinitionsFromKnora_1","propertyDefinitionsFromKnora_1_1","superProp","_d","attr","getPropertyDefinitionsFromCache","onto","of","getAndCacheOntologies","observables","forkJoin","getEntityDefinitionsForOntologies","ontologyIrisToQuery","resClassIrisToQueryFor","propertiesToQuery","results","ReadResourcesSequence","resources","numberOfResources","ontologyInformation","ResourcesSequence","CountQueryResult","numberOfResults","StillImageRepresentation","stillImageFileValue","regions","ImageRegion","regionResource","getGeometries","GroupsService","apply","getAllGroups","getGroupByIri","iri","ListsService","getLists","getList","listIri","getListInfo","getListNodeInfo","nodeIri","createList","payload","updateListInfo","ProjectsService","getAllProjects","getProjectByIri","getProject","getProjectByShortname","getProjectByShortcode","getProjectMembersByIri","getProjectMembers","getProjectMembersByShortname","getProjectMembersByShortcode","createProject","updateProject","activateProject","deleteProject","UsersService","getAllUsers","getUser","identifier","identifierType","getUserByIri","getUserByEmail","getUserByUsername","getUsersGroupMemberships","userIri","createUser","addUserToProject","removeUserFromProject","addUserToProjectAdmin","removeUserFromProjectAdmin","addUserToGroup","groupIri","removeUserFromGroup","addUserToSystemAdmin","updateUserSystemAdmin","removeUserFromSystemAdmin","activateUser","updateOwnPassword","oldPassword","newPassword","requesterPassword","updateUsersPassword","updateBasicUserInformation","deleteUser","LanguageService","subject","Subject","setLanguage","var","getLanguage","asObservable","StatusMsgService","_http","getStatusMsg","res","err","ConvertJSONLD","getPropertyNames","propName","constructReadResource","resourceJSONLD","constructReadProperties","constructResource","createValueSpecificProp","propValue","standoffLinkValues","valueSpecificProp","textValue","standoffLinkValues_1","standoffLinkValues_1_1","referredRes","stringify","linkValue","incomingResource","incomingResourceIri","decVal","parseFloat","intStart","intEnd","standoffLinkValuesJSONLD","standoffLinkValuesJSONLD_1","standoffLinkValuesJSONLD_1_1","standoffVal","propNames","keys","propNames_1","propNames_1_1","propValues","_e","getReferredResourceClasses","referredResourceClasses","propNames_2","propNames_2_1","createReadResourcesSequenceFromJsonLD","resourcesResponseJSONLD","resourcesGraph","resourcesGraph_1","resourcesGraph_1_1","resource","createResourcesSequenceFromJsonLD","resourcesGraph_2","resourcesGraph_2_1","getResourceClassesFromJsonLD","resourcesGraph_3","resourcesGraph_3_1","createCountQueryResult","countQueryJSONLD","SearchService","_ontologyCacheService","convertJSONLDToReadResourceSequence","resSeq","ontoInfo","convertJSONLDToResourcesSequence","processFulltextSearchParams","httpParams","searchParams","limitToProject","set","limitToResourceClass","limitToStandoffClass","processSearchByLabelParams","doFulltextSearch","searchTerm","offset","HttpParams","doFullTextSearchReadResourceSequence","doFulltextSearchCountQuery","doFullTextSearchCountQueryCountQueryResult","doExtendedSearch","gravsearchQuery","doExtendedSearchReadResourceSequence","doExtendedSearchResourcesSequence","doExtendedSearchCountQuery","doExtendedSearchCountQueryCountQueryResult","searchByLabel","searchByLabelReadResourceSequence","IncomingService","getIncomingRegions","resourceIRI","sparqlQueryStr","getStillImageRepresentationsForCompoundResource","getIncomingLinksForResource","getIncomingLinks","ResourceService","_incomingService","getResource","propKeys","includes","imgRepresentations","imagesToDisplay","image","imagesToDisplay_1","imagesToDisplay_1_1","img","stillImage","subscribe","incomingImageRepresentations","incomingRes","getResourcesSequence","requestIncomingResources","sequence","getReadResource","ExtendedSearchParams","generateGravsearch","SearchParamsService","_currentSearchParams","BehaviorSubject","changeSearchParamsMsg","getSearchParams","getValue","GravsearchGenerationService","_searchParamsService","createGravsearchQuery","mainResourceClassOption","mainResourceClass","orderByCriteria","returnStatements","props","propWithVal","valueLiteral","comparisonOperator","toSparql","complex","statement","restriction","propValueLiteral","complexTypeToProp","isSortCriterion","orderByStatement","join","gravsearchTemplate","offsetTemplate","localOffset","typeConversionComplexToSimple","http://api.knora.org/ontology/knora-api/v2#IntValue","http://api.knora.org/ontology/knora-api/v2#DecimalValue","http://api.knora.org/ontology/knora-api/v2#BooleanValue","http://api.knora.org/ontology/knora-api/v2#TextValue","http://api.knora.org/ontology/knora-api/v2#DateValue","http://api.knora.org/ontology/knora-api/v2#IntervalValue","http://api.knora.org/ontology/knora-api/v2#GeomValue","http://api.knora.org/ontology/knora-api/v2#ColorValue","http://api.knora.org/ontology/knora-api/v2#GeonameValue","http://api.knora.org/ontology/knora-api/v2#UriValue","http://api.knora.org/ontology/knora-api/v2#StillImageFileValue","http://api.knora.org/ontology/knora-api/v2#FileValue","http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue","http://api.knora.org/ontology/knora-api/v2#DDDFileValue","http://api.knora.org/ontology/knora-api/v2#AudioFileValue","http://api.knora.org/ontology/knora-api/v2#DocumentFileValue","http://api.knora.org/ontology/knora-api/v2#TextFileValue","http://api.knora.org/ontology/knora-api/v2#ListValue","StoreService","resetTriplestoreContent","rdfDataObjects","BasicOntologyService","getBasicOntology","ResourceTypesService","getResourceTypesByVoc","getResourceType","ListService","getListFromKnora","rootNodeIri","getListNodeFromKnora","getListNode","ListNodeV2","hasRootNode","ListCache","ListNodeIriToListNodeV2","ListCacheService","_listService","listCache","listNodeIriToListNodeV2","convertJSONLDToListNode","listJSONLD","listNode","subListNode","hasRoot","listNodeJSONLD","completeList","Equals","NotEquals","GreaterThanEquals","GreaterThan","LessThan","LessThanEquals","Exists","Like","Match","ComparisonOperatorAndValue","ValueLiteral","schema","literalType","simple","IRI","PropertyWithValue"],"mappings":"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","sourcesContent":["import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { KuiCoreConfig } from './declarations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nexport const KuiCoreConfigToken = new InjectionToken<KuiCoreConfig>('KuiCoreConfigToken (knora.core.config)');\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: [],\n    exports: [\n        HttpClientModule\n    ]\n})\nexport class KuiCoreModule {\n    /**\n     *\n     * @param {KuiCoreConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: KuiCoreConfig): ModuleWithProviders {\n        // get the app environment configuration here\n        // console.log('KuiCoreModule - forRoot - config: ', config);\n        return {\n            ngModule: KuiCoreModule,\n            providers: [\n                {provide: KuiCoreConfigToken, useValue: config}\n            ]\n        };\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class KnoraConstants {\n\n    // The following version of Knora is needed to work properly with this module\n    public static KnoraVersion: string = '8.0.0';\n\n    public static KnoraApi: string = 'http://api.knora.org/ontology/knora-api';\n    public static PathSeparator: string = '#';\n\n    public static KnoraOntologyPath: string = 'http://www.knora.org/ontology';\n    public static KnoraBase: string = KnoraConstants.KnoraOntologyPath + '/knora-base';\n    public static KnoraAdmin: string = KnoraConstants.KnoraOntologyPath + '/knora-admin';\n\n    public static DefaultSharedOntologyIRI: string = KnoraConstants.KnoraAdmin + '#DefaultSharedOntologiesProject';\n    public static SystemProjectIRI: string = KnoraConstants.KnoraAdmin + '#SystemProject';\n    public static SystemAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#SystemAdmin';\n    public static ProjectAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectAdmin';\n    public static ProjectMemberGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectMember';\n\n    public static KnoraApiV2WithValueObjectPath: string = KnoraConstants.KnoraApi + '/v2' + KnoraConstants.PathSeparator;\n    public static KnoraApiV2SimplePath: string = KnoraConstants.KnoraApi + '/simple/v2' + KnoraConstants.PathSeparator;\n\n    public static SalsahGuiOntology: string = 'http://api.knora.org/ontology/salsah-gui/v2';\n\n    public static SalsahGuiOrder: string = KnoraConstants.SalsahGuiOntology + '#guiOrder';\n    public static SalsahGuiAttribute: string = KnoraConstants.SalsahGuiOntology + '#guiAttribute';\n\n    public static StandoffOntology: string = 'http://api.knora.org/ontology/standoff/v2';\n\n    public static Resource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Resource';\n    public static TextValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextValue';\n    public static IntValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntValue';\n    public static BooleanValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'BooleanValue';\n    public static UriValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'UriValue';\n    public static DecimalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DecimalValue';\n    public static DateValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DateValue';\n    public static ColorValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ColorValue';\n    public static GeomValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeomValue';\n    public static ListValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListValue';\n    public static IntervalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntervalValue';\n    public static LinkValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'LinkValue';\n    public static GeonameValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeonameValue';\n    public static FileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'FileValue';\n    public static AudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'AudioFileValue';\n    public static DDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DDDFileValue';\n    public static DocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DocumentFileValue';\n    public static StillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'StillImageFileValue';\n    public static MovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'MovingImageFileValue';\n    public static TextFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextFileValue';\n    public static IsResourceClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isResourceClass';\n    public static IsValueClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isValueClass';\n    public static ForbiddenResource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ForbiddenResource';\n    public static XMLToStandoffMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'XMLToStandoffMapping';\n    public static ListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListNode';\n\n    public static ArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'arkUrl';\n    public static versionArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'versionArkUrl';\n    public static ObjectType = KnoraConstants.KnoraApiV2WithValueObjectPath + 'objectType';\n\n    public static ResourceIcon: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'resourceIcon';\n    public static isEditable: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isEditable';\n    public static isLinkProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkProperty';\n    public static isLinkValueProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkValueProperty';\n    public static hasGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasGeometry';\n\n    public static schemaName: string = 'http://schema.org/name';\n    public static schemaNumberOfItems: string = 'http://schema.org/numberOfItems';\n    public static schemaItemListElement: string = 'http://schema.org/itemListElement';\n\n    public static RdfProperty: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property';\n    public static RdfsSchema: string = 'http://www.w3.org/2000/01/rdf-schema' + KnoraConstants.PathSeparator;\n    public static RdfsLabel: string = KnoraConstants.RdfsSchema + 'label';\n    public static RdfsComment: string = KnoraConstants.RdfsSchema + 'comment';\n    public static RdfsSubclassOf: string = KnoraConstants.RdfsSchema + 'subClassOf';\n    public static subPropertyOf: string = KnoraConstants.RdfsSchema + 'subPropertyOf';\n\n    public static owl: string = 'http://www.w3.org/2002/07/owl';\n\n    public static OwlClass: string = KnoraConstants.owl + '#Class';\n    public static OwlObjectProperty: string = KnoraConstants.owl + '#ObjectProperty';\n    public static OwlDatatypeProperty: string = KnoraConstants.owl + '#DatatypeProperty';\n    public static OwlAnnotationProperty: string = KnoraConstants.owl + '#AnnotationProperty';\n    public static OwlOnProperty: string = KnoraConstants.owl + '#onProperty';\n    public static OwlMaxCardinality: string = KnoraConstants.owl + '#maxCardinality';\n    public static OwlMinCardinality: string = KnoraConstants.owl + '#minCardinality';\n    public static OwlCardinality: string = KnoraConstants.owl + '#cardinality';\n    public static OwlRestriction: string = KnoraConstants.owl + '#Restriction';\n\n    public static creationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'creationDate';\n    public static lastModificationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'lastModificationDate';\n    public static hasPermissions: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasPermissions';\n    public static userHasPermission: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'userHasPermission';\n    public static attachedToProject: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToProject';\n    public static attachedToUser: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToUser';\n\n    public static Region: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Region';\n\n    public static ReadTextValueAsHtml: string = 'ReadTextValueAsHtml';\n    public static ReadTextValueAsString: string = 'ReadTextValueAsString';\n    public static ReadTextValueAsXml: string = 'ReadTextValueAsXml';\n    public static ReadDateValue: string = 'ReadDateValue';\n    public static ReadLinkValue: string = 'ReadLinkValue';\n    public static ReadIntegerValue: string = 'ReadIntegerValue';\n    public static ReadDecimalValue: string = 'ReadDecimalValue';\n    public static ReadStillImageFileValue: string = 'ReadStillImageFileValue';\n    public static ReadMovingImageFileValue: string = 'ReadMovingImageFileValue';\n    public static ReadAudioFileValue: string = 'ReadAudioFileValue';\n    public static ReadTextFileValue: string = 'ReadTextFileValue';\n    public static ReadDDDFileValue: string = 'ReadDDDFileValue';\n    public static ReadDocumentFileValue: string = 'ReadDocumentFileValue';\n    public static ReadGeomValue: string = 'ReadGeomValue';\n    public static ReadColorValue: string = 'ReadColorValue';\n    public static ReadUriValue: string = 'ReadUriValue';\n    public static ReadBooleanValue: string = 'ReadBooleanValue';\n    public static ReadIntervalValue: string = 'ReadIntervalValue';\n    public static ReadListValue: string = 'ReadListValue';\n\n    public static valueAsString: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'valueAsString';\n\n    public static textValueAsHtml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsHtml';\n    public static textValueAsXml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsXml';\n    public static textValueHasMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueHasMapping';\n\n    public static hasStandoffLinkToValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStandoffLinkToValue';\n\n    public static dateValueHasStartYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartYear';\n    public static dateValueHasEndYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndYear';\n    public static dateValueHasStartEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartEra';\n    public static dateValueHasEndEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndEra';\n    public static dateValueHasStartMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartMonth';\n    public static dateValueHasEndMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndMonth';\n    public static dateValueHasStartDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartDay';\n    public static dateValueHasEndDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndDay';\n    public static dateValueHasCalendar: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasCalendar';\n\n    public static linkValueHasTarget: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTarget';\n    public static linkValueHasSource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSource';\n    public static linkValueHasSourceIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSourceIri';\n    public static linkValueHasTargetIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTargetIri';\n\n    public static integerValueAsInteger: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intValueAsInt';\n\n    public static decimalValueAsDecimal: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'decimalValueAsDecimal';\n\n    public static fileValueAsUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueAsUrl';\n    public static fileValueIsPreview: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueIsPreview';\n    public static fileValueHasFilename: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueHasFilename';\n\n    public static hasStillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStillImageFileValue';\n    public static stillImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimX';\n    public static stillImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimY';\n    public static stillImageFileValueHasIIIFBaseUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasIIIFBaseUrl';\n\n    public static hasMovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasMovingImageFileValue';\n    public static movingImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'movingImageFileValueHasDimX';\n    public static movingImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'movingImageFileValueHasDimY';\n    public static movingImageFileValueHasDuration: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'movingImageFileValueHasDuration';\n    public static movingImageFileValueHasFps: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'movingImageFileValueHasFps';\n\n    public static hasAudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasAudioFileValue';\n    public static audioFileValueHasDuration: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'audioFileValueHasDuration';\n\n    public static hasDocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasDocumentFileValue';\n\n    public static hasDDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasDDDFileValue';\n\n    public static colorValueAsColor: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'colorValueAsColor';\n    public static geometryValueAsGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'geometryValueAsGeometry';\n    public static uriValueAsUri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'uriValueAsUri';\n    public static booleanValueAsBoolean: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'booleanValueAsBoolean';\n\n    public static intervalValueHasStart: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasStart';\n    public static intervalValueHasEnd: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasEnd';\n\n    public static listValueAsListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNode';\n\n    public static Xsd: string = 'http://www.w3.org/2001/XMLSchema#';\n\n    public static xsdString: string = KnoraConstants.Xsd + 'string';\n    public static xsdBoolean: string = KnoraConstants.Xsd + 'boolean';\n    public static xsdInteger: string = KnoraConstants.Xsd + 'integer';\n    public static xsdDecimal: string = KnoraConstants.Xsd + 'decimal';\n    public static xsdUri: string = KnoraConstants.Xsd + 'anyURI';\n\n    public static resourceSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Resource';\n    public static dateSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Date';\n    public static intervalSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Interval';\n    public static geomSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geom';\n    public static colorSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Color';\n    public static geonameSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geoname';\n    public static fileSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'File';\n    public static listNodeSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'ListNode';\n\n    public static matchFunction: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'match';\n\n    public static EqualsComparisonOperator: string = '=';\n    public static EqualsComparisonLabel: string = 'is equal to';\n\n    public static NotEqualsComparisonOperator: string = '!=';\n    public static NotEqualsComparisonLabel: string = 'is not equal to';\n\n    public static GreaterThanComparisonOperator: string = '>';\n    public static GreaterThanComparisonLabel: string = 'is greater than';\n\n    public static GreaterThanEqualsComparisonOperator: string = '>=';\n    public static GreaterThanEqualsComparisonLabel: string = 'is greater than equals to';\n\n    public static LessThanComparisonOperator: string = '<';\n    public static LessThanComparisonLabel: string = 'is less than';\n\n    public static LessThanEqualsComparisonOperator: string = '<=';\n    public static LessThanQualsComparisonLabel: string = 'is less than equals to';\n\n    public static ExistsComparisonOperator: string = 'E';\n    public static ExistsComparisonLabel: string = 'exists';\n\n    public static LikeComparisonOperator: string = 'regex';\n    public static LikeComparisonLabel: string = 'is like';\n\n    public static MatchComparisonOperator: string = 'contains';\n    public static MatchComparisonLabel: string = 'matches';\n\n    public static SalsahLink: string = 'salsah-link'; // class on an HTML <a> element that indicates a link to a Knora resource\n    public static RefMarker: string = 'ref-marker'; // class on an HTML element that refers to another element in the same document\n\n    public static GNDPrefix: string = '(DE-588)';\n    public static GNDResolver: string = 'http://d-nb.info/gnd/';\n\n    public static VIAFPrefix: string = '(VIAF)';\n    public static VIAFResolver: string = 'https://viaf.org/viaf/';\n\n}\n\n\nexport enum KnoraSchema {\n    complex = 0,\n    simple = 1\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * Knora-ui core configuration with the server definitions of:\n *  - api: URL of data service e.g. knora: http://localhost:3333\n *  - media: URL of media server service e.g. sipi: http://localhost:1024\n *  - app: URL of the app e.g. salsah: http://localhost:4200\n */\n@JsonObject('KuiCoreConfig')\nexport class KuiCoreConfig {\n\n    /**\n     * name of the app e.g. 'SALSAH'\n     * @type {string}\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * url of the app e.g. 'https://salsah.org'\n     * @type {undefined}\n     */\n    @JsonProperty('app', String)\n    public app: string = undefined;\n\n    /**\n     * url of the api e.g. 'https://api.knora.org'\n     * @type {string}\n     */\n    @JsonProperty('api', String)\n    public api: string = undefined;\n\n    /**\n     * url of media/file server e.g. 'https://iiif.sipi.io'\n     * @type {string}\n     */\n    @JsonProperty('media', String)\n    public media: string = undefined;\n\n}\n","\nimport { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\n\n/**\n * Result class used as API url response in ApiService\n */\nexport class ApiServiceResult {\n\n    private static jsonConvert: JsonConvert = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL);\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Body as JSON\n     */\n    body: any;\n\n    /**\n     * Gets the result body as instance of classObject.\n     * @param classObject\n     * @returns {any}\n     * @throws\n     */\n\n    getBody(classObject?: { new(): any }): any {\n        // console.log(this.body);\n        return ApiServiceResult.jsonConvert.deserialize(this.body, classObject);\n    }\n\n\n}\n","\n/**\n * Error class used as API response in ApiService\n */\nexport class ApiServiceError {\n\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Additional error info\n     */\n    errorInfo = '';\n\n}\n","/**\n * Collection of useful utility functions.\n */\nimport { KnoraConstants } from './api/knora-constants';\n\n// @dynamic\nexport class Utils {\n    /**\n     * A regex to validate Email address.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    /**\n     * A regex to validate Username.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUsername = /^[a-zA-Z0-9]+$/;\n\n    /**\n     * A regex to validate URLs.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUrl = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/i;\n\n    /**\n     * A regex to validate Passwords\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexPassword = /^(?=.*\\d)(?=.*[a-zA-Z]).{8,}$/i;\n\n    /**\n     * A regex to validate Hexadecimal values\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexHex = /^[0-9A-Fa-f]+$/;\n\n    /**\n     * A regex to validate shortname in projects\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexShortname = /^[a-zA-Z]+\\S*$/;\n\n\n    /**\n     * Lambda function eliminating duplicates in a collection to be passed to [[filter]].\n     *\n     * @param elem element of an Array that is currently being looked at.\n     * @param index current elements index.\n     * @param self reference to the whole Array.\n     * @returns {boolean} true if the same element does not already exist in the Array.\n     */\n    public static filterOutDuplicates = (elem, index: number, self) => {\n\n        // https://stackoverflow.com/questions/16747798/delete-duplicate-elements-from-an-array\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example\n\n        // returns true if the element's index equals the index of the leftmost element\n        // -> this means that there is no identical element before this index, hence it is not a duplicate\n        // for all other elements, false is returned\n        return index === self.indexOf(elem);\n\n    }\n\n    /**\n     * Given a Knora entity IRI, gets the ontology Iri.\n     *\n     * @param {string} entityIri an entity Iri.\n     * @return {string} the ontology IRI\n     */\n    public static getOntologyIriFromEntityIri(entityIri: string) {\n\n        // split class Iri on \"#\"\n        const segments: string[] = entityIri.split(KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${entityIri} is not a valid entity IRI.`);\n\n        return segments[0];\n\n    }\n\n    /**\n     * Converts a complex knora-api entity Iri to a knora-api simple entity Iri.\n     *\n     * @param {string} complexEntityIri\n     * @returns {string}\n     */\n    public static convertComplexKnoraApiEntityIritoSimple(complexEntityIri: string) {\n\n        // split entity Iri on \"#\"\n        const segments: string[] = complexEntityIri.split('v2' + KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${complexEntityIri} is not a valid entity IRI.`);\n\n        // add 'simple' to base path\n        return segments[0] + 'simple/v2' + KnoraConstants.PathSeparator + segments[1];\n\n    }\n\n\n}\n","/**\n * Precision for DateSalsah.\n */\nexport enum Precision {\n    yearPrecision,\n    monthPrecision,\n    dayPrecision\n}\n\n/**\n * Represents a Salsah date object with a precision information.\n */\nexport class DateSalsah {\n\n    private static separator = '-';\n\n    readonly precision: Precision;\n\n    constructor(\n        readonly calendar: string,\n        readonly era: string,\n        readonly year: number,\n        readonly month?: number,\n        readonly day?: number\n    ) {\n        if (this.month === undefined) {\n            // year precision\n            this.precision = Precision.yearPrecision;\n        } else if (this.day === undefined) {\n            // month precision\n            this.precision = Precision.monthPrecision;\n        } else {\n            // day precision\n            this.precision = Precision.dayPrecision;\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the date without the calendar.\n     *\n     * @returns {string}\n     */\n    getDateAsStringWithoutCalendar() {\n\n        let dateString = '(' + this.era + ') ';\n\n        switch (this.precision) {\n\n            case Precision.yearPrecision: {\n                dateString += this.year.toString();\n                break;\n            }\n\n            case Precision.monthPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month;\n                break;\n            }\n\n            case Precision.dayPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month + DateSalsah.separator + this.day;\n                break;\n            }\n\n            default: {\n                break;\n            }\n\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Returns a string representation of the date (with calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString(): string {\n\n        return this.calendar + ':' + this.getDateAsStringWithoutCalendar();\n    }\n\n}\n\n/**\n * Represents a period (with start date and end date).\n */\nexport class DateRangeSalsah {\n\n    constructor(\n        readonly start: DateSalsah,\n        readonly end: DateSalsah\n    ) {\n    }\n\n    /**\n     * Returns a string representation of the date range (with preceding calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString() {\n        return this.start.getDateAsString() + ':' + this.end.getDateAsStringWithoutCalendar();\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('StringLiteral')\nexport class StringLiteral {\n\n    @JsonProperty('value', String, false)\n    public value: string = undefined;\n\n    @JsonProperty('language', String, true)\n    public language: string = '';\n}\n","import { Injectable } from '@angular/core';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { Utils } from '../../declarations/utils';\nimport { OntologyService } from './ontology.service';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n/**\n * Represents an error occurred in OntologyCacheService.\n */\nclass OntologyCacheError extends Error {\n\n    constructor(readonly message: string) {\n        super(message);\n    }\n}\n\n\n/**\n * Represents an ontology's metadata.\n */\nexport class OntologyMetadata {\n\n    /**\n     * @hideconstructor\n     *\n     * @param {string} id Iri identifying the ontology.\n     * @param {string} label a label describing the ontology.\n     */\n    constructor(readonly id: string,\n        readonly label: string) {\n\n    }\n\n}\n\n\n/**\n * Occurrence of a property for a resource class (its cardinality).\n */\nexport enum CardinalityOccurrence {\n    minCard = 0,\n    card = 1,\n    maxCard = 2\n}\n\n\n/**\n * Cardinality of a property for the given resource class.\n */\nexport class Cardinality {\n\n    /**\n     * @param {CardinalityOccurrence} occurrence type of given occurrence.\n     * @param {number} value numerical value of given occurrence.\n     * @param {string} property the property the given occurrence applies to.\n     */\n    constructor(readonly occurrence: CardinalityOccurrence,\n        readonly value: number,\n        readonly property: string) {\n    }\n}\n/**\n * Property gui order\n */\nexport class GuiOrder {\n    /**\n     * @param  {number} value\n     * @param  {string} property\n     */\n    constructor(readonly value: number,\n        readonly property: string\n    ) {\n\n    }\n}\n\n/**\n * A resource class definition.\n */\nexport class ResourceClass {\n\n    /**\n     * @param {string} id Iri identifying the resource class.\n     * @param {string} icon path to an icon representing the resource class.\n     * @param {string} comment comment on the resource class.\n     * @param {string} label label describing the resource class.\n     * @param {Cardinality[]} cardinalities the resource class's properties.\n     * @param {GuiOrder[]} guiOrder the resource class's gui-order properties.\n     */\n    constructor(readonly id: string,\n        readonly icon: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly cardinalities: Array<Cardinality>,\n        readonly guiOrder: Array<GuiOrder>) {\n\n    }\n}\n\n\n/**\n * A map of resource class Iris to resource class definitions.\n */\nexport class ResourceClasses {\n    [index: string]: ResourceClass;\n}\n\n\n/**\n * A property definition.\n */\nexport class Property {\n\n    /**\n     * @param {string} id Iri identifying the property definition.\n     * @param {string} objectType the property's object constraint.\n     * @param {string} comment comment on the property definition.\n     * @param {string} label label describing the property definition.\n     * @param {string[]} subPropertyOf Iris of properties the given property is a subproperty of.\n     * @param {boolean} isEditable indicates whether the given property can be edited by the client.\n     * @param {boolean} isLinkProperty indicates whether the given property is a linking property.\n     * @param {boolean} isLinkValueProperty indicates whether the given property refers to a link value.\n     * @param {string} guiAttribute the gui attribute assigned to this property, if any.\n     */\n    constructor(readonly id: string,\n                readonly objectType: string,\n                readonly comment: string,\n                readonly label: string,\n                readonly subPropertyOf: Array<string>,\n                readonly isEditable: Boolean,\n                readonly isLinkProperty: Boolean,\n                readonly isLinkValueProperty: Boolean,\n                readonly guiAttribute: string[]) {\n    }\n}\n\n\n/**\n * A map of property Iris to property definitions.\n */\nexport class Properties {\n    [index: string]: Property;\n}\n\n\n/**\n * Groups resource classes by the ontology they are defined in.\n *\n * A map of ontology Iris to an array of resource class Iris.\n */\nexport class ResourceClassIrisForOntology {\n    [index: string]: Array<string>;\n}\n\n\n/**\n * Represents cached ontology information (only used by this service internally).\n * This cache is updated whenever new definitions are requested from Knora.\n *\n * Requested ontology information by a service is represented by [[OntologyInformation]].\n */\nclass OntologyCache {\n\n    /**\n     * @param {OntologyMetadata[]} ontologies An array of all existing ontologies.\n     */\n    ontologies: Array<OntologyMetadata>;\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassIrisForOntology list of all resource class Iris for a named graph.\n     */\n    resourceClassIrisForOntology: ResourceClassIrisForOntology;\n\n    /**\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     */\n    resourceClasses: ResourceClasses;\n\n    /**\n     * @param {Properties} properties property definitions.\n     */\n    properties: Properties;\n\n    constructor() {\n        this.ontologies = [];\n\n        this.resourceClassIrisForOntology = new ResourceClassIrisForOntology();\n\n        this.resourceClasses = new ResourceClasses();\n\n        this.properties = new Properties();\n    }\n}\n\n/**\n * Represents ontology information requested from this service.\n *\n * For every request, an instance of this class is returned containing the requested information.\n */\nexport class OntologyInformation {\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassesForOntology all resource class Iris for a given ontology.\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     * @param {Properties} properties property definitions.\n     */\n    constructor(\n        private resourceClassesForOntology: ResourceClassIrisForOntology,\n        private resourceClasses: ResourceClasses,\n        private properties: Properties) {\n    }\n\n    /**\n     * Sorts an array of `ResourceClass` or `Property` by label.\n     *\n     * @param a first element\n     * @param b second element\n     * @return negative -1 if the first element is considered lower than the second, 1 if the second element is considered bigger, 0 if they are equal\n     */\n    static sortFunc(a: ResourceClass | Property, b: ResourceClass | Property) {\n        // dealing with 'undefined' labels\n        if (a.label === undefined) {\n            return 1;\n        } else if (b.label === undefined) {\n            return -1;\n        }\n\n        const labelA = a.label.toLowerCase();\n        const labelB = b.label.toLowerCase();\n\n        if (labelA < labelB) {\n            return -1;\n        } else if (labelA > labelB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Merge the given [[OntologyInformation]] into the current instance,\n     * updating the existing information.\n     * This is necessary when a service like the search fetches new results\n     * that have to be added to an existing collection.\n     * The existing ontology information must not be lost.\n     *\n     * @param {OntologyInformation} ontologyInfo the given definitions that have to be integrated.\n     * @returns void\n     */\n    updateOntologyInformation(ontologyInfo: OntologyInformation): void {\n\n        // get new resourceClassIrisForOntology\n        const newResourceClassesForOntology: ResourceClassIrisForOntology = ontologyInfo.getResourceClassForOntology();\n\n        // update new resourceClassIrisForOntology\n        // tslint:disable-next-line:forin\n        for (const newResClassForOntology in newResourceClassesForOntology) {\n            this.resourceClassesForOntology[newResClassForOntology] = newResourceClassesForOntology[newResClassForOntology];\n        }\n\n        // get new resource class definitions\n        const newResourceClasses = ontologyInfo.getResourceClasses();\n\n        // update resourceClasses\n        // tslint:disable-next-line:forin\n        for (const newResClass in newResourceClasses) {\n            this.resourceClasses[newResClass] = newResourceClasses[newResClass];\n        }\n\n        // get new property definitions\n        const newProperties = ontologyInfo.getProperties();\n\n        // update properties\n        // tslint:disable-next-line:forin\n        for (const newProp in newProperties) {\n            this.properties[newProp] = newProperties[newProp];\n        }\n\n    }\n\n    /**\n     * Returns resource class definitions for ontologies.\n     *\n     * @returns ResourceClassIrisForOntology - all resource class definitions grouped by ontologies.\n     */\n    getResourceClassForOntology(): ResourceClassIrisForOntology {\n        return this.resourceClassesForOntology;\n    }\n\n    /**\n     * Returns all resource classes as an object.\n     *\n     * @returns ResourceClasses - all resource class definitions as an object.\n     */\n    getResourceClasses(): ResourceClasses {\n        return this.resourceClasses;\n    }\n\n    /**\n     * Returns all resource classes as an array.\n     *\n     * @param {boolean} sortAsc sort resource classes by label in ascending order by default\n     * @returns ResourceClass[]\n     */\n    getResourceClassesAsArray(sortAsc: boolean = true): Array<ResourceClass> {\n\n        const resClasses: Array<ResourceClass> = [];\n\n        // tslint:disable-next-line:forin\n        for (const resClassIri in this.resourceClasses) {\n            const resClass: ResourceClass = this.resourceClasses[resClassIri];\n            resClasses.push(resClass);\n        }\n\n        // resourceClasses order by label in ascending order\n        resClasses.sort(OntologyInformation.sortFunc);\n\n        // resourceClasses order by label in descending order\n        if (!sortAsc) {\n            resClasses.reverse();\n        }\n\n        return resClasses;\n\n    }\n\n    /**\n     * Returns a resource class's label.\n     *\n     * @param {string} resClass resource class to query for.\n     * @returns string - the resource class's label.\n     */\n    getLabelForResourceClass(resClass: string): string {\n\n        if (resClass !== undefined) {\n\n            const resClassDef: ResourceClass = this.resourceClasses[resClass];\n\n            if (resClassDef !== undefined && resClassDef.label !== undefined) {\n                return resClassDef.label;\n            } else {\n                console.log(`cannot get label for ${resClass}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForResourceClass without argument resClass');\n        }\n    }\n\n    /**\n     * Returns all properties as an object.\n     *\n     * @returns Properties - all properties as an object.\n     */\n    getProperties(): Properties {\n        return this.properties;\n    }\n\n    /**\n     * Returns all properties as an array.\n     *\n     * @param {boolean} sortAsc sort properties by label in ascending order by default\n     * @returns Property[] - all properties as an array.\n     */\n    getPropertiesAsArray(sortAsc: boolean = true): Array<Property> {\n\n        const properties: Array<Property> = [];\n\n        // tslint:disable-next-line:forin\n        for (const propIri in this.properties) {\n            const prop: Property = this.properties[propIri];\n            properties.push(prop);\n        }\n\n        // properties order by label in ascending order\n        properties.sort(OntologyInformation.sortFunc);\n\n        // properties order by label in descending order\n        if (!sortAsc) {\n            properties.reverse();\n        }\n\n        return properties;\n\n    }\n\n    /**\n     * Returns a property's label.\n     *\n     * @param {string} property to query for.\n     * @returns string - the property's label.\n     */\n    getLabelForProperty(property: string): string {\n\n        if (property !== undefined) {\n\n            const propDef: Property = this.properties[property];\n\n            if (propDef !== undefined && propDef.label !== undefined) {\n                return propDef.label;\n            } else {\n                console.log(`cannot get label for ${property}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForProperty without argument property');\n        }\n    }\n\n}\n\n\n/**\n * Requests ontology information from Knora and caches it.\n * Other components or services obtain ontology information through this service.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class OntologyCacheService {\n\n    /**\n     * Ontologies ingored by this service.\n     * @param {string[]} excludedOntologies\n     */\n    private excludedOntologies: Array<string> = [KnoraConstants.SalsahGuiOntology, KnoraConstants.StandoffOntology];\n\n    /**\n     * @param {string[]} excludedProperties properties that Knora is not responsible for and that have to be ignored because they cannot be resolved at the moment.\n     */\n    private excludedProperties: Array<string> = [KnoraConstants.RdfsLabel];\n\n    /**\n     * @param {string[]} nonResourceClasses class definitions that are not be treated as Knora resource classes\n     */\n    private nonResourceClasses: Array<string> = [KnoraConstants.ForbiddenResource, KnoraConstants.XMLToStandoffMapping, KnoraConstants.ListNode];\n\n    /**\n     * @param {OntologyCache} cacheOntology central instance that caches all definitions\n     */\n    private cacheOntology: OntologyCache = new OntologyCache();\n\n    constructor(private _ontologyService: OntologyService) {\n    }\n\n    /**\n     * Requests the metadata of all ontologies from Knora.\n     *\n     * @returns Observable<object> - metadata for all ontologies as JSON-LD (no prefixes, all Iris fully expanded).\n     */\n    private getOntologiesMetadataFromKnora(): Observable<object> {\n\n        return this._ontologyService.getOntologiesMetadata().pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Requests all entity definitions (resource classes and properties) for the given ontology from Knora.\n     *\n     * @param {string} ontologyIri the Iri of the requested ontology.\n     * @returns Observable<object> - metadata for all entity definitions for ontology from Knora.\n     */\n    private getAllEntityDefinitionsForOntologyFromKnora(ontologyIri: string): Observable<object> {\n\n        return this._ontologyService.getAllEntityDefinitionsForOntologies(ontologyIri).pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Writes all the ontologies' metadata returned by Knora to the cache.\n     *\n     * @param {object[]} ontologies metadata of all existing ontologies as JSON-LD.\n     * @returns a new OntologyMetadata object\n     */\n    private convertAndWriteOntologiesMetadataToCache(ontologies: object[]) {\n\n        this.cacheOntology.ontologies = ontologies.map(\n            ontology => {\n                return new OntologyMetadata(ontology['@id'], ontology[KnoraConstants.RdfsLabel]);\n            }\n        );\n    }\n\n    /**\n     * Returns all ontologies' metadata from the cache and returns them.\n     *\n     * @returns Array<OntologyMetadata> - metadata of all existing ontologies.\n     */\n    private getAllOntologiesMetadataFromCache(): Array<OntologyMetadata> {\n\n        return this.cacheOntology.ontologies;\n\n    }\n\n    /**\n     * Returns resource class Iris from the ontology response.\n     * `knora-api:Resource` will be excluded.\n     *\n     * @param {Array<object>} classDefinitions the class definitions in an ontology response.\n     * @returns string[] - resource class Iris from the given class definitions.\n     */\n    private getResourceClassIrisFromOntologyResponse(classDefinitions: Array<object>): string[] {\n        const resourceClassIris: string[] = [];\n\n        for (const classDef of classDefinitions) {\n            const classIri = classDef['@id'];\n\n            // check that class name is not listed as a non resource class and that the isResourceClass flag is present and set to true\n            if (\n                classIri !== KnoraConstants.Resource && this.nonResourceClasses.indexOf(classIri)\n                === -1 && (classDef[KnoraConstants.IsResourceClass] !== undefined && classDef[KnoraConstants.IsResourceClass] === true)) {\n                // it is not a value class, but a resource class definition\n                resourceClassIris.push(classIri);\n            }\n        }\n\n        return resourceClassIris;\n    }\n\n    /**\n     * Converts a Knora response for all entity definitions for the requested ontology\n     * into an internal representation and caches it.\n     *\n     * Knora automatically includes the property definitions referred to in the cardinalities of resource classes.\n     * If they are defined in another ontology, that ontology is requested from Knora too.\n     *\n     * @param {Object} ontology the ontology to be cached.\n     * @returns void\n     */\n    private convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology: object): void {\n\n        const graph = ontology['@graph'];\n\n        // get all class definitions\n        const classDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlClass;\n            });\n\n        // get all property definitions\n        const propertyDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlObjectProperty ||\n                    entityType === KnoraConstants.OwlDatatypeProperty ||\n                    entityType === KnoraConstants.OwlAnnotationProperty ||\n                    entityType === KnoraConstants.RdfProperty;\n            });\n\n\n        // cache all resource class Iris belonging to the current ontology\n        this.cacheOntology.resourceClassIrisForOntology[ontology['@id']] = this.getResourceClassIrisFromOntologyResponse(classDefs);\n\n        // write class and property defintions to cache\n        this.convertAndWriteEntityDefinitionsToCache(classDefs, propertyDefs);\n\n    }\n\n    /**\n     * Returns definitions for the requested ontologies from the cache.\n     *\n     * @param {string[]} ontologyIris the ontologies for which definitions should be returned.\n     * @returns Observable<OntologyInformation> - the definitions for the requested ontologies.\n     */\n    private getOntologyInformationFromCache(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const resourceClassesForOntology = new ResourceClassIrisForOntology();\n\n        // collect resource class Iris for all requested named graphs\n        let allResourceClassIris = [];\n\n        for (const ontologyIri of ontologyIris) {\n\n            if (this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined) {\n                throw new OntologyCacheError(`getResourceClassesForOntologiesFromCache: ontology not found in cache: ${ontologyIri}`);\n            }\n\n            // add information for the given ontology\n            resourceClassesForOntology[ontologyIri] = this.cacheOntology.resourceClassIrisForOntology[ontologyIri];\n\n            // add all resource class Iris of this ontology\n            allResourceClassIris = allResourceClassIris.concat(this.cacheOntology.resourceClassIrisForOntology[ontologyIri]);\n        }\n\n        // get resource class definitions for all requested ontologies\n        return this.getResourceClassDefinitions(allResourceClassIris).pipe(\n            map(\n                resClassDefs => {\n                    return new OntologyInformation(\n                        resourceClassesForOntology, resClassDefs.getResourceClasses(), resClassDefs.getProperties()\n                    );\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora ontology response into an internal representation and caches it.\n     *\n     * @param {object[]} resourceClassDefinitions the resource class definitions returned by Knora.\n     * @param {object[]} propertyClassDefinitions the property definitions returned by Knora.\n     * @returns void\n     */\n    private convertAndWriteEntityDefinitionsToCache(resourceClassDefinitions: Array<object>, propertyClassDefinitions: Array<object>): void {\n\n        // convert and cache each given resource class definition\n        for (const resClass of resourceClassDefinitions) {\n\n            const resClassIri = resClass['@id'];\n\n            // represents all cardinalities of this resource class\n            const cardinalities: Cardinality[] = [];\n            const guiOrder: GuiOrder[] = [];\n\n            if (resClass[KnoraConstants.RdfsSubclassOf] !== undefined) {\n\n                let subclassOfCollection;\n\n                // check if it is a single object or a collection\n                if (!Array.isArray(resClass[KnoraConstants.RdfsSubclassOf])) {\n                    subclassOfCollection = [resClass[KnoraConstants.RdfsSubclassOf]];\n                } else {\n                    subclassOfCollection = resClass[KnoraConstants.RdfsSubclassOf];\n                }\n\n\n\n                // get cardinalities for the properties of a resource class\n                for (const curCard of subclassOfCollection) {\n\n\n\n                    // make sure it is a cardinality (it could also be an Iri of a superclass)\n                    if (curCard instanceof Object && curCard['@type'] !== undefined && curCard['@type'] === KnoraConstants.OwlRestriction) {\n\n                        let newCard;\n\n                        // get occurrence\n                        if (curCard[KnoraConstants.OwlMinCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.minCard, curCard[KnoraConstants.OwlMinCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.card, curCard[KnoraConstants.OwlCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlMaxCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.maxCard, curCard[KnoraConstants.OwlMaxCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else {\n                            // no known occurrence found\n                            throw new TypeError(`cardinality type invalid for ${resClass['@id']} ${curCard[KnoraConstants.OwlOnProperty]}`);\n                        }\n\n                        // add cardinality\n                        cardinalities.push(newCard);\n\n                        // get gui order\n                        let newGuiOrder;\n                        if (curCard[KnoraConstants.SalsahGuiOrder] !== undefined) {\n                            newGuiOrder = new GuiOrder(curCard[KnoraConstants.SalsahGuiOrder], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                            // add gui order\n                            guiOrder.push(newGuiOrder);\n                        }\n\n\n\n                    }\n\n                }\n            }\n\n            const resClassObj = new ResourceClass(\n                resClassIri,\n                resClass[KnoraConstants.ResourceIcon],\n                resClass[KnoraConstants.RdfsComment],\n                resClass[KnoraConstants.RdfsLabel],\n                cardinalities,\n                guiOrder\n            );\n\n            // write this resource class definition to the cache object\n            this.cacheOntology.resourceClasses[resClassIri] = resClassObj;\n        }\n\n        // cache the property definitions\n        this.convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyClassDefinitions);\n    }\n\n    /**\n     * Gets information about resource classes from the cache.\n     * The answer includes the property definitions referred to by the cardinalities of the given resource classes.\n     *\n     * @param {string[]} resClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - an [[OntologyCache]] representing the requested resource classes.\n     */\n    private getResourceClassDefinitionsFromCache(resClassIris: string[]): Observable<OntologyInformation> {\n        // collect the definitions for each resource class from the cache\n\n        const resClassDefs = new ResourceClasses();\n\n        // collect the properties from the cardinalities of the given resource classes\n        const propertyIris = [];\n\n        resClassIris.forEach(\n            resClassIri => {\n                resClassDefs[resClassIri] = this.cacheOntology.resourceClasses[resClassIri];\n\n                this.cacheOntology.resourceClasses[resClassIri].cardinalities.forEach(\n                    card => {\n                        // get property definition for each cardinality\n                        propertyIris.push(card.property);\n                    }\n                );\n            });\n\n        return this.getPropertyDefinitions(propertyIris).pipe(\n            map(\n                propDefs => {\n                    return new OntologyInformation(new ResourceClassIrisForOntology(), resClassDefs, propDefs.getProperties());\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora response for ontology information about properties\n     * into an internal representation and cache it.\n     *\n     * @param {object[]} propertyDefinitionsFromKnora the property definitions returned by Knora\n     * @returns void\n     */\n    private convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyDefinitionsFromKnora: Array<object>): void {\n\n        // convert and cache each given property definition\n        for (const propDef of propertyDefinitionsFromKnora) {\n\n            const propIri = propDef['@id'];\n\n            let isEditable = false;\n            if (propDef[KnoraConstants.isEditable] !== undefined && propDef[KnoraConstants.isEditable] === true) {\n                isEditable = true;\n            }\n\n            let isLinkProperty = false;\n            if (propDef[KnoraConstants.isLinkProperty] !== undefined && propDef[KnoraConstants.isLinkProperty] === true) {\n                isLinkProperty = true;\n            }\n\n            let isLinkValueProperty = false;\n            if (propDef[KnoraConstants.isLinkValueProperty] !== undefined && propDef[KnoraConstants.isLinkValueProperty] === true) {\n                isLinkValueProperty = true;\n            }\n\n            let subPropertyOf = [];\n            if (propDef[KnoraConstants.subPropertyOf] !== undefined && Array.isArray(propDef[KnoraConstants.subPropertyOf])) {\n                subPropertyOf = propDef[KnoraConstants.subPropertyOf].map((superProp: Object) => superProp['@id']);\n            } else if (propDef[KnoraConstants.subPropertyOf] !== undefined) {\n                subPropertyOf.push(propDef[KnoraConstants.subPropertyOf]['@id']);\n            }\n\n            let objectType;\n            if (propDef[KnoraConstants.ObjectType] !== undefined) {\n                objectType = propDef[KnoraConstants.ObjectType]['@id'];\n            }\n\n            const guiAttribute = [];\n            if (propDef[KnoraConstants.SalsahGuiAttribute] !== undefined) {\n                if (Array.isArray(propDef[KnoraConstants.SalsahGuiAttribute])) {\n                    for (const attr of propDef[KnoraConstants.SalsahGuiAttribute]) {\n                        guiAttribute.push(attr);\n                    }\n                } else {\n                    guiAttribute.push(propDef[KnoraConstants.SalsahGuiAttribute]);\n                }\n            }\n\n            // cache property definition\n            this.cacheOntology.properties[propIri] = new Property(\n                propIri,\n                objectType,\n                propDef[KnoraConstants.RdfsComment],\n                propDef[KnoraConstants.RdfsLabel],\n                subPropertyOf,\n                isEditable,\n                isLinkProperty,\n                isLinkValueProperty,\n                guiAttribute\n            );\n\n        }\n\n    }\n\n    /**\n     * Returns property definitions from the cache.\n     *\n     * @param {string[]} propertyIris the property definitions to be returned.\n     * @returns OntologyInformation - requested property defintions.\n     */\n    private getPropertyDefinitionsFromCache(propertyIris: string[]): OntologyInformation {\n\n        const propertyDefs = new Properties();\n\n        propertyIris.forEach(\n            propIri => {\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return;\n                }\n\n                if (this.cacheOntology.properties[propIri] === undefined) {\n                    throw new OntologyCacheError(`getPropertyDefinitionsFromCache: property not found in cache: ${propIri}`);\n                }\n\n                propertyDefs[propIri] = this.cacheOntology.properties[propIri];\n            }\n        );\n\n        return new OntologyInformation(new ResourceClassIrisForOntology(), new ResourceClasses(), propertyDefs);\n\n    }\n\n    /**\n     * Returns metadata about all ontologies.\n     *\n     * @returns Observable<Array<OntologyMetadata>> - metadata about all ontologies.\n     */\n    public getOntologiesMetadata(): Observable<Array<OntologyMetadata>> {\n\n        if (this.cacheOntology.ontologies.length === 0) {\n            // nothing in cache yet, get metadata from Knora\n            return this.getOntologiesMetadataFromKnora().pipe(\n                map(\n                    metadata => {\n                        this.convertAndWriteOntologiesMetadataToCache(metadata['@graph'].filter((onto) => {\n                            // ignore excluded ontologies\n                            return this.excludedOntologies.indexOf(onto['@id']) === -1;\n                        }));\n                        return this.getAllOntologiesMetadataFromCache();\n                    }\n                )\n            );\n        } else {\n            // return metadata from cache\n            return of(this.getAllOntologiesMetadataFromCache());\n        }\n\n    }\n\n\n    /**\n     * Requests the requested ontologies from Knora, adding them to the cache.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be requested.\n     * @returns Observable<any[]>\n     */\n    private getAndCacheOntologies(ontologyIris: string[]): Observable<any[]> {\n\n        // array to be populated with Observables\n        const observables = [];\n\n        // do a request for each ontology\n        ontologyIris.forEach(ontologyIri => {\n            // push an Observable onto `observables`\n            observables.push(this.getAllEntityDefinitionsForOntologyFromKnora(ontologyIri).pipe(\n                map(\n                    (ontology: object) => {\n                        // write response to cache\n                        this.convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology);\n                    }\n                )\n            ));\n        });\n\n        // forkJoin returns an Observable of an array of results\n        // returned by each Observable contained in `observables`\n        // a subscription to the Observable returned by forkJoin is executed\n        // once all Observables have been completed\n        return forkJoin(observables);\n    }\n\n\n    /**\n     * Returns the entity definitions for the requested ontologies.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be queried.\n     * @returns Observable<OntologyInformation> - all ontology metadata from the cache\n     */\n    public getEntityDefinitionsForOntologies(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const ontologyIrisToQuery = ontologyIris.filter(\n            ontologyIri => {\n                // return the ontology Iris that are not cached yet\n                return this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined;\n            });\n\n        // get ontologies that are mot cached yet\n        if (ontologyIrisToQuery.length > 0) {\n\n            return this.getAndCacheOntologies(ontologyIrisToQuery).pipe(\n                mergeMap(\n                    () => {\n                        // executed once all ontologies have been cached\n                        return this.getOntologyInformationFromCache(ontologyIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getOntologyInformationFromCache(ontologyIris);\n        }\n\n    }\n\n    /**\n     * Returns the definitions for the given resource class Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * Properties contained in the cardinalities will be returned too.\n     *\n     * @param {string[]} resourceClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - the requested resource classes (including properties).\n     */\n    public getResourceClassDefinitions(resourceClassIris: string[]): Observable<OntologyInformation> {\n\n        const resClassIrisToQueryFor: string[] = resourceClassIris.filter(\n            resClassIri => {\n\n                // return the resource class Iris that are not cached yet\n                return this.cacheOntology.resourceClasses[resClassIri] === undefined;\n\n            });\n\n        if (resClassIrisToQueryFor.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing resource classes\n            const ontologyIris: string[] = resClassIrisToQueryFor.map(\n                resClassIri => {\n                    return Utils.getOntologyIriFromEntityIri(resClassIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                mergeMap(\n                    () => {\n\n                        return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n\n        }\n    }\n\n    /**\n     * Get definitions for the given property Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be returned .\n     * @returns Observable<OntologyInformation> - the requested property definitions.\n     */\n    public getPropertyDefinitions(propertyIris: string[]): Observable<OntologyInformation> {\n\n        const propertiesToQuery: string[] = propertyIris.filter(\n            propIri => {\n\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return false;\n                }\n\n                // return the property Iris that are not cached yet\n                return this.cacheOntology.properties[propIri] === undefined;\n            }\n        );\n\n        if (propertiesToQuery.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing properties\n            const ontologyIris: string[] = propertiesToQuery.map(\n                propIri => {\n                    return Utils.getOntologyIriFromEntityIri(propIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                map(\n                    results => {\n                        if (results) {\n                            return this.getPropertyDefinitionsFromCache(propertyIris);\n                        } else {\n                            throw new Error('Problem with: return this.getPropertyDefinitionsFromCache(propertyIris);');\n                        }\n                    }\n                )\n            );\n        } else {\n            return of(this.getPropertyDefinitionsFromCache(propertyIris));\n        }\n    }\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('AuthenticationResponse')\nexport class AuthenticationResponse {\n\n    @JsonProperty('token', String)\n    public token: string = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n\n@JsonObject('Project')\nexport class Project {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('shortname', String)\n    public shortname: string = undefined;\n\n    @JsonProperty('shortcode', String, true)\n    public shortcode: string = undefined;\n\n    @JsonProperty('longname', String, true)\n    public longname: string = undefined;\n\n    @JsonProperty('description', [StringLiteral], true)\n    public description: StringLiteral[] = [new StringLiteral()];\n\n    @JsonProperty('keywords', [String], true)\n    public keywords: string[] = undefined;\n\n    @JsonProperty('logo', String, true)\n    public logo: string = undefined;\n\n    @JsonProperty('institution', String, true)\n    public institution: string = undefined;\n\n    @JsonProperty('ontologies', [String])\n    public ontologies: string[] = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from '../projects/project';\n\n@JsonObject('Group')\nexport class Group {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('description', String)\n    public description: string = undefined;\n\n    @JsonProperty('project', Project, false)\n    public project: Project = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupResponse')\nexport class GroupResponse {\n\n    @JsonProperty('group', Group)\n    public group: Group = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupsResponse')\nexport class GroupsResponse {\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListInfo')\nexport class ListInfo {\n\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('projectIri', String, false)\n    public projectIri: string = undefined;\n\n    @JsonProperty('labels', [StringLiteral], true)\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral], true)\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('ListNode')\nexport class ListNode {\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('label', String, true)\n    public label: string = undefined;\n\n    @JsonProperty('children', [ListNode], true)\n    public children: ListNode[] = undefined;\n\n    @JsonProperty('level', Number, true)\n    public level: number = undefined;\n\n    @JsonProperty('position', Number, true)\n    public position: number = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\nimport { ListNode } from './list-node';\n\n@JsonObject('List')\nexport class List {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n\n    @JsonProperty('children', [ListNode], false)\n    public children: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\n\n@JsonObject('ListInfoResponse')\nexport class ListInfoResponse {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListNodeInfo')\nexport class ListNodeInfo {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListNodeInfoResponse')\nexport class ListNodeInfoResponse {\n\n    @JsonProperty('nodeinfo', ListNodeInfo, false)\n    public nodeinfo: ListNodeInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { List } from './list';\n\n@JsonObject('ListResponse')\nexport class ListResponse {\n\n    @JsonProperty('list', List, false)\n    public list: List = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListsResponse')\nexport class ListsResponse {\n\n    @JsonProperty('lists', [ListNodeInfo], false)\n    public lists: ListNodeInfo[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('OntologyInfoShort')\nexport class OntologyInfoShort {\n\n    @JsonProperty('ontologyIri', String)\n    public ontologyIri: string = undefined;\n\n    @JsonProperty('ontologyName', String)\n    public ontologyName: string = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('PermissionData')\nexport class PermissionData {\n\n    @JsonProperty('groupsPerProject', Object)\n    public groupsPerProject: any = undefined;\n\n    @JsonProperty('administrativePermissionsPerProject', Object)\n    public administrativePermissionsPerProject: any = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from '../groups/group';\nimport { PermissionData } from '../permissions/permission-data';\nimport { Project } from '../projects/project';\n\n@JsonObject('User')\nexport class User {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('email', String)\n    public email: string = undefined;\n\n    @JsonProperty('username', String)\n    public username: string = undefined;\n\n    @JsonProperty('password', String, true)\n    public password: string = undefined;\n\n    @JsonProperty('token', String, true)\n    public token: string = undefined;\n\n    @JsonProperty('givenName', String)\n    public givenName: string = undefined;\n\n    @JsonProperty('familyName', String)\n    public familyName: string = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('lang', String)\n    public lang: string = undefined;\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n    @JsonProperty('sessionId', String, true)\n    public sessionId: string = undefined;\n\n    @JsonProperty('permissions', PermissionData)\n    public permissions: PermissionData = undefined;\n\n    @JsonProperty('systemAdmin', Boolean, true)\n    public systemAdmin?: boolean = false;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from '../users/user';\n\n@JsonObject('ProjectMembersResponse')\nexport class ProjectMembersResponse {\n    @JsonProperty('members', [User])\n    public members: User[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n\n@JsonObject('ProjectResponse')\nexport class ProjectResponse {\n\n    @JsonProperty('project', Project)\n    public project: Project = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n@JsonObject('ProjectsResponse')\nexport class ProjectsResponse {\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UsersResponse')\nexport class UsersResponse {\n\n    @JsonProperty('users', [User])\n    public users: User[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UserResponse')\nexport class UserResponse {\n\n    @JsonProperty('user', User)\n    public user: User = undefined;\n}\n","import { ReadResource } from '../../../';\nimport { OntologyInformation } from '../../../../services';\nimport { KnoraConstants } from '../../knora-constants';\nimport { DateRangeSalsah, DateSalsah } from '../../shared/date';\n\n/**\n * An abstract interface representing any value object.\n */\nexport interface ReadPropertyItem {\n\n    /**\n     * The value object's Iri.\n     */\n    readonly id: string;\n\n    /**\n     * The value object's type.\n     */\n    readonly type: string;\n\n    /**\n     * The property pointing to the value object.\n     */\n    readonly propIri: string;\n\n    /**\n     * Gets the class name of the class that implements this interface.\n     *\n     * @returns {string}\n     */\n    getClassName(): string;\n\n    /**\n     * Gets the value as a string (complexity of the value possibly reduced).\n     *\n     * @returns {string}\n     */\n    getContent(): string;\n}\n\n/**\n * Abstract class representing a text value object with or without markup.\n */\nexport abstract class ReadTextValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string = KnoraConstants.TextValue;\n\n    abstract propIri: string;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a text value object without markup (mere character string).\n */\nexport class ReadTextValueAsString extends ReadTextValue {\n\n    constructor (readonly id: string, readonly propIri: string, readonly str: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsString;\n    }\n\n    getContent() {\n        return this.str;\n    }\n}\n\n/**\n * Represents resources referred to by standoff links.\n */\nexport class ReferredResourcesByStandoffLink {\n    [index: string]: ReadResource;\n}\n\n/**\n * Represents a text value object with markup that has been turned into HTML.\n */\nexport class ReadTextValueAsHtml extends ReadTextValue {\n\n    constructor (readonly id: string, readonly propIri: string, readonly html: string, readonly referredResources: ReferredResourcesByStandoffLink) {\n        super();\n    }\n\n    /**\n     * Gets information about a resource referred to by a standoff link from a text value.\n     *\n     * @param {string} resourceIri the Iri of the referred resource.\n     * @param {OntologyInformation} ontologyInfo ontology information.\n     * @returns {string} information about the referred resource's class and its label.\n     */\n\n\n    getReferredResourceInfo(resourceIri: string, ontologyInfo: OntologyInformation) {\n        if (this.referredResources !== undefined && this.referredResources[resourceIri] !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResources[resourceIri].type);\n\n            return this.referredResources[resourceIri].label + ` (${resClassLabel})`;\n        } else {\n            return 'no information found about referred resource (target of standoff link)';\n        }\n    }\n\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsHtml;\n    }\n\n    getContent() {\n        return this.html;\n    }\n\n}\n\n/**\n * Represents a text value object with markup as XML.\n */\nexport class ReadTextValueAsXml extends ReadTextValue {\n\n    constructor (readonly id: string, readonly propIri: string, readonly xml: string, readonly mappingIri: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsXml;\n    }\n\n    getContent() {\n        return this.xml;\n    }\n\n}\n\n\n/**\n * Represents a date value object.\n */\nexport class ReadDateValue implements ReadPropertyItem {\n\n    constructor (\n        readonly id: string,\n        readonly propIri: string,\n        readonly calendar: string,\n        readonly startYear: number,\n        readonly endYear: number,\n        readonly startEra: string,\n        readonly endEra: string,\n        readonly startMonth?: number,\n        readonly endMonth?: number,\n        readonly startDay?: number,\n        readonly endDay?: number) {\n    }\n\n    readonly type = KnoraConstants.DateValue;\n\n    private separator = '/';\n\n    getDateSalsah(): DateSalsah | DateRangeSalsah {\n        if (this.startYear === this.endYear && this.startMonth === this.endMonth && this.startDay === this.endDay && this.startEra === this.endEra) {\n            // precise date\n            return new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay);\n        } else {\n            // date period\n            return new DateRangeSalsah(new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay), new DateSalsah(this.calendar, this.endEra, this.endYear, this.endMonth, this.endDay));\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadDateValue;\n    }\n\n    getContent() {\n        return this.getDateSalsah().getDateAsString();\n    }\n}\n\n/**\n * Represents a link value object (reification).\n */\nexport class ReadLinkValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly referredResourceIri: string, readonly referredResource?: ReadResource) {\n\n    }\n\n    readonly type = KnoraConstants.LinkValue;\n\n    getReferredResourceInfo(ontologyInfo: OntologyInformation) {\n        if (this.referredResource !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResource.type);\n\n            return this.referredResource.label + ` (${resClassLabel})`;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadLinkValue;\n    }\n\n    getContent() {\n        if (this.referredResource !== undefined) {\n            return this.referredResource.label;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n}\n\n/**\n * Represents an integer value object.\n */\nexport class ReadIntegerValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly integer: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntegerValue;\n    }\n\n    getContent() {\n        return this.integer.toString();\n    }\n\n}\n\n/**\n * Represents a decimal value object.\n */\nexport class ReadDecimalValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly decimal: number) {\n\n    }\n\n    readonly type = KnoraConstants.DecimalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDecimalValue;\n    }\n\n    getContent() {\n        return this.decimal.toString();\n    }\n}\n\n\n/**\n * Abstract class for file representations like stillImage, movingImage, audio etc.\n */\nexport abstract class FileValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string;\n\n    abstract propIri: string;\n\n    // abstract typeSpecificProps: any;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a still image value object.\n */\nexport class ReadStillImageFileValue extends FileValue {\n\n    constructor (\n        readonly id: string,\n        readonly propIri: string,\n        readonly imageFilename: string,\n        readonly imageServerIIIFBaseURL: string,\n        readonly imagePath: string,\n        readonly dimX: number,\n        readonly dimY: number) {\n        super();\n\n        // if the image is a jpeg, it is a preview image\n        this.isPreview = imageFilename.endsWith('.jpg');\n\n    }\n\n    readonly type = KnoraConstants.StillImageFileValue;\n\n    readonly isPreview: boolean;\n\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.imagePath;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.imageServerIIIFBaseURL + '/' + this.imageFilename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadStillImageFileValue;\n    }\n\n    getContent() {\n        return this.imagePath;\n    }\n}\n\n/**\n * Represents a moving image value object.\n */\nexport class ReadMovingImageFileValue extends FileValue {\n\n    constructor (\n        readonly id: string,\n        readonly propIri: string,\n        readonly filename: string,\n        readonly path: string,\n        readonly dimX: number,\n        readonly dimY: number,\n        readonly duration: number,\n        readonly fps?: number) {\n        super();\n    }\n\n    readonly type = KnoraConstants.MovingImageFileValue;\n\n    // preview doesn't include the video file itself\n    readonly isPreview: boolean;\n\n    getClassName(): string {\n        return KnoraConstants.ReadMovingImageFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents an audio value object.\n */\nexport class ReadAudioFileValue extends FileValue {\n\n    constructor (\n        readonly id: string,\n        readonly propIri: string,\n        readonly filename: string,\n        readonly path: string,\n        readonly duration: number) {\n        super();\n    }\n\n    readonly type = KnoraConstants.AudioFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadAudioFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a DDD value object.\n */\nexport class ReadDDDFileValue extends FileValue {\n\n    constructor (\n        readonly id: string,\n        readonly propIri: string,\n        readonly filename: string,\n        readonly path: string) {\n        super();\n    }\n\n    readonly type = KnoraConstants.DDDFileValue;\n\n    // preview doesn't include the DDD file itself\n    readonly isPreview: boolean;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDDDFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a Document value object.\n */\nexport class ReadDocumentFileValue extends FileValue {\n\n    constructor (\n        readonly id: string,\n        readonly propIri: string,\n        readonly filename: string,\n        readonly path: string) {\n        super();\n    }\n\n    readonly type = KnoraConstants.DocumentFileValue;\n\n    // preview doesn't include the DDD file itself\n    readonly isPreview: boolean;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDocumentFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a text representation value object\n */\nexport class ReadTextFileValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly textFilename: string, readonly textFileURL: string) {\n\n    }\n\n    readonly type = KnoraConstants.TextFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextFileValue;\n    }\n\n    getContent() {\n        return this.textFileURL;\n    }\n\n}\n\n/**\n * Represents a color value object.\n */\nexport class ReadColorValue implements ReadPropertyItem {\n\n    constructor (readonly id: string,\n        readonly propIri: string,\n        readonly colorHex: string) {\n    }\n\n    readonly type = KnoraConstants.ColorValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadColorValue;\n    }\n\n    getContent() {\n        return this.colorHex;\n    }\n}\n\n/**\n * Represents a point in a 2D-coordinate system (for geometry values).\n */\nexport class Point2D {\n    constructor (public x: number, public y: number) {\n    }\n}\n\n/**\n * Represents a geometry value parsed from JSON.\n */\nexport class RegionGeometry {\n    constructor (public status: string,\n        public lineColor: string,\n        public lineWidth: number,\n        public points: Point2D[],\n        public type: string,\n        public radius?: Point2D\n    ) {\n    }\n}\n\n/**\n * Represents a geometry value object.\n */\nexport class ReadGeomValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly geometryString: string) {\n\n        const geometryJSON = JSON.parse(geometryString);\n\n        const points: Point2D[] = [];\n        for (const point of geometryJSON.points) {\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        let radius;\n        if (geometryJSON.radius) {\n            radius = new Point2D(geometryJSON.radius.x, geometryJSON.radius.y);\n        }\n\n        this.geometry = new RegionGeometry(\n            geometryJSON.status,\n            geometryJSON.lineColor,\n            geometryJSON.lineWidth,\n            points,\n            geometryJSON.type,\n            radius\n        );\n\n    }\n\n    readonly geometry: RegionGeometry;\n\n    readonly type = KnoraConstants.GeomValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadGeomValue;\n    }\n\n    getContent() {\n        return this.geometryString;\n    }\n}\n\n/**\n * Represents a URI value object.\n */\nexport class ReadUriValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly uri: string) {\n\n    }\n\n    readonly type = KnoraConstants.UriValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadUriValue;\n    }\n\n    getContent() {\n        return this.uri;\n    }\n\n}\n\n/**\n * Represents a Boolean value object.\n */\nexport class ReadBooleanValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly bool: boolean) {\n\n    }\n\n    readonly type = KnoraConstants.BooleanValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadBooleanValue;\n    }\n\n    getContent() {\n        return this.bool.toString();\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadIntervalValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly intervalStart: number, readonly intervalEnd: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntervalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntervalValue;\n    }\n\n    getContent() {\n        return this.intervalStart.toString() + '-' + this.intervalEnd;\n    }\n\n}\n\n/**\n * Represents a list value object.\n */\nexport class ReadListValue implements ReadPropertyItem {\n\n    constructor (readonly id: string, readonly propIri: string, readonly listNodeIri: string) {\n\n    }\n\n    readonly type = KnoraConstants.ListValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadListValue;\n    }\n\n    getContent() {\n        return this.listNodeIri;\n    }\n\n}\n","import { ReadProperties, StillImageRepresentation } from '../../../';\nimport { FileRepresentation } from '../representations/fileRepresentation';\nimport { MovingImageRepresentation } from '../moving-image/moving-image-representation';\nimport { ReadPropertyItem } from '@knora/core/public_api';\n\n/**\n * @deprecated Use **Resource** instead\n *\n * Represents a resource and its properties.\n */\nexport class ReadResource {\n\n    /**\n     *\n     * @param {string} id the resource's Iri.\n     * @param {string} type the resource's type (class).\n     * @param {string} label the resource's rdfs:label.\n     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).\n     * @param {ReadProperties} properties the resources's properties.\n     */\n    constructor (\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        // TODO: we should use a more generic object here; or what's about incomingSequences?\n        public incomingRegions: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation\n        public incomingStillImageRepresentations: Array<ReadResource>,\n        public incomingLinks: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like media or fileRepresentation\n        public stillImageRepresentationsToDisplay: StillImageRepresentation[],\n        // TODO: the properties should be a list: Array<ReadProperties> or not?\n        public readonly properties?: ReadProperties) {\n    }\n\n}\n\n/**\n * This is a temporary class, to test a new resource setup.\n * When it works, we will replace the ReadResource object\n */\nexport class Resource {\n    constructor (\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        public incomingAnnotations: Array<Resource>,    // = incomingRegions in ReadResource\n        public incomingFileRepresentations: Array<Resource>,    // = incomingStillImageRepresentations in ReadResource\n        public incomingLinks: Array<Resource>,\n        public fileRepresentationsToDisplay: Array<StillImageRepresentation | MovingImageRepresentation | ReadPropertyItem>,  // = stillImageRepresentationsToDisplay in ReadResource\n        public readonly properties?: ReadProperties) {\n    }\n}\n\n/*\nfileRepresentationsToDisplay ==> what is the main media file to display?\n\nin case of\n\nproperty.hasStillImageFile\nproperty.hasMovingImageFile\nproperty.hasAudioFile\nproperty.hasTextFile\nproperty.hasDocumentFile\nproperty.hasDDDImageFile\n\nshow this media file.\n\nOtherwise:\n\nresource.incomingStillImageRepresentations?\nresource.incomingMovingImageRepresentations?\nresource.incomingAudioRepresentations?\nresource.incomingTextRepresentations?\nresource.incomingDocumentRepresentations?\nresource.incomingDDDImageRepresentations?\n\nA resource can have more than one incomingRepresentation\n\n\n*/","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceError } from '../declarations/api-service-error';\nimport { ApiServiceResult } from '../declarations/api-service-result';\nimport { from } from 'rxjs';\nimport { KuiCoreConfigToken } from '../core.module';\nimport { KnoraConstants } from '../declarations/api/knora-constants';\n\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\nconst semver = require('semver');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport abstract class ApiService {\n\n    // if is loading, set it true;\n    // it can be used in components\n    // for progress loader element\n    loading = false;\n\n    protected constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config) {\n\n        // console.log('ApiService constructor: config', config);\n    }\n\n    /**\n     * GET\n     *\n     * @param {string} path the URL for the GET request.\n     * @param {HttpParams} params the parameters for the GET request.\n     * @returns Observable of any\n     */\n    httpGet(path: string, params?: HttpParams): Observable<any> {\n\n        this.loading = true;\n\n        return this.http.get(this.config.api + path, { observe: 'response', params: params }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(response.headers.get('Server'));\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * Processes JSON-LD returned by Knora.\n     * Expands Iris and creates an empty context object.\n     *\n     * @param {ApiServiceResult} resourceResponse\n     */\n    protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n        const resPromises = jsonld.promises;\n\n\n        // compact JSON-LD using an empty context: expands all Iris\n        const resPromise = resPromises.compact(resourceResponse.body, {});\n\n        console.log('resPromises', resPromises);\n\n        // convert promise to Observable and return it\n        // https://www.learnrxjs.io/operators/creation/frompromise.html\n        return from(resPromise);\n\n    }\n\n    /**\n     * POST\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPost(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.post(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * PUT\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPut(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.put(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n    /**\n     * DELETE\n     *\n     * @param {string} path\n     * @returns Observable of any\n     */\n    httpDelete(path: string): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.delete(this.config.api + path, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param {HttpErrorResponse} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        // console.error(error);\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n\n    /**\n     * handle json error in case of type error in json response (json2typescript)\n     *\n     * @param {any} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n        if (error instanceof ApiServiceError) return throwError(error);\n\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = -1;\n        serviceError.statusText = 'Invalid JSON';\n        serviceError.errorInfo = error;\n        serviceError.url = '';\n        return throwError(serviceError);\n\n    }\n\n    protected compareVersion(server: string): void {\n\n        // expected knora api version\n        const expected: string = KnoraConstants.KnoraVersion;\n\n        // existing knora api version\n        if (server) {\n            const versions: string[] = server.split(' ');\n            const existing: string = versions[0].split('/')[1];\n\n            // compare the two versions: expected vs existing\n            if (semver.diff(existing, expected) === 'major') {\n                console.warn('The version of the @knora/core module works with Knora v' + expected + ', but you are using it with Knora v' + existing);\n            }\n        } else {\n            // console.warn('No server information from headers response');\n        }\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { NewOntology } from '../../declarations/api/v2/ontology/new-ontology';\nimport { ApiService } from '../api.service';\n\n/**\n * Requests ontology information from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------\n\n    /**\n     * @deprecated: Use **getAllOntologies()** instead\n     *\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getOntologiesMetadata(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getAllOntologies(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the ontologies of a specific project\n     *\n     * @param projectIri\n     * @returns Observable<ApiServiceResult> - the metadata of project ontologies.\n     */\n    getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // GET ontology\n    // ------------------------------------------------------------------------\n\n    /**\n     * Requests all entity definitions for the given ontologies from Knora's ontologies route.\n     *\n     * @param {string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.\n     * @returns Observable<ApiServiceResult> - the requested ontology.\n     */\n    getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n    }\n\n    /**\n     * Requests information about the given resource classes from Knora's ontologies route.\n     *\n     * @param {string[]} resourceClassIris the Iris of the resource classes to be queried.\n     * @returns Observable<ApiServiceResult> - the requested resource class definitions.\n     */\n    getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n        if (resourceClassIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n        }\n\n        let resClassUriEnc = '';\n\n        resourceClassIris.forEach(function (resClassIri) {\n            resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n    }\n\n    /**\n     * Requests properties from Knora's ontologies route.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be queried.\n     * @returns Observable<ApiServiceResult> - the requested properties.\n     */\n    getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n        if (propertyIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n        }\n\n        let propertiesUriEnc = '';\n\n        propertyIris.forEach(function (resClassIri) {\n            propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new ontology.\n     *\n     * @param {NewOntology} data Data contains: projectIri, name, label\n     * @returns Observable<ApiServiceResult>\n     */\n    createOntology(data: NewOntology): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies';\n\n        const ontology = {\n            'knora-api:ontologyName': data.name,\n            'knora-api:attachedToProject': {\n                '@id': data.projectIri,\n            },\n            'rdfs:label': data.label,\n            '@context': {\n                'rdfs': KnoraConstants.RdfsSchema,\n                'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n            }\n        };\n\n        return this.httpPost(path, ontology).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { ReadResource, Resource } from './read-resource';\nimport { OntologyInformation } from '../../../../services/v2/ontology-cache.service';\n\n/**\n * @deprecated Use **ResourceSequence** instead\n *\n * Represents a sequence of resources.\n */\nexport class ReadResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `ReadResource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<ReadResource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor (public readonly resources: Array<ReadResource>, public readonly numberOfResources: number) {\n    }\n\n}\n\nexport class ResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `Resource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<Resource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor (public readonly resources: Array<Resource>, public readonly numberOfResources: number) {\n    }\n}\n","/**\n * Represents the result of a count query.\n */\nexport class CountQueryResult {\n\n    /**\n     *\n     * @param numberOfResults total number of results for a query.\n     */\n    constructor(public readonly numberOfResults: number) {\n\n    }\n}\n","import { ReadStillImageFileValue } from '../../../';\nimport { KnoraConstants } from '../../knora-constants';\nimport { ImageRegion } from './image-region';\n\n/**\n * Represents an image including its regions.\n */\n\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param {ReadStillImageFileValue} stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param {ImageRegion[]} regions the regions belonging to the image.\n     */\n    constructor (readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: ImageRegion[], readonly type: string = KnoraConstants.StillImageFileValue) {\n\n    }\n\n}\n","import { ReadGeomValue, ReadResource } from '../../../';\nimport { KnoraConstants } from '../../knora-constants';\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\n\nexport class ImageRegion {\n\n    /**\n     *\n     * @param {ReadResource} regionResource a resource of type Region\n     */\n    constructor(readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns {ReadGeomValue[]}\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, Group, GroupResponse, GroupsResponse } from '../../declarations/';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about group from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupsService extends ApiService {\n\n    private path: string = '/admin/groups';\n\n    /**\n     * Return a list of all groups.\n     *\n     * @returns Observable<Group[]>\n     */\n    getAllGroups(): Observable<Group[]> {\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a group object (filter by IRI).\n     *\n     * @param {string} iri\n     * @returns Observable<Group>\n     */\n    getGroupByIri(iri: string): Observable<Group> {\n        this.path += '/' + encodeURIComponent(iri);\n\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupResponse).group),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n    ApiServiceResult,\n    List,\n    ListCreatePayload,\n    ListInfo,\n    ListInfoResponse,\n    ListInfoUpdatePayload,\n    ListNodeInfo,\n    ListNodeInfoResponse,\n    ListResponse,\n    ListsResponse\n} from '../../declarations';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about lists from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all lists.\n     *\n     * @param {string} [projectIri]\n     * @returns Observable<ListNodeInfo[]>\n     */\n    getLists(projectIri?: string): Observable<ListNodeInfo[]> {\n        if (projectIri) {\n            this.path += '?projectIri=' + encodeURIComponent(projectIri);\n        }\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list object.\n     *\n     * @param {string} listIri\n     * @returns Observable<List>\n     */\n    getList(listIri: string): Observable<List> {\n        return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list info object.\n     *\n     * @param {string} listIri\n     * @returns Observable<ListInfo>\n     */\n    getListInfo(listIri: string): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(listIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list node info object.\n     *\n     * @param {string} nodeIri\n     * @returns Observable<ListNodeInfo>\n     */\n    getListNodeInfo(nodeIri: string): Observable<ListNodeInfo> {\n        this.path += '/nodes/' + encodeURIComponent(nodeIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeInfoResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new list.\n     *\n     * @param {ListCreatePayload} payload\n     * @returns Observable<List>\n     */\n    createList(payload: ListCreatePayload): Observable<List> {\n        return this.httpPost(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit list data.\n     *\n     * @param {ListInfoUpdatePayload} payload\n     * @returns Observable<ListInfo>\n     */\n    updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(payload.listIri);\n        return this.httpPut(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { ApiServiceResult, Project, ProjectMembersResponse, ProjectResponse, ProjectsResponse, User } from '../../declarations/';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about projects from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all projects.\n     *\n     * @returns Observable<Project[]>\n     */\n    getAllProjects(): Observable<Project[]> {\n        return this.httpGet('/admin/projects').pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    getProjectByIri(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortname(shortname: string): Observable<Project> {\n        const url = '/admin/projects/shortname/' + shortname;\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortcode(shortcode: string): Observable<Project> {\n        const url = '/admin/projects/shortcode/' + shortcode;\n        return this.getProject(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<Project>\n     */\n    protected getProject(url: string): Observable<Project> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is project id (iri).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByIri(iri: string): Observable<User[]> {\n        const url = '/admin/projects/iri/' + encodeURIComponent(iri) + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortname.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortname(shortname: string): Observable<User[]> {\n        const url = '/admin/projects/shortname/' + shortname + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortcode.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n        const url = '/admin/projects/shortcode/' + shortcode + '/members';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project member retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<User[]>\n     */\n     private getProjectMembers(url: string): Observable<User[]> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new project.\n     *\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    createProject(data: any): Observable<Project> {\n        const url: string = '/admin/projects';\n        return this.httpPost(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit project data.\n     *\n     * @param {string} iri identifier of the project\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    updateProject(iri: string, data: any): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate project (if it was deleted).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    activateProject(iri: string): Observable<Project> {\n        const data: any = {\n            status: true\n        };\n\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete (set inactive) project.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    deleteProject(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpDelete(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../api.service';\nimport {\n    ApiServiceResult,\n    Group,\n    GroupsResponse,\n    User,\n    UserResponse,\n    UsersResponse\n} from '../../declarations/';\n\n/**\n * This service uses the Knora admin API and handles all user data.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all users.\n     *\n     * @returns Observable<User[]>\n     */\n    getAllUsers(): Observable<User[]> {\n        return this.httpGet('/admin/users').pipe(\n            map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by username, email or by iri.\n     * @ignore\n     *\n     * @param  {string} identifier username, email or by iri\n     * @param  {String} identifierType\n     * @returns Observable<User>\n     */\n    private getUser(identifier: string, identifierType: String): Observable<User> {\n        const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by IRI\n     *\n     * @param  {string} iri\n     * @returns Observable<User>\n     */\n    getUserByIri(iri: string): Observable<User> {\n        return this.getUser(iri, 'iri');\n    }\n\n    /**\n     * Get user by email\n     *\n     * @param  {string} email\n     * @returns Observable<User>\n     */\n    getUserByEmail(email: string): Observable<User> {\n        return this.getUser(email, 'email');\n    }\n\n    /**\n     * Get user by username.\n     *\n     * @param  {string} username\n     * @returns Observable<User>\n     */\n    getUserByUsername(username: string): Observable<User> {\n        return this.getUser(username, 'username');\n    }\n\n    /**\n     * Get all groups, where the user is member of\n     *\n     * @param  {string} userIri\n     * @returns Observable<Group[]>\n     */\n    getUsersGroupMemberships(userIri: string): Observable<Group[]> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new user.\n     *\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    createUser(data: any): Observable<User> {\n        const path = '/admin/users';\n        return this.httpPost(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Remove user from project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Delete user from the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    addUserToGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    /**\n     * remove user from project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    removeUserFromGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n\n    /**\n     * Add user to the admin system.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    addUserToSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': true\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n\n    }\n\n    /**\n     * Remove user from the admin system.\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    removeUserFromSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': false\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n    }\n\n    /**\n     * Update user system admin membership\n     * @ignore\n     *\n     * @param {string} userIri\n     * @param {any} data\n     *\n     * @returns Observable<User>\n     */\n    private updateUserSystemAdmin(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    activateUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';\n\n        const data: any = {\n            status: true\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Update own password.\n     *\n     * @param {string} userIri\n     * @param {string} oldPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: oldPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update password of another user (not own).\n     *\n     * @param {string} userIri\n     * @param {string} requesterPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: requesterPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update basic user information: given name, family name\n     * @param userIri\n     * @param data\n     * @returns Observable<User>\n     */\n    updateBasicUserInformation(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete / deactivate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    deleteUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  private subject = new Subject<any>();\n\n  setLanguage(lang: string) {\n    this.subject.next({ var: lang });\n  }\n  getLanguage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KuiCoreConfig } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusMsgService {\n\n  constructor(private _http: HttpClient,\n    @Inject(KuiCoreConfigToken) public config) {\n  }\n\n  /**\n  * this method get the status messages from the statusMsg.json file\n  * which are defined here: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  * and here: http://www.w3schools.com/tags/ref_httpmessages.asp\n  *\n  */\n  getStatusMsg(): Observable<any> {\n\n    return this._http.get(this.config.app + '/assets/i18n/statusMsg.json')\n      .pipe(map(\n        (res: any) => {\n          return res;\n        },\n        err => {\n          console.error(err);\n        }\n      )\n      );\n\n  }\n}\n","import { CountQueryResult, KnoraConstants, ReadAudioFileValue, ReadBooleanValue, ReadColorValue, ReadDateValue, ReadDDDFileValue, ReadDecimalValue, ReadDocumentFileValue, ReadGeomValue, ReadIntegerValue, ReadIntervalValue, ReadLinkValue, ReadListValue, ReadMovingImageFileValue, ReadProperties, ReadPropertyItem, ReadResource, ReadResourcesSequence, ReadStillImageFileValue, ReadTextFileValue, ReadTextValueAsHtml, ReadTextValueAsString, ReadTextValueAsXml, ReadUriValue, ReferredResourcesByStandoffLink, Resource, Utils, ResourcesSequence } from '../../declarations';\n\n/**\n * Contains methods to convert JSON-LD representing resources and properties to classes.\n * These methods works only for instances of resources and properties, not for ontologies (data model).\n */\nexport module ConvertJSONLD {\n\n    /**\n     * Function to be passed to a filter used on an array of property names\n     * sorting out all non value property names.\n     *\n     * Gets all property names that refer to value objects.\n     *\n     * @param propName the name of a property to be checked.\n     * @returns boolean - indicating if the name refers to a value property.\n     */\n    const getPropertyNames = (propName) => {\n        return propName !== '@id'\n            && propName !== '@type'\n            && propName !== KnoraConstants.RdfsLabel\n            && propName !== KnoraConstants.attachedToProject\n            && propName !== KnoraConstants.attachedToUser\n            && propName !== KnoraConstants.creationDate\n            && propName !== KnoraConstants.lastModificationDate\n            && propName !== KnoraConstants.hasPermissions\n            && propName !== KnoraConstants.userHasPermission\n            && propName !== KnoraConstants.ArkUrl\n            && propName !== KnoraConstants.versionArkUrl;\n    };\n\n\n    /**\n     * @deprecated Use **constructResource** instead\n     *\n     * Constructs a [[ReadResource]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an a resource and its properties serialized as JSON-LD.\n     * @returns ReadResource\n     */\n    function constructReadResource(resourceJSONLD: object): ReadResource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new ReadResource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            properties\n        );\n    }\n\n    function constructResource(resourceJSONLD: object): Resource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new Resource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // incomingAnnotations; to be updated once another request has been made\n            [], // incomingFileRepresentations, to be updated once another request has been made\n            [], // incomingLinks; to be updated once another request has been made\n            [], // fileRepresentationsToDisplay; to be updated once another request has been made\n            properties\n        );\n    }\n\n    /**\n     * Constructs a [[ReadPropertyItem]] from JSON-LD,\n     * taking into account the property's value type.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {Object} propValue the value serialized as JSON-LD.\n     * @param {string} propIri the Iri of the property.\n     * @param {ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.\n     * @returns a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.\n     */\n    function createValueSpecificProp(\n        propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n        // convert a JSON-LD property value to a `ReadPropertyItem`\n\n        let valueSpecificProp: ReadPropertyItem;\n\n        // check for the property's value type\n        switch (propValue['@type']) {\n            case KnoraConstants.TextValue:\n                // a text value might be given as plain string, html or xml.\n                let textValue: ReadPropertyItem;\n\n                if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                    textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n                } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                    const referredResources: ReferredResourcesByStandoffLink = {};\n\n                    // check for standoff links and include referred resources, if any\n                    // when the user interacts with a standoff link, further information about the referred resource can be shown\n                    for (const standoffLink of standoffLinkValues) {\n                        const referredRes: ReadResource = standoffLink.referredResource;\n                        referredResources[referredRes.id] = referredRes;\n                    }\n\n                    textValue = new ReadTextValueAsHtml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                    );\n                } else if (\n                    propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                    textValue = new ReadTextValueAsXml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                    );\n                } else {\n                    // expected text value members not defined\n                    console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n                }\n\n                valueSpecificProp = textValue;\n                break;\n\n            case KnoraConstants.DateValue:\n                const dateValue = new ReadDateValue(propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.dateValueHasCalendar],\n                    propValue[KnoraConstants.dateValueHasStartYear],\n                    propValue[KnoraConstants.dateValueHasEndYear],\n                    propValue[KnoraConstants.dateValueHasStartEra],\n                    propValue[KnoraConstants.dateValueHasEndEra],\n                    propValue[KnoraConstants.dateValueHasStartMonth],\n                    propValue[KnoraConstants.dateValueHasEndMonth],\n                    propValue[KnoraConstants.dateValueHasStartDay],\n                    propValue[KnoraConstants.dateValueHasEndDay]);\n\n                valueSpecificProp = dateValue;\n                break;\n\n            case KnoraConstants.LinkValue:\n\n                let linkValue: ReadLinkValue;\n\n                // check if the referred resource is given as an object or just as an IRI\n                if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                    // linkValueHasTarget contains the object\n\n                    const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n                } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                    // linkValueHasTargetIri contains the resource's Iri\n\n                    const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n                } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // linkValueHasSource contains the object\n\n                    const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n                } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                    // linkValueHasSourceIri contains the resource's Iri\n\n                    const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n                }\n\n                valueSpecificProp = linkValue;\n                break;\n\n            case KnoraConstants.IntValue:\n\n                const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n                valueSpecificProp = intValue;\n\n                break;\n\n            case KnoraConstants.DecimalValue:\n\n                // a decimal value is represented as a string in order to preserve its precision\n                const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n                const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n                valueSpecificProp = decimalValue;\n\n                break;\n\n\n            case KnoraConstants.StillImageFileValue:\n\n                const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.stillImageFileValueHasDimX],\n                    propValue[KnoraConstants.stillImageFileValueHasDimY]\n                );\n\n                valueSpecificProp = stillImageFileValue;\n\n                break;\n\n            case KnoraConstants.MovingImageFileValue:\n\n                const movingImageFileValue: ReadMovingImageFileValue = new ReadMovingImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.movingImageFileValueHasDimX],\n                    propValue[KnoraConstants.movingImageFileValueHasDimY],\n                    propValue[KnoraConstants.movingImageFileValueHasDuration],\n                    propValue[KnoraConstants.movingImageFileValueHasFps]\n                );\n\n                valueSpecificProp = movingImageFileValue;\n\n                break;\n\n            case KnoraConstants.AudioFileValue:\n\n                const audioFileValue: ReadAudioFileValue = new ReadAudioFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.audioFileValueHasDuration]\n                );\n\n                valueSpecificProp = audioFileValue;\n\n                break;\n\n            case KnoraConstants.DDDFileValue:\n\n                const dddFileValue: ReadDDDFileValue = new ReadDDDFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = dddFileValue;\n\n                break;\n\n            case KnoraConstants.DocumentFileValue:\n\n                const documentFileValue: ReadDocumentFileValue = new ReadDocumentFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = documentFileValue;\n\n                break;\n\n            case KnoraConstants.TextFileValue:\n\n                const textFileValue = new ReadTextFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = textFileValue;\n\n                break;\n\n            case KnoraConstants.ColorValue:\n\n                const readColorValue: ReadColorValue = new ReadColorValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.colorValueAsColor]\n                );\n\n                valueSpecificProp = readColorValue;\n\n                break;\n\n            case KnoraConstants.GeomValue:\n\n                const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.geometryValueAsGeometry]\n                );\n\n                valueSpecificProp = readGeomValue;\n\n                break;\n\n            case KnoraConstants.UriValue:\n\n                const uriValue: ReadUriValue = new ReadUriValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.uriValueAsUri]['@value']\n                );\n\n                valueSpecificProp = uriValue;\n\n                break;\n\n            case KnoraConstants.BooleanValue:\n\n                const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.booleanValueAsBoolean]\n                );\n\n                valueSpecificProp = boolValue;\n\n                break;\n\n\n            case KnoraConstants.IntervalValue:\n\n                // represented as strings to preserve precision\n                const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n                const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n                const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                    propValue['@id'],\n                    propIri,\n                    intStart,\n                    intEnd\n                );\n\n                valueSpecificProp = intervalValue;\n\n                break;\n\n            case KnoraConstants.ListValue:\n\n                const listValue: ReadListValue = new ReadListValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.listValueAsListNode]['@id']\n                );\n\n                valueSpecificProp = listValue;\n\n                break;\n\n            default:\n                // unsupported value type\n                console.error('ERROR: value type not implemented yet: ' + propValue['@type'] + '(' + propValue['@id'] + ')');\n                break;\n        }\n\n        return valueSpecificProp;\n\n    }\n\n\n    /**\n     * Construct a [[ReadProperties]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an object describing the resource and its properties.\n     * @returns ReadProperties\n     */\n    function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n        // JSON-LD representing standoff link values\n        // text values may contain standoff links\n        const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n        // to be populated with standoff link values\n        const standoffLinkValues: ReadLinkValue[] = [];\n\n        // convert each standoff link value JSON-LD object to a ReadLinkValue\n        // in order populate the collection with all the standoff link values\n        if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n            for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n                const standoffVal: ReadLinkValue = createValueSpecificProp(\n                    standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n                ) as ReadLinkValue;\n\n                standoffLinkValues.push(standoffVal);\n            }\n        } else if (standoffLinkValuesJSONLD !== undefined) {\n            const standoffVal = createValueSpecificProp(\n                standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n\n        let propNames = Object.keys(resourceJSONLD);\n\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const properties: ReadProperties = {};\n\n        // iterate over all the given property names\n        for (const propName of propNames) {\n\n            const propValues: Array<ReadPropertyItem> = [];\n\n            // either an array of values or just one value is given\n            if (Array.isArray(resourceJSONLD[propName])) {\n                // array of values\n\n                // for each property name, an array of property values is given, iterate over it\n                for (const propValue of resourceJSONLD[propName]) {\n\n                    // convert a JSON-LD property value to a `ReadPropertyItem`\n                    const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                    // if it is undefined, the value could not be constructed correctly\n                    // add the property value to the array of property values\n                    if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n                }\n            } else {\n                // only one value\n\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n            }\n\n            // add the property to the properties object\n            properties[propName] = propValues;\n\n        }\n\n        return properties;\n    }\n\n    /**\n     * Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.\n     * @returns ReadResourcesSequence - sequence of read resources\n     */\n    export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n        const resources: Array<ReadResource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ReadResourcesSequence(resources, numberOfResources);\n\n    }\n\n    export function createResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ResourcesSequence {\n\n        const resources: Array<Resource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: Resource = constructResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: Resource = constructResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ResourcesSequence(resources, numberOfResources);\n\n    }\n\n    /**\n     * Collects all the types (classes) of referred resources from a given resource (from its linking properties).\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD JSON-LD describing one resource.\n     * @return string[] - an Array of resource class Iris (including duplicates).\n     */\n    function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n        let propNames = Object.keys(resourceJSONLD);\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const referredResourceClasses = [];\n\n        for (const prop of propNames) {\n\n            // several values given for this property\n            if (Array.isArray(resourceJSONLD[prop])) {\n\n                for (const referredRes of resourceJSONLD[prop]) {\n\n                    // if the property is a LinkValue and it contains an embedded resource, get its type\n                    if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                        // target resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                    } else if (\n                        referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                        // source resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                    }\n\n                }\n            } else {\n                // only one value given for this property\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                    !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                    !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n                }\n            }\n\n        }\n\n        return referredResourceClasses;\n\n    }\n\n    /**\n     * Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.\n     * @returns string[] - the resource class Iris (without duplicates).\n     */\n    export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n        let resourceClasses: Array<string> = [];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n\n            for (const resourceJSONLD of resourcesGraph) {\n                // get class of the current resource\n                resourceClasses.push(resourceJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n            }\n\n        } else {\n            // only one resource\n\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                return [];\n            } else {\n                resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n            }\n        }\n\n        // filter out duplicates\n        return resourceClasses.filter(Utils.filterOutDuplicates);\n\n    }\n\n    /**\n     * Turns a JSON-LD response to a count query into a `CountQueryResult`.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param countQueryJSONLD\n     * @returns {CountQueryResult}\n     */\n    export function createCountQueryResult(countQueryJSONLD: object) {\n        return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceResult, CountQueryResult, ReadResourcesSequence, ResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\nexport interface FulltextSearchParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n\n    limitToStandoffClass?: string;\n}\n\nexport interface SearchByLabelParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n}\n\n/**\n * Performs searches (fulltext or extended) and search count queries into Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Assign fulltext search params to http params.\n     *\n     * @param {FulltextSearchParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processFulltextSearchParams(params: FulltextSearchParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToStandoffClass !== undefined) {\n            searchParams = searchParams.set('limitToStandoffClass', params.limitToStandoffClass);\n        }\n\n        return searchParams;\n\n    }\n    /**\n     * Assign search by label search params to http params.\n     *\n     * @param {SearchByLabelParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processSearchByLabelParams(params: SearchByLabelParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        return searchParams;\n\n    }\n\n    /**\n     * @deprecated\n     *\n     * Converts a JSON-LD object to a `ReadResorceSequence`.\n     * To be passed as a function pointer (arrow notation required).\n     *\n     * @param {Object} resourceResponse\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ReadResourceSequence\n        const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ReadResourceSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    }\n    /**\n     * Converts a JSON-LD object to a `ResourcesSequence`\n     *\n     * @param  {Object} resourceResponse\n     */\n    private convertJSONLDToResourcesSequence: (resourceResponse: Object) => Observable<ResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ResourcesSequence\n        const resSeq: ResourcesSequence = ConvertJSONLD.createResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ResourcesSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search.\n     * TODO: mark as deprecated, use of `doFullTextSearchReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearch(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ReadResourcesSequence> {\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res: Observable<any> = this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search count query.\n     * TODO: mark as deprecated, use of `doFullTextSearchCountQueryCountQueryResult` recommended\n     *\n     * @param searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearchCountQuery(searchTerm: string, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<CountQueryResult>\n     */\n    doFullTextSearchCountQueryCountQueryResult(searchTerm: string, params?: FulltextSearchParams): Observable<CountQueryResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        return this.httpPost('/v2/searchextended', gravsearchQuery);\n    }\n\n    /**\n     * @deprecated\n     * Performs an extended search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n    /**\n     * Performs an extended search and turns the result into a `ResourcesSequence`.\n     *\n     * @param  {string} gravsearchQuery\n     * @returns Observable\n     */\n    doExtendedSearchResourcesSequence(gravsearchQuery: string): Observable<ResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToResourcesSequence\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search count query.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param {string} gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label.\n     * TODO: mark as deprecated, use of `searchByLabelReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabel(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        // httpGet() expects only one argument, not 2\n        return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label and turns the results in a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabelReadResourceSequence(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ReadResourcesSequence> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { ReadResourcesSequence, ResourcesSequence } from '../../declarations';\n\n/**\n * Requests incoming information (regions, links, stillImageRepresentations) from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IncomingService extends SearchService {\n\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    // (incoming) annotations like region and sequences\n    // ------------------------------------------------------------------------\n\n    /**\n    * Returns all incoming regions for a particular resource.\n    *\n    * @param {string} resourceIRI the Iri of the resource whose Incoming regions should be returned.\n    * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n    * @returns {Observable<any>}\n    */\n    getIncomingRegions(resourceIRI: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n        // console.log('sparqlQueryStr ', sparqlQueryStr);\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    // (incoming) file representations e.g. incomingStillImages in case of book\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns all the StillImageRepresentations for the given resource, if any.\n     * StillImageRepresentations link to the given resource via knora-base:isPartOf.\n     *\n     * @param {string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    // incoming links\n    // ------------------------------------------------------------------------\n\n    /**\n     * @deprecated\n     *\n     * Returns all incoming links for the given resource Iri but incoming regions and still image representations.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinksForResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n\n\n    /**\n     * Returns all incoming links for the given resource Iri.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinks(resourceIri: string, offset: number): Observable<ResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchResourcesSequence(sparqlQueryStr);\n    }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceError, ApiServiceResult, ImageRegion, KnoraConstants, ReadResourcesSequence, ReadStillImageFileValue, ResourcesSequence, StillImageRepresentation } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { IncomingService } from './incoming.service';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\n/**\n * Requests representation of resources from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _incomingService: IncomingService,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns Observable<ApiServiceResult>\n     */\n    // this should return a resource object with incoming links, annotations, file representations\n    // it includes a property: FileRepresentation to display with the parameters for the media type viewer\n    getResource(iri: string): Observable<ResourcesSequence | ApiServiceError> {\n\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ResourcesSequence = ConvertJSONLD.createResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    const res = resSeq.resources[0];\n\n                    // set file representation to display\n                    console.log(Object.keys(res.properties));\n\n                    const propKeys: string[] = Object.keys(res.properties);\n                    switch (true) {\n                        case propKeys.includes(KnoraConstants.hasStillImageFileValue):\n                            // res.fileRepresentationsToDisplay[0] = res.properties[KnoraConstants.hasStillImageFileValue];\n\n                            const imgRepresentations: StillImageRepresentation[] = [];\n\n                            const fileValues: ReadStillImageFileValue[] = res.properties[KnoraConstants.hasStillImageFileValue] as ReadStillImageFileValue[];\n                            const imagesToDisplay: ReadStillImageFileValue[] = fileValues.filter((image) => {\n                                return !image.isPreview;\n                            });\n\n                            for (const img of imagesToDisplay) {\n\n                                const regions: ImageRegion[] = [];\n                                for (const incomingRegion of res.incomingAnnotations) {\n\n                                    // TODO: change return type in ImageRegion from ReadResource into Resource\n                                    // const region = new ImageRegion(incomingRegion);\n\n                                    // regions.push(region);\n\n                                }\n\n                                const stillImage = new StillImageRepresentation(img, regions);\n                                imgRepresentations.push(stillImage);\n\n                            }\n\n                            res.fileRepresentationsToDisplay = imgRepresentations;\n\n                            break;\n                        case propKeys.includes(KnoraConstants.hasMovingImageFileValue):\n                            res.fileRepresentationsToDisplay = res.properties[KnoraConstants.hasMovingImageFileValue];\n                            break;\n                        case propKeys.includes(KnoraConstants.hasAudioFileValue):\n                            res.fileRepresentationsToDisplay = res.properties[KnoraConstants.hasAudioFileValue];\n                            break;\n                        case propKeys.includes(KnoraConstants.hasDocumentFileValue):\n                            res.fileRepresentationsToDisplay = res.properties[KnoraConstants.hasDocumentFileValue];\n                            break;\n                        case propKeys.includes(KnoraConstants.hasDDDFileValue):\n                            res.fileRepresentationsToDisplay = res.properties[KnoraConstants.hasDDDFileValue];\n                            break;\n\n                        // NYI / TODO: TextFileValue\n\n                        default:\n                            // look for incoming fileRepresentation to display\n                            // e.g. looking for incoming stillImage files\n                            this._incomingService.getStillImageRepresentationsForCompoundResource(res.id, 0).subscribe(\n                                (incomingImageRepresentations: ReadResourcesSequence) => {\n\n                                    if (incomingImageRepresentations.resources.length > 0) {\n                                        // update ontology information\n                                        resSeq.ontologyInformation.updateOntologyInformation(incomingImageRepresentations.ontologyInformation);\n\n                                        // set current offset\n                                        // this.incomingStillImageRepresentationCurrentOffset = offset;\n\n                                        // TODO: implement prepending of StillImageRepresentations when moving to the left (getting previous pages)\n                                        // TODO: append existing images to response and then assign response to `this.resource.incomingStillImageRepresentations`\n                                        // TODO: maybe we have to support non consecutive arrays (sparse arrays)\n\n                                        // append incomingImageRepresentations.resources to this.resource.incomingStillImageRepresentations\n                                        Array.prototype.push.apply(resSeq.resources[0].incomingFileRepresentations, incomingImageRepresentations.resources);\n\n                                        // prepare attached image files to be displayed\n                                        // BeolResource.collectImagesAndRegionsForResource(this.resource);\n                                    }\n                                },\n                                (error: any) => {\n                                    console.error(error);\n                                }\n                            );\n                            console.log('incoming file representations to display');\n                    }\n\n\n                    // resource.properties[KnoraConstants.hasStillImageFileValue]\n\n\n                    // get incoming links\n                    this._incomingService.getIncomingLinks(resSeq.resources[0].id, 0).subscribe(\n                        (incomingRes: ResourcesSequence) => {\n                            // update ontology information\n                            resSeq.ontologyInformation.updateOntologyInformation(incomingRes.ontologyInformation);\n\n                            // Append elements incomingResources to this.sequence.incomingLinks\n                            Array.prototype.push.apply(resSeq.resources[0].incomingLinks, incomingRes.resources);\n                        }\n                    );\n\n                    // get incoming annotations\n\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n\n                                console.log('resSeq -- resourceServie', resSeq);\n\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n\n            )\n        );\n\n        // let resSeq: Observable<ResourcesSequence>;\n\n        /*\n        this.getResourcesSequence(iri).subscribe(\n            (sequence: ResourcesSequence) => {\n\n                // resSeq = sequence;\n\n                /* pipe(\n                    map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n                    catchError(this.handleJsonError)\n                );\n\n                resSeq.pipe(\n                    map((seq: ResourcesSequence) => sequence),\n                    catchError(this.handleJsonError)\n                ); *\n\n                // get incoming links\n                this._incomingService.getIncomingLinks(sequence.resources[0].id, 0).subscribe(\n                    (incomingResources: ResourcesSequence) => {\n                        // update ontology information\n                        sequence.ontologyInformation.updateOntologyInformation(incomingResources.ontologyInformation);\n\n                        // Append elements incomingResources to this.sequence.incomingLinks\n                        Array.prototype.push.apply(sequence.resources[0].incomingLinks, incomingResources.resources);\n\n                        // if callback is given, execute function with the amount of incoming resources as the parameter\n                        /* TODO: what is callback? Find a solution\n                        if (callback !== undefined) {\n                            callback(incomingResources.resources.length);\n                        }\n                        *\n\n                    },\n                    (error: any) => {\n                        console.error(error);\n                    }\n                );\n\n                // get incoming annotations\n\n                // get incoming filerepresentations\n\n\n\n            },\n            (error: ApiServiceError) => {\n                console.error(error);\n                return error;\n            }\n        );\n\n\n        return resSeq;\n        */\n\n\n    }\n\n    private getResourcesSequence(iri: string): Observable<ResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ResourcesSequence = ConvertJSONLD.createResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n\n    requestIncomingResources(sequence: ResourcesSequence): void {\n\n        // make sure that this.sequence has been initialized correctly\n        if (sequence === undefined) {\n            return;\n        }\n\n        // request incoming sequences in case of movingImage and audio\n\n        // request incoming regions in case of stillImage and dddImage\n        if (sequence.resources[0].properties[KnoraConstants.hasStillImageFileValue]) {\n            // TODO: check if resources is a StillImageRepresentation using the ontology responder (support for subclass relations required)\n            // the resource is a StillImageRepresentation, check if there are regions pointing to it\n\n            // this.getIncomingRegions(0);\n\n        } else {\n            // this resource is not a StillImageRepresentation\n            // check if there are StillImageRepresentations pointing to this resource\n\n            // this gets the first page of incoming StillImageRepresentations\n            // more pages may be requested by [[this.viewer]].\n            // TODO: for now, we begin with offset 0. This may have to be changed later (beginning somewhere in a collection)\n            // this.getIncomingStillImageRepresentations(0);\n        }\n\n        // check for incoming links for the current resource\n        // this.getIncomingLinks(0);\n\n\n    }\n\n    /**\n     * @deprecated Use **getResourcesSequence** instead\n     *\n     * Given the Iri, requests the representation of a resource as a `ReadResourceSequence`.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        // TODO: handle case of an ApiServiceError\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n    // TODO: post, put, delete\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n/**\n * Represents the parameters of an extended search.\n */\nexport class ExtendedSearchParams {\n\n    /**\n     *\n     * @param generateGravsearch a function that generates a Gravsearch query.\n     *\n     *                           The function takes the offset\n     *                           as a parameter and returns a Gravsearch query string.\n     *                           Returns false if not set correctly (init state).\n     */\n    constructor(public generateGravsearch: (offset: number) => string | boolean) {\n\n    }\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\n/**\n * Temporarily stores the parameters of an extended search.\n */\nexport class SearchParamsService {\n\n    private _currentSearchParams;\n\n    constructor() {\n        // init with a dummy function that returns false\n        // if the application is reloaded, this will be returned\n        this._currentSearchParams = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => false));\n    }\n\n    /**\n     * Updates the parameters of an extended search.\n     *\n     * @param {ExtendedSearchParams} searchParams\n     * @returns void\n     */\n    changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n        this._currentSearchParams.next(searchParams);\n    }\n\n    /**\n     * Gets the search params of an extended search.\n     *\n     * @returns ExtendedSearchParams - search parameters\n     */\n    getSearchParams(): ExtendedSearchParams {\n        return this._currentSearchParams.getValue();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExtendedSearchParams, SearchParamsService } from './search-params.service';\nimport { KnoraConstants, KnoraSchema } from '../../declarations';\nimport { PropertyWithValue } from '../../declarations/api/operators';\n\n/**\n * Create GravSearch queries from provided parameters.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GravsearchGenerationService {\n\n    /**\n     * @ignore\n     *\n     * Map of complex knora-api value types to simple ones.\n     * Use computed property name: http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer.\n     */\n    public static typeConversionComplexToSimple = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.xsdInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.xsdDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.xsdBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.xsdString,\n        'http://api.knora.org/ontology/knora-api/v2#DateValue': KnoraConstants.dateSimple,\n        'http://api.knora.org/ontology/knora-api/v2#IntervalValue': KnoraConstants.intervalSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeomValue': KnoraConstants.geomSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ColorValue': KnoraConstants.colorSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeonameValue': KnoraConstants.geonameSimple,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.xsdUri,\n        'http://api.knora.org/ontology/knora-api/v2#StillImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#FileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DDDFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#AudioFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DocumentFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#TextFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listNodeSimple\n    };\n\n    public static complexTypeToProp = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.integerValueAsInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.decimalValueAsDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.booleanValueAsBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.valueAsString,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.uriValueAsUri,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listValueAsListNode\n    };\n\n    constructor(private _searchParamsService: SearchParamsService) { }\n\n    /**\n     * Generates a Gravsearch query from the provided arguments.\n     *\n     * @param {PropertyWithValue[]} properties the properties specified by the user.\n     * @param {string} [mainResourceClassOption] the class of the main resource, if specified.\n     * @param {number} offset the offset to be used (nth page of results).\n     * @returns string - a KnarQL query string.\n     */\n    createGravsearchQuery(properties: PropertyWithValue[], mainResourceClassOption?: string, offset: number = 0): string {\n\n        // class restriction for the resource searched for\n        let mainResourceClass = '';\n\n        // if given, create the class restriction for the main resource\n        if (mainResourceClassOption !== undefined) {\n            mainResourceClass = `?mainRes a <${mainResourceClassOption}> .`;\n        }\n\n        // criteria for the order by statement\n        const orderByCriteria = [];\n\n        // statements to be returned in query results\n        const returnStatements = [];\n\n        // loop over given properties and create statements and filters from them\n        const props: string[] = properties.map(\n            (propWithVal: PropertyWithValue, index: number) => {\n\n                // represents the object of a statement\n                let propValue;\n                if (!propWithVal.property.isLinkProperty || propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Exists') {\n                    // it is not a linking property, create a variable for the value (to be used by a subsequent FILTER)\n                    // OR the comparison operator Exists is used in which case we do not need to specify the object any further\n                    propValue = `?propVal${index}`;\n                } else {\n                    // it is a linking property and the comparison operator is not Exists, use its IRI\n                    propValue = propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex);\n                }\n\n                // generate statement\n                let statement: string = `?mainRes <${propWithVal.property.id}> ${propValue} .`;\n\n                // check if it is a linking property that has to be wrapped in a FILTER NOT EXISTS (comparison operator NOT_EQUALS) to negate it\n                if (propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                    // do not include statement in results, because the query checks for the absence of this statement\n                    statement = `FILTER NOT EXISTS {\n${statement}\n\n\n}`;\n                } else {\n                    // TODO: check if statement should be returned returned in results (Boolean flag from checkbox)\n                    returnStatements.push(statement);\n                    statement = `\n${statement}\n\n\n`;\n                }\n\n                // generate restricting expression (e.g., a FILTER) if comparison operator is not Exists\n                let restriction: string = '';\n                // only create a FILTER if the comparison operator is not EXISTS and it is not a linking property\n                if (!propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() !== 'Exists') {\n                    // generate variable for value literal\n                    const propValueLiteral = `${propValue}Literal`;\n\n                    if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Like') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use regex function for LIKE\n                        restriction += `FILTER regex(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}, \"i\")`;\n                    } else if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Match') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use contains function for MATCH\n                        restriction += `FILTER <${KnoraConstants.matchFunction}>(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.DateValue) {\n                        // handle date property\n                        restriction = `FILTER(knora-api:toSimpleDate(${propValue}) ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.ListValue) {\n                        // handle list node\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}` + '\\n';\n                        // check for comparison operator \"not equals\"\n                        if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                            restriction = `FILTER NOT EXISTS {\n                                ${restriction}\n                            }`;\n                        }\n                    } else {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // generate filter expression\n                        restriction += `FILTER(${propValueLiteral} ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    }\n                }\n\n                // check if current value is a sort criterion\n                if (propWithVal.isSortCriterion) orderByCriteria.push(propValue);\n\n                return `${statement}\n${restriction}\n`;\n\n            });\n\n        let orderByStatement = '';\n\n        if (orderByCriteria.length > 0) {\n            orderByStatement = `\nORDER BY ${orderByCriteria.join(' ')}\n`;\n        }\n\n        // template of the Gravsearch query with dynamic components\n        const gravsearchTemplate = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/v2#>\nCONSTRUCT {\n\n?mainRes knora-api:isMainResource true .\n\n${returnStatements.join('\\n')}\n\n} WHERE {\n\n?mainRes a knora-api:Resource .\n\n${mainResourceClass}\n\n${props.join('')}\n\n}\n${orderByStatement}`;\n\n        // offset component of the Gravsearch query\n        const offsetTemplate = `\nOFFSET ${offset}\n`;\n\n        // function that generates the same KnarQL query with the given offset\n        const generateGravsearchQueryWithCustomOffset = (localOffset: number): string => {\n            const offsetCustomTemplate = `\nOFFSET ${localOffset}\n`;\n\n            return gravsearchTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another KnarQL query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(new ExtendedSearchParams(generateGravsearchQueryWithCustomOffset));\n        }\n\n\n        return gravsearchTemplate + offsetTemplate;\n\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KuiCoreConfig, RdfDataObject, ResetTriplestoreContentResponse } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor(private http: HttpClient, @Inject(KuiCoreConfigToken) public config) { }\n\n  /**\n     * Resets the content of the triplestore.\n     *\n     * @param rdfDataObjects\n     * @returns Observable<string>\n     */\n  resetTriplestoreContent(rdfDataObjects: RdfDataObject[]): Observable<string> {\n\n    return this.http.post<ResetTriplestoreContentResponse>(this.config.api + '/admin/store/ResetTriplestoreContent', rdfDataObjects)\n      .pipe(\n        map(\n          (data) => {\n            const result: ResetTriplestoreContentResponse = data;\n            // console.log('StoreService - resetTriplestoreContent: ', result);\n            return result.message;\n          },\n          (error: HttpErrorResponse) => {\n            if (error.error instanceof Error) {\n              console.log('StoreService - resetTriplestoreContent - Client-side error occurred.', error);\n            } else {\n              console.log('StoreService - resetTriplestoreContent - Server-side error occurred.', error);\n            }\n            throw error;\n          }\n        ));\n\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicOntologyService extends ApiService {\n\n  /**\n     * returns our list of a basic ontology\n     *\n     * @returns {Observable<any>}\n     */\n  // getBasicOntology(): Observable<any> {\n  //     let url = environment.url;\n  //     return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  // }\n  getBasicOntology(): Observable<any> {\n    const url = this.config.app;\n    return this.httpGet(url + '/data/base-data/basic-ontology.json');\n    // return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceTypesService extends ApiService {\n\n  /**\n     * Get all resource types defined by the vocabulary.\n     *\n     * @param {string} iri Vocabulary iri\n     * @returns Observable<any>\n     */\n  getResourceTypesByVoc(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes?vocabulary=' + encodeURIComponent(iri));\n  }\n\n  /**\n   * Get a specific resource type.\n   *\n   * @param {string} iri resource type iri\n   * @returns Observable<any>\n   */\n  getResourceType(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes/' + encodeURIComponent(iri));\n  }\n\n\n  // putResourceType(iri)\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiServiceError, ApiServiceResult } from '../../declarations';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject(KuiCoreConfigToken) public config) {\n        super(http, config);\n    }\n\n    /**\n     * Gets a hierarchical list from Knora.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListFromKnora(rootNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/lists/' + encodeURIComponent(rootNodeIri));\n    }\n\n    /**\n     * Returns a list as expanded JSON-LD.\n     *\n     * @param {string} rootNodeIri the root node of the list.\n     * @return {Observable<object>} the expanded JSON-LD.\n     */\n    getList(rootNodeIri: string): Observable<object> {\n        const listJSONLD = this.getListFromKnora(rootNodeIri);\n\n        return listJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n\n    /**\n     * Gets a list node from Knora.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListNodeFromKnora(listNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/node/' + encodeURIComponent(listNodeIri));\n    }\n\n    /**\n     * Returns a list node as expanded JSON-LD.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<object> {\n\n        const listNodeJSONLD = this.getListNodeFromKnora(listNodeIri);\n\n        return listNodeJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ListService } from './list.service';\n\n/**\n * Represents a list node v2.\n */\nexport class ListNodeV2 {\n\n    readonly children: ListNodeV2[];\n\n    readonly isRootNode: boolean;\n\n    constructor(readonly id: string, readonly label: string, readonly position?: number, readonly hasRootNode?: string) {\n\n        // if hasRootNode is not given, this node is the root node.\n        this.isRootNode = (hasRootNode === undefined);\n\n        this.children = [];\n    }\n}\n\nclass ListCache {\n\n    [index: string]: ListNodeV2;\n\n}\n\nclass ListNodeIriToListNodeV2 {\n\n    [index: string]: ListNodeV2;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListCacheService {\n\n    private listCache = new ListCache();\n\n    private listNodeIriToListNodeV2 = new ListNodeIriToListNodeV2();\n\n    constructor(private _listService: ListService) {\n    }\n\n    private hasRootNode(listJSONLD) {\n        let hasRoot;\n\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode'] !== undefined) {\n            hasRoot = listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode']['@id'];\n        }\n\n        return hasRoot;\n    }\n\n    /**\n     * Converts a JSON-LD represention of a ListNodeV2 to  a `ListNodeV2`.\n     * Recursively converts child nodes.\n     *\n     * @param {object} listJSONLD the JSON-LD representation of a list node v2.\n     * @return {ListNodeV2}\n     */\n    private convertJSONLDToListNode: (listJSONLD: object) => ListNodeV2 = (listJSONLD: object) => {\n\n        const listNodeIri = listJSONLD['@id'];\n\n        const hasRootNode = this.hasRootNode(listJSONLD);\n\n        const listNode = new ListNodeV2(\n            listNodeIri,\n            listJSONLD['http://www.w3.org/2000/01/rdf-schema#label'],\n            listJSONLD['http://api.knora.org/ontology/knora-api/v2#listNodePosition'],\n            hasRootNode\n        );\n\n        // check if there are child nodes\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'] !== undefined) {\n\n            if (Array.isArray(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'])) {\n                // array of child nodes\n                for (const subListNode of listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']) {\n                    listNode.children.push(this.convertJSONLDToListNode(subListNode));\n                }\n            } else {\n                // single child node\n                listNode.children.push(this.convertJSONLDToListNode(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']));\n            }\n\n        }\n\n        this.listNodeIriToListNodeV2[listNodeIri] = listNode;\n\n        return listNode;\n    };\n\n    /**\n     * Gets a list from the cache or requests it from Knora and caches it.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ListNodeV2>}\n     */\n    getList(rootNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list is already in cache\n        if (this.listCache[rootNodeIri] !== undefined) {\n\n            // return list from cache\n            return of(this.listCache[rootNodeIri]);\n\n        } else {\n            // get list from Knora and cache it\n\n            const listJSONLD = this._listService.getList(rootNodeIri);\n\n            const listV2: Observable<ListNodeV2> = listJSONLD.pipe(\n                map(\n                    this.convertJSONLDToListNode\n                )\n            );\n\n            return listV2.pipe(\n                map(\n                    (list: ListNodeV2) => {\n                        // write list to cache and return it\n                        this.listCache[rootNodeIri] = list;\n                        return list;\n                    }\n                )\n            );\n        }\n    }\n\n    /**\n     * Gets a list node from the cache or requests the whole list from Knora and caches it.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list node is already in cache\n        if (this.listNodeIriToListNodeV2[listNodeIri] !== undefined) {\n\n            // list node is already cached\n            return of(this.listNodeIriToListNodeV2[listNodeIri]);\n\n        } else {\n\n            const listNode = this._listService.getListNode(listNodeIri);\n\n            return listNode.pipe(\n                mergeMap(\n                    (listNodeJSONLD: object) => {\n                        const hasRootNode = this.hasRootNode(listNodeJSONLD);\n\n                        if (hasRootNode !== undefined) {\n                            // get the whole list\n                            return this.getList(hasRootNode).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        } else {\n                            // this is the root node, get the whole list\n                            return this.getList(listNodeIri).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        }\n                    }\n                )\n            );\n        }\n    }\n}\n","import { KnoraConstants, KnoraSchema } from './knora-constants';\nimport { GravsearchGenerationService, Property } from '../../services';\n\n\n/**\n * An abstract interface representing a comparison operator.\n * This interface is implemented for the supported comparison operators.\n */\nexport interface ComparisonOperator {\n\n    // type of comparison operator\n    type: string;\n\n    // the label of the comparison operator to be presented to the user.\n    label: string;\n\n    // returns the class name when called on an instance\n    getClassName(): string;\n}\n\nexport class Equals implements ComparisonOperator {\n\n    type = KnoraConstants.EqualsComparisonOperator;\n    label = KnoraConstants.EqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Equals';\n    }\n}\n\n\nexport class NotEquals implements ComparisonOperator {\n\n    type = KnoraConstants.NotEqualsComparisonOperator;\n    label = KnoraConstants.NotEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'NotEquals';\n    }\n}\n\nexport class GreaterThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanEqualsComparisonOperator;\n    label = KnoraConstants.GreaterThanEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThanEquals';\n    }\n}\n\nexport class GreaterThan implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanComparisonOperator;\n    label = KnoraConstants.GreaterThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThan';\n    }\n}\n\nexport class LessThan implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanComparisonOperator;\n    label = KnoraConstants.LessThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThan';\n    }\n}\n\nexport class LessThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanEqualsComparisonOperator;\n    label = KnoraConstants.LessThanQualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThanEquals';\n    }\n}\n\n\nexport class Exists implements ComparisonOperator {\n\n    type = KnoraConstants.ExistsComparisonOperator;\n    label = KnoraConstants.ExistsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Exists';\n    }\n}\n\nexport class Like implements ComparisonOperator {\n\n    type = KnoraConstants.LikeComparisonOperator;\n    label = KnoraConstants.LikeComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Like';\n    }\n\n}\n\nexport class Match implements ComparisonOperator {\n\n    type = KnoraConstants.MatchComparisonOperator;\n    label = KnoraConstants.MatchComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Match';\n    }\n\n}\n\n/**\n * Combination of a comparison operator and a value literal or an IRI.\n * In case the comparison operator is 'Exists', no value is given.\n */\nexport class ComparisonOperatorAndValue {\n\n    constructor(readonly comparisonOperator: ComparisonOperator, readonly value?: Value) {\n    }\n}\n\n/**\n * An abstract interface representing a value: an IRI or a literal.\n */\nexport interface Value {\n\n    /**\n     * Turns the value into a SPARQL string representation.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string} SPARQL representation of the value.\n     */\n    toSparql(schema: KnoraSchema): string;\n\n}\n\n/**\n * Represents a property's value as a literal with the indication of its type.\n */\nexport class ValueLiteral implements Value {\n\n    /**\n     * Constructs a [ValueLiteral].\n     *\n     * @param {string} value the literal representation of the value.\n     * @param {string} type the type of the value (making use of xsd).\n     */\n    constructor(\n        public readonly value: string,\n        public readonly type: string) {\n    }\n\n\n    /**\n     * Creates a type annotated value literal to be used in a SPARQL query.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n\n        let literalType: string;\n\n        // check if a Knora schema conversion is necessary, e.g., knora-api:dateValue (complex) to knora-api:date (simple).\n        // xsd types will remain unchanged\n        if (schema === KnoraSchema.simple && GravsearchGenerationService.typeConversionComplexToSimple[this.type] !== undefined) {\n            // convert to simple schema\n            literalType = GravsearchGenerationService.typeConversionComplexToSimple[this.type];\n        } else {\n            // do not convert\n            literalType = this.type;\n        }\n        return `\"${this.value}\"^^<${literalType}>`;\n    }\n\n}\n\n/**\n * Represents an IRI.\n */\nexport class IRI implements Value {\n\n    /**\n     * Constructs an [IRI].\n     *\n     * @param {string} iri the IRI of a resource instance.\n     */\n    constructor(readonly iri: string) {\n    }\n\n    /**\n     * Creates a SPARQL representation of the IRI.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n        // this is an instance Iri and does not have to be converted.\n        return `<${this.iri}>`;\n    }\n\n}\n\n/**\n * An abstract interface that represents a value.\n * This interface has to be implemented for all value types (value component classes).\n */\nexport interface PropertyValue {\n\n    /**\n     * Type of the value.\n     */\n    type: string;\n\n    /**\n     * Returns the value.\n     *\n     * @returns {Value}.\n     */\n    getValue(): Value;\n\n}\n\n/**\n * Represents a property, the specified comparison operator, and value.\n */\nexport class PropertyWithValue {\n\n    /**\n     * Constructs a [PropertyWithValue].\n     *\n     * @param {Property} property the specified property.\n     * @param {ComparisonOperatorAndValue} valueLiteral the specified comparison operator and value.\n     * @param isSortCriterion indicates if the property is used as a sort criterion.\n     */\n    constructor(\n        readonly property: Property,\n        readonly valueLiteral: ComparisonOperatorAndValue,\n        readonly isSortCriterion: Boolean) {\n    }\n\n}\n\n/**\n * a list, which is used in the mat-autocomplete form field\n * contains objects with id and name. the id is usual the iri\n */\nexport interface AutocompleteItem {\n    iri: string;\n    name: string;\n    label?: string;\n}\n\n"]}