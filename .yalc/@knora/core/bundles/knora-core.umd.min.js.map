{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@knora/core/lib/declarations/api/knora-constants.ts","ng://@knora/core/lib/core.module.ts","ng://@knora/core/lib/declarations/core.config.ts","ng://@knora/core/lib/declarations/api-service-result.ts","ng://@knora/core/lib/declarations/api-service-error.ts","ng://@knora/core/lib/declarations/utils.ts","ng://@knora/core/lib/declarations/api/shared/date.ts","ng://@knora/core/lib/declarations/api/shared/strings.ts","ng://@knora/core/lib/services/v2/ontology-cache.service.ts","ng://@knora/core/lib/declarations/api/admin/authentication/authentication-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project.ts","ng://@knora/core/lib/declarations/api/admin/groups/group.ts","ng://@knora/core/lib/declarations/api/admin/groups/group-response.ts","ng://@knora/core/lib/declarations/api/admin/groups/groups-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node.ts","ng://@knora/core/lib/declarations/api/admin/lists/list.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/lists-response.ts","ng://@knora/core/lib/declarations/api/admin/ontologies/ontology-info-short.ts","ng://@knora/core/lib/declarations/api/admin/permissions/permission-data.ts","ng://@knora/core/lib/declarations/api/admin/users/user.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-members-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/projects-response.ts","ng://@knora/core/lib/declarations/api/admin/users/users-response.ts","ng://@knora/core/lib/declarations/api/admin/users/user-response.ts","ng://@knora/core/lib/declarations/api/v2/properties/read-property-item.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resource.ts","ng://@knora/core/lib/services/api.service.ts","ng://@knora/core/lib/services/v2/ontology.service.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resources-sequence.ts","ng://@knora/core/lib/declarations/api/v2/count-query/count-query-result.ts","ng://@knora/core/lib/declarations/api/v2/still-image/still-image-representation.ts","ng://@knora/core/lib/declarations/api/v2/still-image/image-region.ts","ng://@knora/core/lib/services/admin/groups.service.ts","ng://@knora/core/lib/services/admin/lists.service.ts","ng://@knora/core/lib/services/admin/projects.service.ts","ng://@knora/core/lib/services/admin/users.service.ts","ng://@knora/core/lib/services/admin/language.service.ts","ng://@knora/core/lib/services/admin/status-msg.service.ts","ng://@knora/core/lib/services/v2/convert-jsonld.ts","ng://@knora/core/lib/services/v2/resource.service.ts","ng://@knora/core/lib/services/v2/search.service.ts","ng://@knora/core/lib/services/v2/incoming.service.ts","ng://@knora/core/lib/services/v2/search-params.service.ts","ng://@knora/core/lib/services/v2/grav-search.service.ts","ng://@knora/core/lib/services/v2/store.service.ts","ng://@knora/core/lib/services/v2/basic-ontology.service.ts","ng://@knora/core/lib/services/v2/resource-types.service.ts","ng://@knora/core/lib/services/v2/list.service.ts","ng://@knora/core/lib/services/v2/list-cache.service.ts","ng://@knora/core/lib/declarations/api/operators.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","KnoraSchema","KuiCoreConfigToken","InjectionToken","KuiCoreModule","forRoot","config","ngModule","KuiCoreModule_1","providers","provide","useValue","NgModule","imports","CommonModule","HttpClientModule","declarations","exports","KuiCoreConfig","name","undefined","app","api","media","tslib_1.__decorate","JsonProperty","String","JsonObject","ApiServiceResult","status","statusText","url","getBody","classObject","jsonConvert","deserialize","body","JsonConvert","OperationMode","ENABLE","ValueCheckingMode","ALLOW_NULL","ApiServiceError","errorInfo","KnoraConstants","KnoraVersion","KnoraApi","PathSeparator","KnoraOntologyPath","KnoraBase","KnoraAdmin","DefaultSharedOntologyIRI","SystemProjectIRI","SystemAdminGroupIRI","ProjectAdminGroupIRI","ProjectMemberGroupIRI","KnoraApiV2WithValueObjectPath","KnoraApiV2SimplePath","SalsahGuiOntology","SalsahGuiOrder","SalsahGuiAttribute","StandoffOntology","Resource","TextValue","IntValue","BooleanValue","UriValue","DecimalValue","DateValue","ColorValue","GeomValue","ListValue","IntervalValue","LinkValue","GeonameValue","FileValue","AudioFileValue","DDDFileValue","DocumentFileValue","StillImageFileValue","MovingImageFileValue","TextFileValue","IsResourceClass","IsValueClass","ForbiddenResource","XMLToStandoffMapping","ListNode","ArkUrl","versionArkUrl","ObjectType","ResourceIcon","isEditable","isLinkProperty","isLinkValueProperty","hasGeometry","schemaName","schemaNumberOfItems","schemaItemListElement","RdfProperty","RdfsSchema","RdfsLabel","RdfsComment","RdfsSubclassOf","subPropertyOf","owl","OwlClass","OwlObjectProperty","OwlDatatypeProperty","OwlAnnotationProperty","OwlOnProperty","OwlMaxCardinality","OwlMinCardinality","OwlCardinality","OwlRestriction","creationDate","lastModificationDate","hasPermissions","userHasPermission","attachedToProject","attachedToUser","Region","ReadTextValueAsHtml","ReadTextValueAsString","ReadTextValueAsXml","ReadDateValue","ReadLinkValue","ReadIntegerValue","ReadDecimalValue","ReadStillImageFileValue","ReadMovingImageFileValue","ReadAudioFileValue","ReadTextFileValue","ReadGeomValue","ReadColorValue","ReadUriValue","ReadBooleanValue","ReadIntervalValue","ReadListValue","valueAsString","textValueAsHtml","textValueAsXml","textValueHasMapping","hasStandoffLinkToValue","dateValueHasStartYear","dateValueHasEndYear","dateValueHasStartEra","dateValueHasEndEra","dateValueHasStartMonth","dateValueHasEndMonth","dateValueHasStartDay","dateValueHasEndDay","dateValueHasCalendar","linkValueHasTarget","linkValueHasSource","linkValueHasSourceIri","linkValueHasTargetIri","integerValueAsInteger","decimalValueAsDecimal","fileValueAsUrl","fileValueIsPreview","fileValueHasFilename","hasStillImageFileValue","stillImageFileValueHasDimX","stillImageFileValueHasDimY","stillImageFileValueHasIIIFBaseUrl","colorValueAsColor","geometryValueAsGeometry","uriValueAsUri","booleanValueAsBoolean","intervalValueHasStart","intervalValueHasEnd","listValueAsListNode","Xsd","xsdString","xsdBoolean","xsdInteger","xsdDecimal","xsdUri","resourceSimple","dateSimple","intervalSimple","geomSimple","colorSimple","geonameSimple","fileSimple","listNodeSimple","matchFunction","EqualsComparisonOperator","EqualsComparisonLabel","NotEqualsComparisonOperator","NotEqualsComparisonLabel","GreaterThanComparisonOperator","GreaterThanComparisonLabel","GreaterThanEqualsComparisonOperator","GreaterThanEqualsComparisonLabel","LessThanComparisonOperator","LessThanComparisonLabel","LessThanEqualsComparisonOperator","LessThanQualsComparisonLabel","ExistsComparisonOperator","ExistsComparisonLabel","LikeComparisonOperator","LikeComparisonLabel","MatchComparisonOperator","MatchComparisonLabel","SalsahLink","RefMarker","GNDPrefix","GNDResolver","VIAFPrefix","VIAFResolver","Precision","Utils","getOntologyIriFromEntityIri","entityIri","segments","split","console","error","convertComplexKnoraApiEntityIritoSimple","complexEntityIri","RegexEmail","RegexUsername","RegexUrl","RegexPassword","RegexHex","RegexShortname","filterOutDuplicates","elem","index","self","indexOf","StringLiteral","language","CardinalityOccurrence","DateSalsah","calendar","era","year","month","day","precision","yearPrecision","monthPrecision","dayPrecision","getDateAsStringWithoutCalendar","dateString","toString","separator","getDateAsString","DateRangeSalsah","start","end","AuthenticationResponse","token","Project","id","shortname","shortcode","longname","description","keywords","logo","institution","ontologies","selfjoin","Boolean","Group","project","GroupResponse","group","GroupsResponse","groups","ListInfo","projectIri","labels","comments","label","children","level","position","ListNode_1","Number","List","listinfo","ListInfoResponse","ListNodeInfo","isRootNode","ListNodeInfoResponse","nodeinfo","ListResponse","list","ListsResponse","lists","OntologyInfoShort","ontologyIri","ontologyName","PermissionData","groupsPerProject","administrativePermissionsPerProject","User","email","username","password","givenName","familyName","lang","projects","sessionId","permissions","systemAdmin","ProjectMembersResponse","members","ProjectResponse","ProjectsResponse","UsersResponse","users","UserResponse","user","ReadTextValue","type","_super","propIri","str","_this","tslib_1.__extends","getClassName","getContent","ReferredResourcesByStandoffLink","html","referredResources","getReferredResourceInfo","resourceIri","ontologyInfo","resClassLabel","getLabelForResourceClass","xml","mappingIri","startYear","endYear","startEra","endEra","startMonth","endMonth","startDay","endDay","getDateSalsah","referredResourceIri","referredResource","integer","decimal","imageFilename","imageServerIIIFBaseURL","imagePath","dimX","dimY","isPreview","endsWith","makeIIIFUrl","reduceFactor","percentage","Math","floor","filename","mediaServerIIIFBaseURL","path","duration","fps","aspectRatio","textFilename","textFileURL","colorHex","Point2D","x","y","RegionGeometry","lineColor","lineWidth","points","radius","geometryString","geometryJSON","JSON","parse","_b","tslib_1.__values","_c","point","push","geometry","uri","bool","intervalStart","intervalEnd","listNodeIri","ReadResource","incomingRegions","incomingStillImageRepresentations","incomingLinks","stillImageRepresentationsToDisplay","properties","incomingAnnotations","incomingFileRepresentations","fileRepresentationsToDisplay","jsonld","require","semver","ApiService","http","loading","httpGet","params","get","observe","pipe","map","response","result","header","server","headers","compareVersion","catchError","handleRequestError","processJSONLD","resourceResponse","resPromise","promises","compact","from","httpPost","post","httpPut","put","httpDelete","delete","serviceError","message","throwError","handleJsonError","expected","existing","diff","warn","Injectable","providedIn","tslib_1.__param","Inject","HttpClient","OntologyService","getOntologiesMetadata","getAllOntologies","getProjectOntologies","encodeURIComponent","getAllEntityDefinitionsForOntologies","getResourceClasses","resourceClassIris","Observable","observer","resClassUriEnc","forEach","resClassIri","getProperties","propertyIris","propertiesUriEnc","createOntology","data","ontology","knora-api:ontologyName","knora-api:attachedToProject","@id","rdfs:label","@context","rdfs","knora-api","OntologyCacheError","Error","OntologyMetadata","Cardinality","occurrence","property","GuiOrder","ResourceClass","icon","comment","cardinalities","guiOrder","ResourceClasses","Property","objectType","guiAttribute","Properties","ResourceClassIrisForOntology","OntologyCache","resourceClassIrisForOntology","resourceClasses","OntologyInformation","resourceClassesForOntology","sortFunc","a","labelA","toLowerCase","labelB","updateOntologyInformation","newResourceClassesForOntology","getResourceClassForOntology","newResClassForOntology","newResourceClasses","newResClass","newProperties","newProp","getResourceClassesAsArray","sortAsc","resClasses","resClass","sort","reverse","resClassDef","log","getPropertiesAsArray","prop","getLabelForProperty","propDef","OntologyCacheService","_ontologyService","excludedOntologies","excludedProperties","nonResourceClasses","cacheOntology","getOntologiesMetadataFromKnora","mergeMap","ontRes","ontPromise","getAllEntityDefinitionsForOntologyFromKnora","convertAndWriteOntologiesMetadataToCache","getAllOntologiesMetadataFromCache","getResourceClassIrisFromOntologyResponse","classDefinitions","classDefinitions_1","classDefinitions_1_1","classDef","classIri","convertAndWriteAllEntityDefinitionsForOntologyToCache","graph","classDefs","filter","entity","propertyDefs","entityType","convertAndWriteEntityDefinitionsToCache","getOntologyInformationFromCache","ontologyIris","allResourceClassIris","ontologyIris_1","ontologyIris_1_1","concat","getResourceClassDefinitions","resClassDefs","resourceClassDefinitions","propertyClassDefinitions","resourceClassDefinitions_1","resourceClassDefinitions_1_1","subclassOfCollection","isArray","subclassOfCollection_1","subclassOfCollection_1_1","curCard","newCard","minCard","card","TypeError","maxCard","newGuiOrder","resClassObj","convertAndWriteKnoraPropertyDefinitionsToOntologyCache","getResourceClassDefinitionsFromCache","resClassIris","getPropertyDefinitions","propDefs","propertyDefinitionsFromKnora","propertyDefinitionsFromKnora_1","propertyDefinitionsFromKnora_1_1","superProp","_d","attr","getPropertyDefinitionsFromCache","onto","of","getAndCacheOntologies","observables","forkJoin","getEntityDefinitionsForOntologies","ontologyIrisToQuery","resClassIrisToQueryFor","propertiesToQuery","results","ReadResourcesSequence","resources","numberOfResources","ontologyInformation","CountQueryResult","numberOfResults","StillImageRepresentation","stillImageFileValue","regions","ImageRegion","regionResource","getGeometries","GroupsService","apply","getAllGroups","getGroupByIri","iri","ListsService","getLists","getList","listIri","getListInfo","getListNodeInfo","nodeIri","createList","payload","updateListInfo","ProjectsService","getAllProjects","getProjectByIri","getProject","getProjectByShortname","getProjectByShortcode","getProjectMembersByIri","getProjectMembers","getProjectMembersByShortname","getProjectMembersByShortcode","createProject","updateProject","activateProject","deleteProject","UsersService","getAllUsers","getUser","identifier","identifierType","getUserByIri","getUserByEmail","getUserByUsername","getUsersGroupMemberships","userIri","createUser","addUserToProject","removeUserFromProject","addUserToProjectAdmin","removeUserFromProjectAdmin","addUserToGroup","groupIri","removeUserFromGroup","addUserToSystemAdmin","updateUserSystemAdmin","removeUserFromSystemAdmin","activateUser","updateOwnPassword","oldPassword","newPassword","requesterPassword","updateUsersPassword","updateBasicUserInformation","deleteUser","LanguageService","subject","Subject","setLanguage","var","getLanguage","asObservable","StatusMsgService","_http","getStatusMsg","res","err","ConvertJSONLD","getPropertyNames","propName","constructReadResource","resourceJSONLD","standoffLinkValuesJSONLD","standoffLinkValues","standoffLinkValuesJSONLD_1","standoffLinkValuesJSONLD_1_1","standoffLinkJSONLD","standoffVal","createValueSpecificProp","propNames","keys","propNames_1","propNames_1_1","propValues","_e","propValue","valueSpecificProp","constructReadProperties","textValue","standoffLinkValues_1","standoffLinkValues_1_1","referredRes","stringify","linkValue","incomingResource","incomingResourceIri","decVal","parseFloat","intStart","intEnd","getReferredResourceClasses","referredResourceClasses","propNames_2","propNames_2_1","createReadResourcesSequenceFromJsonLD","resourcesResponseJSONLD","resourcesGraph","resourcesGraph_1","resourcesGraph_1_1","resource","getResourceClassesFromJsonLD","resourcesGraph_2","resourcesGraph_2_1","createCountQueryResult","countQueryJSONLD","ResourceService","_ontologyCacheService","getResource","getReadResource","resSeq","ontoInfo","SearchService","convertJSONLDToReadResourceSequence","processFulltextSearchParams","httpParams","searchParams","limitToProject","set","limitToResourceClass","limitToStandoffClass","processSearchByLabelParams","doFulltextSearch","searchTerm","offset","HttpParams","doFullTextSearchReadResourceSequence","doFulltextSearchCountQuery","doFullTextSearchCountQueryCountQueryResult","doExtendedSearch","gravsearchQuery","doExtendedSearchReadResourceSequence","doExtendedSearchCountQuery","doExtendedSearchCountQueryCountQueryResult","searchByLabel","searchByLabelReadResourceSequence","IncomingService","getIncomingRegions","resourceIRI","sparqlQueryStr","getStillImageRepresentationsForCompoundResource","getIncomingLinksForResource","ExtendedSearchParams","generateGravsearch","SearchParamsService","_currentSearchParams","BehaviorSubject","changeSearchParamsMsg","getSearchParams","getValue","GravsearchGenerationService","_searchParamsService","createGravsearchQuery","mainResourceClassOption","mainResourceClass","orderByCriteria","returnStatements","props","propWithVal","valueLiteral","comparisonOperator","toSparql","complex","statement","restriction","propValueLiteral","GravsearchGenerationService_1","complexTypeToProp","isSortCriterion","orderByStatement","join","gravsearchTemplate","offsetTemplate","localOffset","typeConversionComplexToSimple","http://api.knora.org/ontology/knora-api/v2#IntValue","http://api.knora.org/ontology/knora-api/v2#DecimalValue","http://api.knora.org/ontology/knora-api/v2#BooleanValue","http://api.knora.org/ontology/knora-api/v2#TextValue","http://api.knora.org/ontology/knora-api/v2#DateValue","http://api.knora.org/ontology/knora-api/v2#IntervalValue","http://api.knora.org/ontology/knora-api/v2#GeomValue","http://api.knora.org/ontology/knora-api/v2#ColorValue","http://api.knora.org/ontology/knora-api/v2#GeonameValue","http://api.knora.org/ontology/knora-api/v2#UriValue","http://api.knora.org/ontology/knora-api/v2#StillImageFileValue","http://api.knora.org/ontology/knora-api/v2#FileValue","http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue","http://api.knora.org/ontology/knora-api/v2#DDDFileValue","http://api.knora.org/ontology/knora-api/v2#AudioFileValue","http://api.knora.org/ontology/knora-api/v2#DocumentFileValue","http://api.knora.org/ontology/knora-api/v2#TextFileValue","http://api.knora.org/ontology/knora-api/v2#ListValue","StoreService","resetTriplestoreContent","rdfDataObjects","BasicOntologyService","getBasicOntology","ResourceTypesService","getResourceTypesByVoc","getResourceType","ListService","getListFromKnora","rootNodeIri","getListNodeFromKnora","getListNode","ListNodeV2","hasRootNode","ListCache","ListNodeIriToListNodeV2","ListCacheService","_listService","listCache","listNodeIriToListNodeV2","convertJSONLDToListNode","listJSONLD","listNode","subListNode","hasRoot","listNodeJSONLD","completeList","Equals","NotEquals","GreaterThanEquals","GreaterThan","LessThan","LessThanEquals","Exists","Like","Match","ComparisonOperatorAndValue","ValueLiteral","schema","literalType","simple","IRI","PropertyWithValue"],"mappings":"osBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GA0B5E,SAASK,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HlB,EAAvHmB,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOhB,OAAOqB,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAGK,GAAK,EAAGA,KAAS1B,EAAIe,EAAWW,MAAIJ,GAAKH,EAAI,EAAInB,EAAEsB,GAAKH,EAAI,EAAInB,EAAEgB,EAAQC,EAAKK,GAAKtB,EAAEgB,EAAQC,KAASK,GAChJ,OAAOH,EAAI,GAAKG,GAAKpB,OAAOyB,eAAeX,EAAQC,EAAKK,GAAIA,EAGzD,SAASM,EAAQC,EAAYC,GAChC,OAAO,SAAUd,EAAQC,GAAOa,EAAUd,EAAQC,EAAKY,IAGpD,SAASE,EAAWC,EAAaC,GACpC,GAAuB,iBAAZT,SAAoD,mBAArBA,QAAQU,SAAyB,OAAOV,QAAQU,SAASF,EAAaC,GA4C7G,SAASE,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWb,EAAI,EAChE,OAAIW,EAAUA,EAAEG,KAAKJ,GACd,CACHK,KAAM,WAEF,OADIL,GAAKV,GAAKU,EAAEf,SAAQe,OAAI,GACrB,CAAEM,MAAON,GAAKA,EAAEV,KAAMiB,MAAOP,SC2GpCQ,ECxNCC,EAAqB,IAAIC,EAAAA,eAA8B,0CAYpEC,EAAA,WAAA,SAAAA,WAgBA,SAhBaA,EAMFA,EAAAC,QAAP,SAAeC,GAGX,MAAO,CACHC,SAAUC,EACVC,UAAW,CACP,CAACC,QAASR,EAAoBS,SAAUL,MAZ3CF,EAAaI,EAAArC,EAAA,CAVzByC,EAAAA,SAAS,CACNC,QAAS,CACLC,EAAAA,aACAC,EAAAA,kBAEJC,aAAc,GACdC,QAAS,CACLF,EAAAA,qBAGKX,GAAb,GCRAc,EAAA,WADA,SAAAA,IAQWnD,KAAAoD,KAAeC,UAOfrD,KAAAsD,IAAcD,UAOdrD,KAAAuD,IAAcF,UAOdrD,KAAAwD,MAAgBH,UAE3B,OAvBII,EAAAA,CADCC,EAAAA,aAAa,OAAQC,4DAQtBF,EAAAA,CADCC,EAAAA,aAAa,MAAOC,2DAQrBF,EAAAA,CADCC,EAAAA,aAAa,MAAOC,2DAQrBF,EAAAA,CADCC,EAAAA,aAAa,QAASC,6DA3BdR,EAAa/C,EAAA,CADzBwD,EAAAA,WAAW,kBACCT,GAAb,GCHAU,EAAA,WAAA,SAAAA,IAYI7D,KAAA8D,OAAS,EAKT9D,KAAA+D,WAAa,GAKb/D,KAAAgE,IAAM,GAoBV,OANIH,EAAA3D,UAAA+D,QAAA,SAAQC,GAEJ,OAAOL,EAAiBM,YAAYC,YAAYpE,KAAKqE,KAAMH,IApChDL,EAAAM,YAA2B,IAAIG,EAAAA,YAAYC,EAAAA,cAAcC,OAAQC,EAAAA,kBAAkBC,YAwCtGb,EA1CA,GCFAc,EAAA,WA4BA,OA5BA,WAWI3E,KAAA8D,OAAS,EAKT9D,KAAA+D,WAAa,GAKb/D,KAAAgE,IAAM,GAKNhE,KAAA4E,UAAY,IA1BhB,gBJJA,SAAAC,KA0NA,OAvNkBA,EAAAC,aAAuB,QAEvBD,EAAAE,SAAmB,0CACnBF,EAAAG,cAAwB,IAExBH,EAAAI,kBAA4B,gCAC5BJ,EAAAK,UAAoBL,EAAeI,kBAAoB,cACvDJ,EAAAM,WAAqBN,EAAeI,kBAAoB,eAExDJ,EAAAO,yBAAmCP,EAAeM,WAAa,kCAC/DN,EAAAQ,iBAA2BR,EAAeM,WAAa,iBACvDN,EAAAS,oBAA8BT,EAAeM,WAAa,eAC1DN,EAAAU,qBAA+BV,EAAeM,WAAa,gBAC3DN,EAAAW,sBAAgCX,EAAeM,WAAa,iBAE5DN,EAAAY,8BAAwCZ,EAAeE,SAAW,MAAQF,EAAeG,cACzFH,EAAAa,qBAA+Bb,EAAeE,SAAW,aAAeF,EAAeG,cAEvFH,EAAAc,kBAA4B,8CAE5Bd,EAAAe,eAAyBf,EAAec,kBAAoB,YAC5Dd,EAAAgB,mBAA6BhB,EAAec,kBAAoB,gBAGhEd,EAAAiB,iBAA2B,4CAE3BjB,EAAAkB,SAAmBlB,EAAeY,8BAAgC,WAClEZ,EAAAmB,UAAoBnB,EAAeY,8BAAgC,YACnEZ,EAAAoB,SAAmBpB,EAAeY,8BAAgC,WAClEZ,EAAAqB,aAAuBrB,EAAeY,8BAAgC,eACtEZ,EAAAsB,SAAmBtB,EAAeY,8BAAgC,WAClEZ,EAAAuB,aAAuBvB,EAAeY,8BAAgC,eACtEZ,EAAAwB,UAAoBxB,EAAeY,8BAAgC,YACnEZ,EAAAyB,WAAqBzB,EAAeY,8BAAgC,aACpEZ,EAAA0B,UAAoB1B,EAAeY,8BAAgC,YACnEZ,EAAA2B,UAAoB3B,EAAeY,8BAAgC,YACnEZ,EAAA4B,cAAwB5B,EAAeY,8BAAgC,gBACvEZ,EAAA6B,UAAoB7B,EAAeY,8BAAgC,YACnEZ,EAAA8B,aAAuB9B,EAAeY,8BAAgC,eACtEZ,EAAA+B,UAAoB/B,EAAeY,8BAAgC,YACnEZ,EAAAgC,eAAyBhC,EAAeY,8BAAgC,iBACxEZ,EAAAiC,aAAuBjC,EAAeY,8BAAgC,eACtEZ,EAAAkC,kBAA4BlC,EAAeY,8BAAgC,oBAC3EZ,EAAAmC,oBAA8BnC,EAAeY,8BAAgC,sBAC7EZ,EAAAoC,qBAA+BpC,EAAeY,8BAAgC,uBAC9EZ,EAAAqC,cAAwBrC,EAAeY,8BAAgC,gBACvEZ,EAAAsC,gBAA0BtC,EAAeY,8BAAgC,kBACzEZ,EAAAuC,aAAuBvC,EAAeY,8BAAgC,eACtEZ,EAAAwC,kBAA4BxC,EAAeY,8BAAgC,oBAC3EZ,EAAAyC,qBAA+BzC,EAAeY,8BAAgC,uBAC9EZ,EAAA0C,SAAmB1C,EAAeY,8BAAgC,WAElEZ,EAAA2C,OAAiB3C,EAAeY,8BAAgC,SAChEZ,EAAA4C,cAAwB5C,EAAeY,8BAAgC,gBACvEZ,EAAA6C,WAAa7C,EAAeY,8BAAgC,aAE5DZ,EAAA8C,aAAuB9C,EAAeY,8BAAgC,eACtEZ,EAAA+C,WAAqB/C,EAAeY,8BAAgC,aACpEZ,EAAAgD,eAAyBhD,EAAeY,8BAAgC,iBACxEZ,EAAAiD,oBAA8BjD,EAAeY,8BAAgC,sBAC7EZ,EAAAkD,YAAsBlD,EAAeY,8BAAgC,cAErEZ,EAAAmD,WAAqB,yBACrBnD,EAAAoD,oBAA8B,kCAC9BpD,EAAAqD,sBAAgC,oCAGhCrD,EAAAsD,YAAsB,sDACtBtD,EAAAuD,WAAqB,uCAAyCvD,EAAeG,cAC7EH,EAAAwD,UAAoBxD,EAAeuD,WAAa,QAChDvD,EAAAyD,YAAsBzD,EAAeuD,WAAa,UAClDvD,EAAA0D,eAAyB1D,EAAeuD,WAAa,aACrDvD,EAAA2D,cAAwB3D,EAAeuD,WAAa,gBAEpDvD,EAAA4D,IAAc,gCAEd5D,EAAA6D,SAAmB7D,EAAe4D,IAAM,SACxC5D,EAAA8D,kBAA4B9D,EAAe4D,IAAM,kBACjD5D,EAAA+D,oBAA8B/D,EAAe4D,IAAM,oBACnD5D,EAAAgE,sBAAgChE,EAAe4D,IAAM,sBACrD5D,EAAAiE,cAAwBjE,EAAe4D,IAAM,cAC7C5D,EAAAkE,kBAA4BlE,EAAe4D,IAAM,kBACjD5D,EAAAmE,kBAA4BnE,EAAe4D,IAAM,kBACjD5D,EAAAoE,eAAyBpE,EAAe4D,IAAM,eAC9C5D,EAAAqE,eAAyBrE,EAAe4D,IAAM,eAE9C5D,EAAAsE,aAAuBtE,EAAeY,8BAAgC,eACtEZ,EAAAuE,qBAA+BvE,EAAeY,8BAAgC,uBAC9EZ,EAAAwE,eAAyBxE,EAAeY,8BAAgC,iBACxEZ,EAAAyE,kBAA4BzE,EAAeY,8BAAgC,oBAC3EZ,EAAA0E,kBAA4B1E,EAAeY,8BAAgC,oBAC3EZ,EAAA2E,eAAyB3E,EAAeY,8BAAgC,iBAExEZ,EAAA4E,OAAiB5E,EAAeY,8BAAgC,SAEhEZ,EAAA6E,oBAA8B,sBAC9B7E,EAAA8E,sBAAgC,wBAChC9E,EAAA+E,mBAA6B,qBAC7B/E,EAAAgF,cAAwB,gBACxBhF,EAAAiF,cAAwB,gBACxBjF,EAAAkF,iBAA2B,mBAC3BlF,EAAAmF,iBAA2B,mBAC3BnF,EAAAoF,wBAAkC,0BAClCpF,EAAAqF,yBAAmC,2BACnCrF,EAAAsF,mBAA6B,qBAC7BtF,EAAAuF,kBAA4B,oBAC5BvF,EAAAwF,cAAwB,gBACxBxF,EAAAyF,eAAyB,iBACzBzF,EAAA0F,aAAuB,eACvB1F,EAAA2F,iBAA2B,mBAC3B3F,EAAA4F,kBAA4B,oBAC5B5F,EAAA6F,cAAwB,gBAExB7F,EAAA8F,cAAwB9F,EAAeY,8BAAgC,gBAEvEZ,EAAA+F,gBAA0B/F,EAAeY,8BAAgC,kBACzEZ,EAAAgG,eAAyBhG,EAAeY,8BAAgC,iBACxEZ,EAAAiG,oBAA8BjG,EAAeY,8BAAgC,sBAE7EZ,EAAAkG,uBAAiClG,EAAeY,8BAAgC,yBAEhFZ,EAAAmG,sBAAgCnG,EAAeY,8BAAgC,wBAC/EZ,EAAAoG,oBAA8BpG,EAAeY,8BAAgC,sBAC7EZ,EAAAqG,qBAA+BrG,EAAeY,8BAAgC,uBAC9EZ,EAAAsG,mBAA6BtG,EAAeY,8BAAgC,qBAC5EZ,EAAAuG,uBAAiCvG,EAAeY,8BAAgC,yBAChFZ,EAAAwG,qBAA+BxG,EAAeY,8BAAgC,uBAC9EZ,EAAAyG,qBAA+BzG,EAAeY,8BAAgC,uBAC9EZ,EAAA0G,mBAA6B1G,EAAeY,8BAAgC,qBAC5EZ,EAAA2G,qBAA+B3G,EAAeY,8BAAgC,uBAE9EZ,EAAA4G,mBAA6B5G,EAAeY,8BAAgC,qBAC5EZ,EAAA6G,mBAA6B7G,EAAeY,8BAAgC,qBAC5EZ,EAAA8G,sBAAgC9G,EAAeY,8BAAgC,wBAC/EZ,EAAA+G,sBAAgC/G,EAAeY,8BAAgC,wBAE/EZ,EAAAgH,sBAAgChH,EAAeY,8BAAgC,gBAE/EZ,EAAAiH,sBAAgCjH,EAAeY,8BAAgC,wBAE/EZ,EAAAkH,eAAyBlH,EAAeY,8BAAgC,iBACxEZ,EAAAmH,mBAA6BnH,EAAeY,8BAAgC,qBAC5EZ,EAAAoH,qBAA+BpH,EAAeY,8BAAgC,uBAE9EZ,EAAAqH,uBAAiCrH,EAAeY,8BAAgC,yBAEhFZ,EAAAsH,2BAAqCtH,EAAeY,8BAAgC,6BACpFZ,EAAAuH,2BAAqCvH,EAAeY,8BAAgC,6BACpFZ,EAAAwH,kCAA4CxH,EAAeY,8BAAgC,oCAE3FZ,EAAAyH,kBAA4BzH,EAAeY,8BAAgC,oBAC3EZ,EAAA0H,wBAAkC1H,EAAeY,8BAAgC,0BACjFZ,EAAA2H,cAAwB3H,EAAeY,8BAAgC,gBACvEZ,EAAA4H,sBAAgC5H,EAAeY,8BAAgC,wBAE/EZ,EAAA6H,sBAAgC7H,EAAeY,8BAAgC,wBAC/EZ,EAAA8H,oBAA8B9H,EAAeY,8BAAgC,sBAE7EZ,EAAA+H,oBAA8B/H,EAAeY,8BAAgC,sBAE7EZ,EAAAgI,IAAc,oCAEdhI,EAAAiI,UAAoBjI,EAAegI,IAAM,SACzChI,EAAAkI,WAAqBlI,EAAegI,IAAM,UAC1ChI,EAAAmI,WAAqBnI,EAAegI,IAAM,UAC1ChI,EAAAoI,WAAqBpI,EAAegI,IAAM,UAC1ChI,EAAAqI,OAAiBrI,EAAegI,IAAM,SAEtChI,EAAAsI,eAAyBtI,EAAea,qBAAuB,WAC/Db,EAAAuI,WAAqBvI,EAAea,qBAAuB,OAC3Db,EAAAwI,eAAyBxI,EAAea,qBAAuB,WAC/Db,EAAAyI,WAAqBzI,EAAea,qBAAuB,OAC3Db,EAAA0I,YAAsB1I,EAAea,qBAAuB,QAC5Db,EAAA2I,cAAwB3I,EAAea,qBAAuB,UAC9Db,EAAA4I,WAAqB5I,EAAea,qBAAuB,OAC3Db,EAAA6I,eAAyB7I,EAAea,qBAAuB,WAE/Db,EAAA8I,cAAwB9I,EAAeY,8BAAgC,QAEvEZ,EAAA+I,yBAAmC,IACnC/I,EAAAgJ,sBAAgC,cAEhChJ,EAAAiJ,4BAAsC,KACtCjJ,EAAAkJ,yBAAmC,kBAEnClJ,EAAAmJ,8BAAwC,IACxCnJ,EAAAoJ,2BAAqC,kBAErCpJ,EAAAqJ,oCAA8C,KAC9CrJ,EAAAsJ,iCAA2C,4BAE3CtJ,EAAAuJ,2BAAqC,IACrCvJ,EAAAwJ,wBAAkC,eAElCxJ,EAAAyJ,iCAA2C,KAC3CzJ,EAAA0J,6BAAuC,yBAEvC1J,EAAA2J,yBAAmC,IACnC3J,EAAA4J,sBAAgC,SAEhC5J,EAAA6J,uBAAiC,QACjC7J,EAAA8J,oBAA8B,UAE9B9J,EAAA+J,wBAAkC,WAClC/J,EAAAgK,qBAA+B,UAE/BhK,EAAAiK,WAAqB,cACrBjK,EAAAkK,UAAoB,aAEpBlK,EAAAmK,UAAoB,WACpBnK,EAAAoK,YAAsB,wBAEtBpK,EAAAqK,WAAqB,SACrBrK,EAAAsK,aAAuB,yBAEzCtK,MAGY3C,EAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACnBA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,OAAA,GAAA,SKzNJ,ICHYkN,EDGZC,EAAA,WAAA,SAAAA,KAoGA,OA9BkBA,EAAAC,4BAAd,SAA0CC,GAGtC,IAAMC,EAAqBD,EAAUE,MAAM5K,EAAeG,eAI1D,OAFwB,IAApBwK,EAAS7O,QAAc+O,QAAQC,MAAM,UAAUJ,EAAS,+BAErDC,EAAS,IAUNH,EAAAO,wCAAd,SAAsDC,GAGlD,IAAML,EAAqBK,EAAiBJ,MAAM,KAAO5K,EAAeG,eAKxE,OAHwB,IAApBwK,EAAS7O,QAAc+O,QAAQC,MAAM,UAAUE,EAAgB,+BAG5DL,EAAS,GAAK,YAAc3K,EAAeG,cAAgBwK,EAAS,IAzFxDH,EAAAS,WAAa,yHAObT,EAAAU,cAAgB,iBAOhBV,EAAAW,SAAW,2HAOXX,EAAAY,cAAgB,iCAOhBZ,EAAAa,SAAW,iBAOXb,EAAAc,eAAiB,iBAW1Bd,EAAAe,oBAAsB,SAACC,EAAMC,EAAeC,GAQtD,OAAOD,IAAUC,EAAKC,QAAQH,IAwCtChB,EApGA,gBEJA,SAAAoB,IAIWzQ,KAAAgC,MAAgBqB,UAGhBrD,KAAA0Q,SAAmB,GAC9B,OAJIjN,EAAAA,CADCC,EAAAA,aAAa,QAASC,QAAQ,wDAI/BF,EAAAA,CADCC,EAAAA,aAAa,WAAYC,QAAQ,2DALzB8M,EAAarQ,EAAA,CADzBwD,EAAAA,WAAW,kBACC6M,ODADrB,EAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACjBA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,eAAA,GAAA,iBACAA,EAAAA,EAAA,aAAA,GAAA,eAMJ,IEgCYuB,EFhCZC,EAAA,WAMI,SAAAA,EACaC,EACAC,EACAC,EACAC,EACAC,GAJAjR,KAAA6Q,SAAAA,EACA7Q,KAAA8Q,IAAAA,EACA9Q,KAAA+Q,KAAAA,EACA/Q,KAAAgR,MAAAA,EACAhR,KAAAiR,IAAAA,EAELjR,KAAKgR,QAAU3N,UAEfrD,KAAKkR,UAAY9B,EAAAA,UAAU+B,cACpBnR,KAAKiR,MAAQ5N,UAEpBrD,KAAKkR,UAAY9B,EAAAA,UAAUgC,eAG3BpR,KAAKkR,UAAY9B,EAAAA,UAAUiC,aAkDvC,OAxCIT,EAAA1Q,UAAAoR,+BAAA,WAEI,IAAIC,EAAa,IAAMvR,KAAK8Q,IAAM,KAElC,OAAQ9Q,KAAKkR,WAET,KAAK9B,EAAAA,UAAU+B,cACXI,GAAcvR,KAAK+Q,KAAKS,WACxB,MAGJ,KAAKpC,EAAAA,UAAUgC,eACXG,GAAcvR,KAAK+Q,KAAOH,EAAWa,UAAYzR,KAAKgR,MACtD,MAGJ,KAAK5B,EAAAA,UAAUiC,aACXE,GAAcvR,KAAK+Q,KAAOH,EAAWa,UAAYzR,KAAKgR,MAAQJ,EAAWa,UAAYzR,KAAKiR,IAUlG,OAAOM,GAQXX,EAAA1Q,UAAAwR,gBAAA,WAEI,OAAO1R,KAAK6Q,SAAW,IAAM7Q,KAAKsR,kCAlEvBV,EAAAa,UAAY,IAqE/Bb,EAvEA,GA4EAe,EAAA,WAEI,SAAAA,EACaC,EACAC,GADA7R,KAAA4R,MAAAA,EACA5R,KAAA6R,IAAAA,EAYjB,OAHIF,EAAAzR,UAAAwR,gBAAA,WACI,OAAO1R,KAAK4R,MAAMF,kBAAoB,IAAM1R,KAAK6R,IAAIP,kCAE7DK,EAhBA,gBGtFA,SAAAG,IAIW9R,KAAA+R,MAAgB1O,UAC3B,OADII,EAAAA,CADCC,EAAAA,aAAa,QAASC,6DAFdmO,EAAsB1R,EAAA,CADlCwD,EAAAA,WAAW,2BACCkO,mBCCb,SAAAE,IAIWhS,KAAAiS,GAAa5O,UAGbrD,KAAAkS,UAAoB7O,UAGpBrD,KAAAmS,UAAoB9O,UAGpBrD,KAAAoS,SAAmB/O,UAGnBrD,KAAAqS,YAA+B,CAAC,IAAI5B,GAGpCzQ,KAAAsS,SAAqBjP,UAGrBrD,KAAAuS,KAAelP,UAGfrD,KAAAwS,YAAsBnP,UAGtBrD,KAAAyS,WAAuBpP,UAGvBrD,KAAA8D,OAAkBT,UAGlBrD,KAAA0S,SAAoBrP,UAE/B,OAhCII,EAAAA,CADCC,EAAAA,aAAa,KAAMC,0DAIpBF,EAAAA,CADCC,EAAAA,aAAa,YAAaC,iEAI3BF,EAAAA,CADCC,EAAAA,aAAa,YAAaC,QAAQ,4DAInCF,EAAAA,CADCC,EAAAA,aAAa,WAAYC,QAAQ,2DAIlCF,EAAAA,CADCC,EAAAA,aAAa,cAAe,CAAC+M,IAAgB,6DAI9ChN,EAAAA,CADCC,EAAAA,aAAa,WAAY,CAACC,SAAS,0DAIpCF,EAAAA,CADCC,EAAAA,aAAa,OAAQC,QAAQ,uDAI9BF,EAAAA,CADCC,EAAAA,aAAa,cAAeC,QAAQ,8DAIrCF,EAAAA,CADCC,EAAAA,aAAa,aAAc,CAACC,kEAI7BF,EAAAA,CADCC,EAAAA,aAAa,SAAUiP,gEAIxBlP,EAAAA,CADCC,EAAAA,aAAa,WAAYiP,kEAhCjBX,EAAO5R,EAAA,CADnBwD,EAAAA,WAAW,YACCoO,mBCFb,SAAAY,IAIW5S,KAAAiS,GAAa5O,UAGbrD,KAAAoD,KAAeC,UAGfrD,KAAAqS,YAAsBhP,UAGtBrD,KAAA6S,QAAmBxP,UAGnBrD,KAAA8D,OAAkBT,UAGlBrD,KAAA0S,SAAoBrP,UAE/B,OAjBII,EAAAA,CADCC,EAAAA,aAAa,KAAMC,0DAIpBF,EAAAA,CADCC,EAAAA,aAAa,OAAQC,4DAItBF,EAAAA,CADCC,EAAAA,aAAa,cAAeC,mEAI7BF,EAAAA,CADCC,EAAAA,aAAa,UAAWsO,GAAS,mBAClBA,kCAGhBvO,EAAAA,CADCC,EAAAA,aAAa,SAAUiP,gEAIxBlP,EAAAA,CADCC,EAAAA,aAAa,WAAYiP,kEAjBjBC,EAAKxS,EAAA,CADjBwD,EAAAA,WAAW,UACCgP,mBCDb,SAAAE,IAIW9S,KAAA+S,MAAe1P,UAE1B,OAFII,EAAAA,CADCC,EAAAA,aAAa,QAASkP,mBACTA,gCAHLE,EAAa1S,EAAA,CADzBwD,EAAAA,WAAW,kBACCkP,mBCDb,SAAAE,IAIWhT,KAAAiT,OAAkB5P,UAE7B,OAFII,EAAAA,CADCC,EAAAA,aAAa,SAAU,CAACkP,yDAFhBI,EAAc5S,EAAA,CAD1BwD,EAAAA,WAAW,mBACCoP,mBCDb,SAAAE,IAIWlT,KAAAiS,GAAa5O,UAGbrD,KAAAmT,WAAqB9P,UAGrBrD,KAAAoT,OAA0B/P,UAG1BrD,KAAAqT,SAA4BhQ,UACvC,OAVII,EAAAA,CADCC,EAAAA,aAAa,KAAMC,QAAQ,qDAI5BF,EAAAA,CADCC,EAAAA,aAAa,aAAcC,QAAQ,6DAIpCF,EAAAA,CADCC,EAAAA,aAAa,SAAU,CAAC+M,IAAgB,wDAIzChN,EAAAA,CADCC,EAAAA,aAAa,WAAY,CAAC+M,IAAgB,0DAXlCyC,EAAQ9S,EAAA,CADpBwD,EAAAA,WAAW,aACCsP,mBCFb,SAAA3L,IAGWvH,KAAAiS,GAAa5O,UAGbrD,KAAAoD,KAAeC,UAGfrD,KAAAsT,MAAgBjQ,UAGhBrD,KAAAuT,SAAuBlQ,UAGvBrD,KAAAwT,MAAgBnQ,UAGhBrD,KAAAyT,SAAmBpQ,gBAC9B,SAlBakE,EAET9D,EAAAA,CADCC,EAAAA,aAAa,KAAMC,QAAQ,qDAI5BF,EAAAA,CADCC,EAAAA,aAAa,OAAQC,QAAQ,uDAI9BF,EAAAA,CADCC,EAAAA,aAAa,QAASC,QAAQ,wDAI/BF,EAAAA,CADCC,EAAAA,aAAa,WAAY,CAACgQ,IAAW,0DAItCjQ,EAAAA,CADCC,EAAAA,aAAa,QAASiQ,QAAQ,wDAI/BlQ,EAAAA,CADCC,EAAAA,aAAa,WAAYiQ,QAAQ,2DAhBzBpM,EAAQmM,EAAAtT,EAAA,CADpBwD,EAAAA,WAAW,aACC2D,mBCCb,SAAAqM,IAIW5T,KAAA6T,SAAqBxQ,UAGrBrD,KAAAuT,SAAuBlQ,UAClC,OAJII,EAAAA,CADCC,EAAAA,aAAa,WAAYwP,GAAU,mBACnBA,mCAGjBzP,EAAAA,CADCC,EAAAA,aAAa,WAAY,CAAC6D,IAAW,0DAL7BqM,EAAIxT,EAAA,CADhBwD,EAAAA,WAAW,SACCgQ,mBCFb,SAAAE,IAIW9T,KAAA6T,SAAqBxQ,UAChC,OADII,EAAAA,CADCC,EAAAA,aAAa,WAAYwP,GAAU,mBACnBA,mCAHRY,EAAgB1T,EAAA,CAD5BwD,EAAAA,WAAW,qBACCkQ,mBCDb,SAAAC,IAIW/T,KAAAiS,GAAa5O,UAGbrD,KAAAoD,KAAeC,UAGfrD,KAAAmT,WAAqB9P,UAGrBrD,KAAAgU,WAAsB3Q,UAGtBrD,KAAAoT,OAA0B/P,UAG1BrD,KAAAqT,SAA4BhQ,UACvC,OAhBII,EAAAA,CADCC,EAAAA,aAAa,KAAMC,0DAIpBF,EAAAA,CADCC,EAAAA,aAAa,OAAQC,QAAQ,uDAI9BF,EAAAA,CADCC,EAAAA,aAAa,aAAcC,QAAQ,6DAIpCF,EAAAA,CADCC,EAAAA,aAAa,aAAciP,SAAS,8DAIrClP,EAAAA,CADCC,EAAAA,aAAa,SAAU,CAAC+M,yDAIzBhN,EAAAA,CADCC,EAAAA,aAAa,WAAY,CAAC+M,2DAjBlBsD,EAAY3T,EAAA,CADxBwD,EAAAA,WAAW,iBACCmQ,mBCDb,SAAAE,IAIWjU,KAAAkU,SAAyB7Q,UACpC,OADII,EAAAA,CADCC,EAAAA,aAAa,WAAYqQ,GAAc,mBACvBA,mCAHRE,EAAoB7T,EAAA,CADhCwD,EAAAA,WAAW,yBACCqQ,mBCDb,SAAAE,IAIWnU,KAAAoU,KAAa/Q,UACxB,OADII,EAAAA,CADCC,EAAAA,aAAa,OAAQkQ,GAAM,mBACfA,+BAHJO,EAAY/T,EAAA,CADxBwD,EAAAA,WAAW,iBACCuQ,mBCDb,SAAAE,IAIWrU,KAAAsU,MAAwBjR,UACnC,OADII,EAAAA,CADCC,EAAAA,aAAa,QAAS,CAACqQ,IAAe,uDAF9BM,EAAajU,EAAA,CADzBwD,EAAAA,WAAW,kBACCyQ,mBCFb,SAAAE,IAIWvU,KAAAwU,YAAsBnR,UAGtBrD,KAAAyU,aAAuBpR,UAElC,OALII,EAAAA,CADCC,EAAAA,aAAa,cAAeC,mEAI7BF,EAAAA,CADCC,EAAAA,aAAa,eAAgBC,oEALrB4Q,EAAiBnU,EAAA,CAD7BwD,EAAAA,WAAW,sBACC2Q,mBCDb,SAAAG,IAIW1U,KAAA2U,iBAAwBtR,UAGxBrD,KAAA4U,oCAA2CvR,UACtD,OAJII,EAAAA,CADCC,EAAAA,aAAa,mBAAoBlE,wEAIlCiE,EAAAA,CADCC,EAAAA,aAAa,sCAAuClE,2FAL5CkV,EAActU,EAAA,CAD1BwD,EAAAA,WAAW,mBACC8Q,mBCEb,SAAAG,IAIW7U,KAAAiS,GAAa5O,UAGbrD,KAAA8U,MAAgBzR,UAGhBrD,KAAA+U,SAAmB1R,UAGnBrD,KAAAgV,SAAmB3R,UAGnBrD,KAAA+R,MAAgB1O,UAGhBrD,KAAAiV,UAAoB5R,UAGpBrD,KAAAkV,WAAqB7R,UAGrBrD,KAAA8D,OAAkBT,UAGlBrD,KAAAmV,KAAe9R,UAGfrD,KAAAiT,OAAkB5P,UAGlBrD,KAAAoV,SAAsB/R,UAGtBrD,KAAAqV,UAAoBhS,UAGpBrD,KAAAsV,YAA8BjS,UAG9BrD,KAAAuV,aAAwB,EAEnC,OAzCI9R,EAAAA,CADCC,EAAAA,aAAa,KAAMC,0DAIpBF,EAAAA,CADCC,EAAAA,aAAa,QAASC,6DAIvBF,EAAAA,CADCC,EAAAA,aAAa,WAAYC,gEAI1BF,EAAAA,CADCC,EAAAA,aAAa,WAAYC,QAAQ,2DAIlCF,EAAAA,CADCC,EAAAA,aAAa,QAASC,QAAQ,wDAI/BF,EAAAA,CADCC,EAAAA,aAAa,YAAaC,iEAI3BF,EAAAA,CADCC,EAAAA,aAAa,aAAcC,kEAI5BF,EAAAA,CADCC,EAAAA,aAAa,SAAUiP,gEAIxBlP,EAAAA,CADCC,EAAAA,aAAa,OAAQC,4DAItBF,EAAAA,CADCC,EAAAA,aAAa,SAAU,CAACkP,yDAIzBnP,EAAAA,CADCC,EAAAA,aAAa,WAAY,CAACsO,2DAI3BvO,EAAAA,CADCC,EAAAA,aAAa,YAAaC,QAAQ,4DAInCF,EAAAA,CADCC,EAAAA,aAAa,cAAegR,mBACTA,sCAGpBjR,EAAAA,CADCC,EAAAA,aAAa,cAAeiP,SAAS,+DAzC7BkC,EAAIzU,EAAA,CADhBwD,EAAAA,WAAW,SACCiR,mBCHb,SAAAW,IAGWxV,KAAAyV,QAAkBpS,UAC7B,OADII,EAAAA,CADCC,EAAAA,aAAa,UAAW,CAACmR,0DADjBW,EAAsBpV,EAAA,CADlCwD,EAAAA,WAAW,2BACC4R,mBCAb,SAAAE,IAIW1V,KAAA6S,QAAmBxP,UAE9B,OAFII,EAAAA,CADCC,EAAAA,aAAa,UAAWsO,mBACTA,kCAHP0D,EAAetV,EAAA,CAD3BwD,EAAAA,WAAW,oBACC8R,mBCFb,SAAAC,IAIW3V,KAAAoV,SAAsB/R,UAEjC,OAFII,EAAAA,CADCC,EAAAA,aAAa,WAAY,CAACsO,2DAFlB2D,EAAgBvV,EAAA,CAD5BwD,EAAAA,WAAW,qBACC+R,mBCDb,SAAAC,IAIW5V,KAAA6V,MAAgBxS,UAE3B,OAFII,EAAAA,CADCC,EAAAA,aAAa,QAAS,CAACmR,wDAFfe,EAAaxV,EAAA,CADzBwD,EAAAA,WAAW,kBACCgS,mBCDb,SAAAE,IAIW9V,KAAA+V,KAAa1S,UACxB,OADII,EAAAA,CADCC,EAAAA,aAAa,OAAQmR,mBACTA,+BAHJiB,EAAY1V,EAAA,CADxBwD,EAAAA,WAAW,iBACCkS,MCuCbE,EAAA,WAWA,OAXA,WAIahW,KAAAiW,KAAepR,EAAemB,WAJ3C,GAgBA2D,EAAA,SAAAuM,GAEI,SAAAvM,EAAqBsI,EAAqBkE,EAAkBC,GAA5D,IAAAC,EACIH,EAAApU,KAAA9B,OAAOA,YADUqW,EAAApE,GAAAA,EAAqBoE,EAAAF,QAAAA,EAAkBE,EAAAD,IAAAA,IAWhE,OAb2CE,EAAAA,EAAAA,GAMvC3M,EAAAzJ,UAAAqW,aAAA,WACI,OAAO1R,EAAe8E,uBAG1BA,EAAAzJ,UAAAsW,WAAA,WACI,OAAOxW,KAAKoW,KAEpBzM,EAbA,CAA2CqM,GAkB3CS,EAAA,WAEA,OAFA,aAAA,GAOA/M,EAAA,SAAAwM,GAEI,SAAAxM,EAAqBuI,EAAqBkE,EAAkBO,EAAuBC,GAAnF,IAAAN,EACIH,EAAApU,KAAA9B,OAAOA,YADUqW,EAAApE,GAAAA,EAAqBoE,EAAAF,QAAAA,EAAkBE,EAAAK,KAAAA,EAAuBL,EAAAM,kBAAAA,IAiCvF,OAnCyCL,EAAAA,EAAAA,GAerC5M,EAAAxJ,UAAA0W,wBAAA,SAAwBC,EAAqBC,GACzC,GAAI9W,KAAK2W,oBAAsBtT,WAAarD,KAAK2W,kBAAkBE,KAAiBxT,UAAW,CAE3F,IAAM0T,EAAgBD,EAAaE,yBAAyBhX,KAAK2W,kBAAkBE,GAAaZ,MAEhG,OAAOjW,KAAK2W,kBAAkBE,GAAavD,MAAQ,KAAKyD,EAAa,IAErE,MAAO,0EAKfrN,EAAAxJ,UAAAqW,aAAA,WACI,OAAO1R,EAAe6E,qBAG1BA,EAAAxJ,UAAAsW,WAAA,WACI,OAAOxW,KAAK0W,MAGpBhN,EAnCA,CAAyCsM,GAwCzCpM,EAAA,SAAAsM,GAEI,SAAAtM,EAAqBqI,EAAqBkE,EAAkBc,EAAsBC,GAAlF,IAAAb,EACIH,EAAApU,KAAA9B,OAAOA,YADUqW,EAAApE,GAAAA,EAAqBoE,EAAAF,QAAAA,EAAkBE,EAAAY,IAAAA,EAAsBZ,EAAAa,WAAAA,IAYtF,OAdwCZ,EAAAA,EAAAA,GAMpC1M,EAAA1J,UAAAqW,aAAA,WACI,OAAO1R,EAAe+E,oBAG1BA,EAAA1J,UAAAsW,WAAA,WACI,OAAOxW,KAAKiX,KAGpBrN,EAdA,CAAwCoM,GAoBxCnM,EAAA,WAEI,SAAAA,EACaoI,EACAkE,EACAtF,EACAsG,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAVA1X,KAAAiS,GAAAA,EACAjS,KAAAmW,QAAAA,EACAnW,KAAA6Q,SAAAA,EACA7Q,KAAAmX,UAAAA,EACAnX,KAAAoX,QAAAA,EACApX,KAAAqX,SAAAA,EACArX,KAAAsX,OAAAA,EACAtX,KAAAuX,WAAAA,EACAvX,KAAAwX,SAAAA,EACAxX,KAAAyX,SAAAA,EACAzX,KAAA0X,OAAAA,EAGJ1X,KAAAiW,KAAOpR,EAAewB,UAEvBrG,KAAAyR,UAAY,IAoBxB,OAlBI5H,EAAA3J,UAAAyX,cAAA,WACI,OAAI3X,KAAKmX,YAAcnX,KAAKoX,SAAWpX,KAAKuX,aAAevX,KAAKwX,UAAYxX,KAAKyX,WAAazX,KAAK0X,QAAU1X,KAAKqX,WAAarX,KAAKsX,OAEzH,IAAI1G,EAAW5Q,KAAK6Q,SAAU7Q,KAAKqX,SAAUrX,KAAKmX,UAAWnX,KAAKuX,WAAYvX,KAAKyX,UAGnF,IAAI9F,EAAgB,IAAIf,EAAW5Q,KAAK6Q,SAAU7Q,KAAKqX,SAAUrX,KAAKmX,UAAWnX,KAAKuX,WAAYvX,KAAKyX,UAAW,IAAI7G,EAAW5Q,KAAK6Q,SAAU7Q,KAAKsX,OAAQtX,KAAKoX,QAASpX,KAAKwX,SAAUxX,KAAK0X,UAK9M7N,EAAA3J,UAAAqW,aAAA,WACI,OAAO1R,EAAegF,eAG1BA,EAAA3J,UAAAsW,WAAA,WACI,OAAOxW,KAAK2X,gBAAgBjG,mBAEpC7H,EAtCA,GA2CAC,GAAA,WAEI,SAAAA,EAAqBmI,EAAqBkE,EAAkByB,EAAsCC,GAA7E7X,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAAkBnW,KAAA4X,oBAAAA,EAAsC5X,KAAA6X,iBAAAA,EAIzF7X,KAAAiW,KAAOpR,EAAe6B,UAwBnC,OAtBIoD,EAAA5J,UAAA0W,wBAAA,SAAwBE,GACpB,GAAI9W,KAAK6X,mBAAqBxU,UAAW,CAErC,IAAM0T,EAAgBD,EAAaE,yBAAyBhX,KAAK6X,iBAAiB5B,MAElF,OAAOjW,KAAK6X,iBAAiBvE,MAAQ,KAAKyD,EAAa,IAEvD,OAAO/W,KAAK4X,qBAIpB9N,EAAA5J,UAAAqW,aAAA,WACI,OAAO1R,EAAeiF,eAG1BA,EAAA5J,UAAAsW,WAAA,WACI,OAAIxW,KAAK6X,mBAAqBxU,UACnBrD,KAAK6X,iBAAiBvE,MAEtBtT,KAAK4X,qBAGxB9N,EA9BA,GAmCAC,GAAA,WAEI,SAAAA,EAAqBkI,EAAqBkE,EAAkB2B,GAAvC9X,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAAkBnW,KAAA8X,QAAAA,EAInD9X,KAAAiW,KAAOpR,EAAeoB,SAUnC,OARI8D,EAAA7J,UAAAqW,aAAA,WACI,OAAO1R,EAAekF,kBAG1BA,EAAA7J,UAAAsW,WAAA,WACI,OAAOxW,KAAK8X,QAAQtG,YAG5BzH,EAhBA,GAqBAC,GAAA,WAEI,SAAAA,EAAqBiI,EAAqBkE,EAAkB4B,GAAvC/X,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAAkBnW,KAAA+X,QAAAA,EAInD/X,KAAAiW,KAAOpR,EAAeuB,aASnC,OAPI4D,EAAA9J,UAAAqW,aAAA,WACI,OAAO1R,EAAemF,kBAG1BA,EAAA9J,UAAAsW,WAAA,WACI,OAAOxW,KAAK+X,QAAQvG,YAE5BxH,EAfA,GAoBAC,GAAA,WAEI,SAAAA,EACagI,EACAkE,EACA6B,EACAC,EACAC,EACAC,EACAC,GANApY,KAAAiS,GAAAA,EACAjS,KAAAmW,QAAAA,EACAnW,KAAAgY,cAAAA,EACAhY,KAAAiY,uBAAAA,EACAjY,KAAAkY,UAAAA,EACAlY,KAAAmY,KAAAA,EACAnY,KAAAoY,KAAAA,EAOJpY,KAAAiW,KAAOpR,EAAemC,oBAJ3BhH,KAAKqY,UAAYL,EAAcM,SAAS,QA6BhD,OArBIrO,EAAA/J,UAAAqY,YAAA,SAAYC,GAER,GAAIxY,KAAKqY,UACL,OAAOrY,KAAKkY,UAEZ,IAAIO,EAAaC,KAAKC,MAAM,IAAMH,GAIlC,OAFAC,EAAcA,EAAa,GAAKA,GAAc,IAAOA,EAAa,GAE3DzY,KAAKiY,uBAAyB,IAAMjY,KAAKgY,cAAgB,aAAeS,EAAWjH,WAAa,kBAK/GvH,EAAA/J,UAAAqW,aAAA,WACI,OAAO1R,EAAeoF,yBAG1BA,EAAA/J,UAAAsW,WAAA,WACI,OAAOxW,KAAKkY,WAEpBjO,EAzCA,GA8CAC,GAAA,WAEI,SAAAA,EACa+H,EACAkE,EACAyC,EACAC,EACAC,EACAX,EACAC,EACAW,EACAC,EACAC,GATAjZ,KAAAiS,GAAAA,EACAjS,KAAAmW,QAAAA,EACAnW,KAAA4Y,SAAAA,EACA5Y,KAAA6Y,uBAAAA,EACA7Y,KAAA8Y,KAAAA,EACA9Y,KAAAmY,KAAAA,EACAnY,KAAAoY,KAAAA,EACApY,KAAA+Y,SAAAA,EACA/Y,KAAAgZ,IAAAA,EACAhZ,KAAAiZ,YAAAA,EAIJjZ,KAAAiW,KAAOpR,EAAeoC,qBA4BnC,OAPIiD,EAAAhK,UAAAqW,aAAA,WACI,OAAO1R,EAAeqF,0BAG1BA,EAAAhK,UAAAsW,WAAA,WACI,OAAOxW,KAAK8Y,MAEpB5O,EA5CA,GAiDAE,GAAA,WAEI,SAAAA,EAAqB6H,EAAqBkE,EAAkB+C,EAA+BC,GAAtEnZ,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAAkBnW,KAAAkZ,aAAAA,EAA+BlZ,KAAAmZ,YAAAA,EAIlFnZ,KAAAiW,KAAOpR,EAAeqC,cAUnC,OARIkD,EAAAlK,UAAAqW,aAAA,WACI,OAAO1R,EAAeuF,mBAG1BA,EAAAlK,UAAAsW,WAAA,WACI,OAAOxW,KAAKmZ,aAGpB/O,EAhBA,GAqBAE,GAAA,WAEI,SAAAA,EAAqB2H,EACRkE,EACAiD,GAFQpZ,KAAAiS,GAAAA,EACRjS,KAAAmW,QAAAA,EACAnW,KAAAoZ,SAAAA,EAGJpZ,KAAAiW,KAAOpR,EAAeyB,WASnC,OAPIgE,EAAApK,UAAAqW,aAAA,WACI,OAAO1R,EAAeyF,gBAG1BA,EAAApK,UAAAsW,WAAA,WACI,OAAOxW,KAAKoZ,UAEpB9O,EAhBA,GAqBA+O,GAAA,WAGA,OAFI,SAAmBC,EAAkBC,GAAlBvZ,KAAAsZ,EAAAA,EAAkBtZ,KAAAuZ,EAAAA,GADzC,GAQAC,GAAA,WASA,OARI,SAAmB1V,EACR2V,EACAC,EACAC,EACA1D,EACA2D,GALQ5Z,KAAA8D,OAAAA,EACR9D,KAAAyZ,UAAAA,EACAzZ,KAAA0Z,UAAAA,EACA1Z,KAAA2Z,OAAAA,EACA3Z,KAAAiW,KAAAA,EACAjW,KAAA4Z,OAAAA,GANf,GAcAvP,GAAA,WAEI,SAAAA,EAAqB4H,EAAqBkE,EAA0B0D,WAA/C7Z,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAA0BnW,KAAA6Z,eAAAA,EA2B3D7Z,KAAAiW,KAAOpR,EAAe0B,UAzB3B,IAOIqT,EAPEE,EAAeC,KAAKC,MAAMH,GAE1BF,EAAoB,OAC1B,IAAoB,IAAAM,EAAAC,EAAAJ,EAAaH,QAAMQ,EAAAF,EAAAlY,QAAAoY,EAAAlY,KAAAkY,EAAAF,EAAAlY,OAAE,CAApC,IAAMqY,EAAKD,EAAAnY,MACZ2X,EAAOU,KAAK,IAAIhB,GAAQe,EAAMd,EAAGc,EAAMb,yGAIvCO,EAAaF,SACbA,EAAS,IAAIP,GAAQS,EAAaF,OAAON,EAAGQ,EAAaF,OAAOL,IAGpEvZ,KAAKsa,SAAW,IAAId,GAChBM,EAAahW,OACbgW,EAAaL,UACbK,EAAaJ,UACbC,EACAG,EAAa7D,KACb2D,GAgBZ,OAPIvP,EAAAnK,UAAAqW,aAAA,WACI,OAAO1R,EAAewF,eAG1BA,EAAAnK,UAAAsW,WAAA,WACI,OAAOxW,KAAK6Z,gBAEpBxP,EAtCA,GA2CAE,GAAA,WAEI,SAAAA,EAAqB0H,EAAqBkE,EAA0BoE,GAA/Cva,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAA0BnW,KAAAua,IAAAA,EAI3Dva,KAAAiW,KAAOpR,EAAesB,SAUnC,OARIoE,EAAArK,UAAAqW,aAAA,WACI,OAAO1R,EAAe0F,cAG1BA,EAAArK,UAAAsW,WAAA,WACI,OAAOxW,KAAKua,KAGpBhQ,EAhBA,GAqBAC,GAAA,WAEI,SAAAA,EAAqByH,EAAqBkE,EAA0BqE,GAA/Cxa,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAA0BnW,KAAAwa,KAAAA,EAI3Dxa,KAAAiW,KAAOpR,EAAeqB,aAUnC,OARIsE,EAAAtK,UAAAqW,aAAA,WACI,OAAO1R,EAAe2F,kBAG1BA,EAAAtK,UAAAsW,WAAA,WACI,OAAOxW,KAAKwa,KAAKhJ,YAGzBhH,EAhBA,GAqBAC,GAAA,WAEI,SAAAA,EAAqBwH,EAAqBkE,EAA0BsE,EAAgCC,GAA/E1a,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAA0BnW,KAAAya,cAAAA,EAAgCza,KAAA0a,YAAAA,EAI3F1a,KAAAiW,KAAOpR,EAAe4B,cAUnC,OARIgE,EAAAvK,UAAAqW,aAAA,WACI,OAAO1R,EAAe4F,mBAG1BA,EAAAvK,UAAAsW,WAAA,WACI,OAAOxW,KAAKya,cAAcjJ,WAAa,IAAMxR,KAAK0a,aAG1DjQ,EAhBA,GAqBAC,GAAA,WAEI,SAAAA,EAAqBuH,EAAqBkE,EAA0BwE,GAA/C3a,KAAAiS,GAAAA,EAAqBjS,KAAAmW,QAAAA,EAA0BnW,KAAA2a,YAAAA,EAI3D3a,KAAAiW,KAAOpR,EAAe2B,UAUnC,OARIkE,EAAAxK,UAAAqW,aAAA,WACI,OAAO1R,EAAe6F,eAG1BA,EAAAxK,UAAAsW,WAAA,WACI,OAAOxW,KAAK2a,aAGpBjQ,EAhBA,GC3gBAkQ,GAAA,WA4BA,OAfI,SACoB3I,EACAgE,EACA3C,EAETuH,EAEAC,EACAC,EAEAC,EAESC,GAXAjb,KAAAiS,GAAAA,EACAjS,KAAAiW,KAAAA,EACAjW,KAAAsT,MAAAA,EAETtT,KAAA6a,gBAAAA,EAEA7a,KAAA8a,kCAAAA,EACA9a,KAAA+a,cAAAA,EAEA/a,KAAAgb,mCAAAA,EAEShb,KAAAib,WAAAA,GAzBxB,GAkCAlV,GAAA,WAWA,OAVI,SACoBkM,EACAgE,EACA3C,EACT4H,EACAC,EACAJ,EACAK,EACSH,GAPAjb,KAAAiS,GAAAA,EACAjS,KAAAiW,KAAAA,EACAjW,KAAAsT,MAAAA,EACTtT,KAAAkb,oBAAAA,EACAlb,KAAAmb,4BAAAA,EACAnb,KAAA+a,cAAAA,EACA/a,KAAAob,6BAAAA,EACSpb,KAAAib,WAAAA,GATxB,GC1BMI,GAASC,QAAQ,UAEjBC,GAASD,QAAQ,UAKvBE,GAAA,WAOI,SAAAA,EAA8BC,EACSlZ,GADTvC,KAAAyb,KAAAA,EACSzb,KAAAuC,OAAAA,EAHvCvC,KAAA0b,SAAU,SAeVF,EAAAtb,UAAAyb,QAAA,SAAQ7C,EAAc8C,GAAtB,IAAAvF,EAAArW,KAII,OAFAA,KAAK0b,SAAU,EAER1b,KAAKyb,KAAKI,IAAI7b,KAAKuC,OAAOgB,IAAMuV,EAAM,CAAEgD,QAAS,WAAYF,OAAQA,IAAUG,KAClFC,EAAAA,IAAI,SAACC,GACD5F,EAAKqF,SAAU,EAEf,IAAMQ,EAAS,IAAIrY,EAQnB,OAPAqY,EAAOC,OAAS,CAAEC,OAAUH,EAASI,QAAQR,IAAI,WACjDxF,EAAKiG,eAAeL,EAASI,QAAQR,IAAI,WACzCK,EAAOpY,OAASmY,EAASnY,OACzBoY,EAAOnY,WAAakY,EAASlY,WAC7BmY,EAAOlY,IAAM8U,EACboD,EAAO7X,KAAO4X,EAAS5X,KAEhB6X,IAEXK,EAAAA,WAAW,SAAC5M,GAGR,OAFA0G,EAAKqF,SAAU,EAERrF,EAAKmG,mBAAmB7M,OAYjC6L,EAAAtb,UAAAuc,cAAV,SAAwBC,GAEpB,IAEMC,EAFctB,GAAOuB,SAEIC,QAAQH,EAAiBrY,KAAM,IAI9D,OAAOyY,EAAAA,KAAKH,IAWhBnB,EAAAtb,UAAA6c,SAAA,SAASjE,EAAczU,GAAvB,IAAAgS,EAAArW,KAMI,OAJAA,KAAK0b,SAAU,EAIR1b,KAAKyb,KAAKuB,KAAKhd,KAAKuC,OAAOgB,IAAMuV,EAAMzU,EAAM,CAAEyX,QAAS,aAAcC,KACzEC,EAAAA,IAAI,SAACC,GACD5F,EAAKqF,SAAU,EAEf,IAAMQ,EAAS,IAAIrY,EAOnB,OANAqY,EAAOC,OAAS,CAAEC,OAAUH,EAASI,QAAQR,IAAI,WACjDxF,EAAKiG,eAAeJ,EAAOC,OAAOC,QAClCF,EAAOpY,OAASmY,EAASnY,OACzBoY,EAAOnY,WAAakY,EAASlY,WAC7BmY,EAAOlY,IAAM8U,EACboD,EAAO7X,KAAO4X,EAAS5X,KAChB6X,IAEXK,EAAAA,WAAW,SAAC5M,GAKR,OAJA0G,EAAKqF,SAAU,EAIRrF,EAAKmG,mBAAmB7M,OAa3C6L,EAAAtb,UAAA+c,QAAA,SAAQnE,EAAczU,GAAtB,IAAAgS,EAAArW,KAMI,OAJAA,KAAK0b,SAAU,EAIR1b,KAAKyb,KAAKyB,IAAIld,KAAKuC,OAAOgB,IAAMuV,EAAMzU,EAAM,CAAEyX,QAAS,aAAcC,KACxEC,EAAAA,IAAI,SAACC,GACD5F,EAAKqF,SAAU,EAIf,IAAMQ,EAAS,IAAIrY,EAOnB,OANAqY,EAAOC,OAAS,CAAEC,OAAUH,EAASI,QAAQR,IAAI,WACjDxF,EAAKiG,eAAeJ,EAAOC,OAAOC,QAClCF,EAAOpY,OAASmY,EAASnY,OACzBoY,EAAOnY,WAAakY,EAASlY,WAC7BmY,EAAOlY,IAAM8U,EACboD,EAAO7X,KAAO4X,EAAS5X,KAChB6X,IAGXK,EAAAA,WAAW,SAAC5M,GAKR,OAJA0G,EAAKqF,SAAU,EAIRrF,EAAKmG,mBAAmB7M,OAW3C6L,EAAAtb,UAAAid,WAAA,SAAWrE,GAAX,IAAAzC,EAAArW,KAMI,OAJAA,KAAK0b,SAAU,EAIR1b,KAAKyb,KAAK2B,UAAOpd,KAAKuC,OAAOgB,IAAMuV,EAAM,CAAEgD,QAAS,aAAcC,KACrEC,EAAAA,IAAI,SAACC,GACD5F,EAAKqF,SAAU,EAIf,IAAMQ,EAAS,IAAIrY,EAOnB,OANAqY,EAAOC,OAAS,CAAEC,OAAUH,EAASI,QAAQR,IAAI,WACjDxF,EAAKiG,eAAeJ,EAAOC,OAAOC,QAClCF,EAAOpY,OAASmY,EAASnY,OACzBoY,EAAOnY,WAAakY,EAASlY,WAC7BmY,EAAOlY,IAAM8U,EACboD,EAAO7X,KAAO4X,EAAS5X,KAChB6X,IAGXK,EAAAA,WAAW,SAAC5M,GAKR,OAJA0G,EAAKqF,SAAU,EAIRrF,EAAKmG,mBAAmB7M,OAYjC6L,EAAAtb,UAAAsc,mBAAV,SAA6B7M,GAEzB,IAAM0N,EAAe,IAAI1Y,EAMzB,OALA0Y,EAAalB,OAAS,CAAEC,OAAUzM,EAAM0M,QAAQR,IAAI,WACpDwB,EAAavZ,OAAS6L,EAAM7L,OAC5BuZ,EAAatZ,WAAa4L,EAAM5L,WAChCsZ,EAAazY,UAAY+K,EAAM2N,QAC/BD,EAAarZ,IAAM2L,EAAM3L,IAClBuZ,EAAAA,WAAWF,IASZ7B,EAAAtb,UAAAsd,gBAAV,SAA0B7N,GAEtB,GAAIA,aAAiBhL,EAAiB,OAAO4Y,EAAAA,WAAW5N,GAExD,IAAM0N,EAAe,IAAI1Y,EAMzB,OALA0Y,EAAalB,OAAS,CAAEC,OAAUzM,EAAM0M,QAAQR,IAAI,WACpDwB,EAAavZ,QAAU,EACvBuZ,EAAatZ,WAAa,eAC1BsZ,EAAazY,UAAY+K,EACzB0N,EAAarZ,IAAM,GACZuZ,EAAAA,WAAWF,IAIZ7B,EAAAtb,UAAAoc,eAAV,SAAyBF,GAGrB,IAAMqB,EAAmB5Y,EAAeC,aAGxC,GAAIsX,EAAQ,CACR,IACMsB,EADqBtB,EAAO3M,MAAM,KACN,GAAGA,MAAM,KAAK,GAGR,UAApC8L,GAAOoC,KAAKD,EAAUD,IACtB/N,QAAQkO,KAAK,2DAA6DH,EAAW,sCAAwCC,kJArOvHlC,EAAUpb,EAAA,CAH/Byd,EAAAA,WAAW,CACRC,WAAY,SAUPC,EAAAA,EAAAC,EAAAA,OAAO7b,2BADwB8b,EAAAA,WAAUze,UAP5Bgc,GAAtB,GCNA0C,GAAA,SAAAhI,GAAA,SAAAgI,0DAAqC5H,EAAAA,EAAAA,GAajC4H,EAAAhe,UAAAie,sBAAA,WACI,OAAOne,KAAK2b,QAAQ,4BAQxBuC,EAAAhe,UAAAke,iBAAA,WACI,OAAOpe,KAAK2b,QAAQ,4BASxBuC,EAAAhe,UAAAme,qBAAA,SAAqBlL,GACjB,OAAOnT,KAAK2b,QAAQ,2BAA6B2C,mBAAmBnL,KAcxE+K,EAAAhe,UAAAqe,qCAAA,SAAqC/J,GACjC,OAAOxU,KAAK2b,QAAQ,8BAAgC2C,mBAAmB9J,KAS3E0J,EAAAhe,UAAAse,mBAAA,SAAmBC,GAEf,GAAiC,IAA7BA,EAAkB9d,OAElB,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,iFAGxD,IAAIiP,EAAiB,GAMrB,OAJAH,EAAkBI,QAAQ,SAAUC,GAChCF,EAAiBA,EAAiB,IAAMN,mBAAmBQ,EAAYtN,cAGpExR,KAAK2b,QAAQ,yBAA2BiD,IASnDV,EAAAhe,UAAA6e,cAAA,SAAcC,GAEV,GAA4B,IAAxBA,EAAare,OAEb,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,sEAGxD,IAAIsP,EAAmB,GAMvB,OAJAD,EAAaH,QAAQ,SAAUC,GAC3BG,EAAmBA,EAAmB,IAAMX,mBAAmBQ,EAAYtN,cAGxExR,KAAK2b,QAAQ,4BAA8BsD,IActDf,EAAAhe,UAAAgf,eAAA,SAAeC,GACX,IAEMC,EAAW,CACbC,yBAA0BF,EAAK/b,KAC/Bkc,8BAA+B,CAC3BC,MAAOJ,EAAKhM,YAEhBqM,aAAcL,EAAK7L,MACnBmM,WAAY,CACRC,KAAQ7a,EAAeuD,WACvBuX,YAAa9a,EAAeY,gCAIpC,OAAOzF,KAAK+c,SAdC,iBAccqC,GAAUrD,KACjCC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAO7X,OACzCkY,EAAAA,WAAWvc,KAAKwd,gKA3HfU,EAAe9d,EAAA,CAH3Byd,EAAAA,WAAW,CACRC,WAAY,UAEHI,GAAb,CAAqC1C,IzBL/BH,GAASC,QAAQ,UAKvBsE,GAAA,SAAA1J,GAEI,SAAA0J,EAAqBtC,GAArB,IAAAjH,EACIH,EAAApU,KAAA9B,KAAMsd,IAAQtd,YADGqW,EAAAiH,QAAAA,IAGzB,OALiChH,EAAAA,EAAAA,GAKjCsJ,EALA,CAAiCC,OAWjCC,GAAA,WAaA,OALI,SAAqB7N,EACRqB,GADQtT,KAAAiS,GAAAA,EACRjS,KAAAsT,MAAAA,GATjB,IAmBY3C,EAAAA,EAAAA,wBAAAA,EAAAA,sBAAqB,KAC7BA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,QAAA,GAAA,UAOJ,IAAAoP,GAAA,WAWA,OAJI,SAAqBC,EACRhe,EACAie,GAFQjgB,KAAAggB,WAAAA,EACRhgB,KAAAgC,MAAAA,EACAhC,KAAAigB,SAAAA,GATjB,GAeAC,GAAA,WAUA,OALI,SAAqBle,EACRie,GADQjgB,KAAAgC,MAAAA,EACRhC,KAAAigB,SAAAA,GANjB,GAeAE,GAAA,WAkBA,OARI,SAAqBlO,EACRmO,EACAC,EACA/M,EACAgN,EACAC,GALQvgB,KAAAiS,GAAAA,EACRjS,KAAAogB,KAAAA,EACApgB,KAAAqgB,QAAAA,EACArgB,KAAAsT,MAAAA,EACAtT,KAAAsgB,cAAAA,EACAtgB,KAAAugB,SAAAA,GAfjB,GAwBAC,GAAA,WAEA,OAFA,aAAA,GAQAC,GAAA,WAuBA,OAVI,SAAqBxO,EACAyO,EACAL,EACA/M,EACA9K,EACAZ,EACAC,EACAC,EACA6Y,GARA3gB,KAAAiS,GAAAA,EACAjS,KAAA0gB,WAAAA,EACA1gB,KAAAqgB,QAAAA,EACArgB,KAAAsT,MAAAA,EACAtT,KAAAwI,cAAAA,EACAxI,KAAA4H,WAAAA,EACA5H,KAAA6H,eAAAA,EACA7H,KAAA8H,oBAAAA,EACA9H,KAAA2gB,aAAAA,GArBzB,GA6BAC,GAAA,WAEA,OAFA,aAAA,GAUAC,GAAA,WAEA,OAFA,aAAA,GAWAC,GAAA,WA+BA,OATI,WACI9gB,KAAKyS,WAAa,GAElBzS,KAAK+gB,6BAA+B,IAAIF,GAExC7gB,KAAKghB,gBAAkB,IAAIR,GAE3BxgB,KAAKib,WAAa,IAAI2F,IA7B9B,GAsCAK,GAAA,WAOI,SAAAA,EACYC,EACAF,EACA/F,GAFAjb,KAAAkhB,2BAAAA,EACAlhB,KAAAghB,gBAAAA,EACAhhB,KAAAib,WAAAA,EAsMhB,OA5LWgG,EAAAE,SAAP,SAAgBC,EAA6B7hB,GAEzC,GAAI6hB,EAAE9N,QAAUjQ,UACZ,OAAO,EACJ,GAAI9D,EAAE+T,QAAUjQ,UACnB,OAAQ,EAGZ,IAAMge,EAASD,EAAE9N,MAAMgO,cACjBC,EAAShiB,EAAE+T,MAAMgO,cAEvB,OAAID,EAASE,GACD,EACDF,EAASE,EACT,EAEA,GAcfN,EAAA/gB,UAAAshB,0BAAA,SAA0B1K,GAGtB,IAAM2K,EAA8D3K,EAAa4K,8BAIjF,IAAK,IAAMC,KAA0BF,EACjCzhB,KAAKkhB,2BAA2BS,GAA0BF,EAA8BE,GAI5F,IAAMC,EAAqB9K,EAAa0H,qBAIxC,IAAK,IAAMqD,KAAeD,EACtB5hB,KAAKghB,gBAAgBa,GAAeD,EAAmBC,GAI3D,IAAMC,EAAgBhL,EAAaiI,gBAInC,IAAK,IAAMgD,KAAWD,EAClB9hB,KAAKib,WAAW8G,GAAWD,EAAcC,IAUjDd,EAAA/gB,UAAAwhB,4BAAA,WACI,OAAO1hB,KAAKkhB,4BAQhBD,EAAA/gB,UAAAse,mBAAA,WACI,OAAOxe,KAAKghB,iBAShBC,EAAA/gB,UAAA8hB,0BAAA,SAA0BC,QAAA,IAAAA,IAAAA,GAAA,GAEtB,IAAMC,EAAmC,GAGzC,IAAK,IAAMpD,KAAe9e,KAAKghB,gBAAiB,CAC5C,IAAMmB,EAA0BniB,KAAKghB,gBAAgBlC,GACrDoD,EAAW7H,KAAK8H,GAWpB,OAPAD,EAAWE,KAAKnB,EAAoBE,UAG/Bc,GACDC,EAAWG,UAGRH,GAUXjB,EAAA/gB,UAAA8W,yBAAA,SAAyBmL,GAErB,GAAIA,IAAa9e,UAAW,CAExB,IAAMif,EAA6BtiB,KAAKghB,gBAAgBmB,GAExD,GAAIG,IAAgBjf,WAAaif,EAAYhP,QAAUjQ,UACnD,OAAOif,EAAYhP,MAEnB5D,QAAQ6S,IAAI,wBAAwBJ,QAGxCzS,QAAQ6S,IAAI,mFASpBtB,EAAA/gB,UAAA6e,cAAA,WACI,OAAO/e,KAAKib,YAShBgG,EAAA/gB,UAAAsiB,qBAAA,SAAqBP,QAAA,IAAAA,IAAAA,GAAA,GAEjB,IAAMhH,EAA8B,GAGpC,IAAK,IAAM9E,KAAWnW,KAAKib,WAAY,CACnC,IAAMwH,EAAiBziB,KAAKib,WAAW9E,GACvC8E,EAAWZ,KAAKoI,GAWpB,OAPAxH,EAAWmH,KAAKnB,EAAoBE,UAG/Bc,GACDhH,EAAWoH,UAGRpH,GAUXgG,EAAA/gB,UAAAwiB,oBAAA,SAAoBzC,GAEhB,GAAIA,IAAa5c,UAAW,CAExB,IAAMsf,EAAoB3iB,KAAKib,WAAWgF,GAE1C,GAAI0C,IAAYtf,WAAasf,EAAQrP,QAAUjQ,UAC3C,OAAOsf,EAAQrP,MAEf5D,QAAQ6S,IAAI,wBAAwBtC,QAGxCvQ,QAAQ6S,IAAI,8EAIxBtB,EAhNA,GA0NA2B,GAAA,WAuBI,SAAAA,EAAoBC,GAAA7iB,KAAA6iB,iBAAAA,EAjBZ7iB,KAAA8iB,mBAAoC,CAACje,EAAec,kBAAmBd,EAAeiB,kBAKtF9F,KAAA+iB,mBAAoC,CAACle,EAAewD,WAKpDrI,KAAAgjB,mBAAoC,CAACne,EAAewC,kBAAmBxC,EAAeyC,qBAAsBzC,EAAe0C,UAK3HvH,KAAAijB,cAA+B,IAAInC,UAUnC8B,EAAA1iB,UAAAgjB,+BAAR,WAEI,OAAOljB,KAAK6iB,iBAAiB1E,wBAAwBpC,KACjDoH,EAAAA,SAII,SAACC,GACG,IAEMC,EAFchI,GAAOuB,SAEIC,QAAQuG,EAAO/e,KAAM,IAIpD,OAAOyY,EAAAA,KAAKuG,OAYpBT,EAAA1iB,UAAAojB,4CAAR,SAAoD9O,GAEhD,OAAOxU,KAAK6iB,iBAAiBtE,qCAAqC/J,GAAauH,KAC3EoH,EAAAA,SAII,SAACC,GACG,IAEMC,EAFchI,GAAOuB,SAEIC,QAAQuG,EAAO/e,KAAM,IAIpD,OAAOyY,EAAAA,KAAKuG,OAYpBT,EAAA1iB,UAAAqjB,yCAAR,SAAiD9Q,GAE7CzS,KAAKijB,cAAcxQ,WAAaA,EAAWuJ,IACvC,SAAAoD,GACI,OAAO,IAAIU,GAAiBV,EAAS,OAAQA,EAASva,EAAewD,eAUzEua,EAAA1iB,UAAAsjB,kCAAR,WAEI,OAAOxjB,KAAKijB,cAAcxQ,YAWtBmQ,EAAA1iB,UAAAujB,yCAAR,SAAiDC,WACvCjF,EAA8B,OAEpC,IAAuB,IAAAkF,EAAAzJ,EAAAwJ,GAAgBE,EAAAD,EAAA5hB,QAAA6hB,EAAA3hB,KAAA2hB,EAAAD,EAAA5hB,OAAE,CAApC,IAAM8hB,EAAQD,EAAA5hB,MACT8hB,EAAWD,EAAS,OAItBC,IAAajf,EAAekB,WACvB,IADmC/F,KAAKgjB,mBAAmBxS,QAAQsT,IAC7DD,EAAShf,EAAesC,mBAAqB9D,YAA0D,IAA7CwgB,EAAShf,EAAesC,kBAE7FsX,EAAkBpE,KAAKyJ,wGAI/B,OAAOrF,GAaHmE,EAAA1iB,UAAA6jB,sDAAR,SAA8D3E,GAE1D,IAAM4E,EAAQ5E,EAAS,UAGjB6E,EAAYD,EAAME,OACpB,SAACC,GAEG,OADmBA,EAAO,WACJtf,EAAe6D,WAIvC0b,EAAeJ,EAAME,OACvB,SAACC,GACG,IAAME,EAAaF,EAAO,SAC1B,OAAOE,IAAexf,EAAe8D,mBACjC0b,IAAexf,EAAe+D,qBAC9Byb,IAAexf,EAAegE,uBAC9Bwb,IAAexf,EAAesD,cAK1CnI,KAAKijB,cAAclC,6BAA6B3B,EAAS,QAAUpf,KAAKyjB,yCAAyCQ,GAGjHjkB,KAAKskB,wCAAwCL,EAAWG,IAUpDxB,EAAA1iB,UAAAqkB,gCAAR,SAAwCC,WAE9BtD,EAA6B,IAAIL,GAGnC4D,EAAuB,OAE3B,IAA0B,IAAAC,EAAAxK,EAAAsK,GAAYG,EAAAD,EAAA3iB,QAAA4iB,EAAA1iB,KAAA0iB,EAAAD,EAAA3iB,OAAE,CAAnC,IAAMyS,EAAWmQ,EAAA3iB,MAElB,GAAIhC,KAAKijB,cAAclC,6BAA6BvM,KAAiBnR,UACjE,MAAM,IAAIuc,GAAmB,0EAA0EpL,GAI3G0M,EAA2B1M,GAAexU,KAAKijB,cAAclC,6BAA6BvM,GAG1FiQ,EAAuBA,EAAqBG,OAAO5kB,KAAKijB,cAAclC,6BAA6BvM,yGAIvG,OAAOxU,KAAK6kB,4BAA4BJ,GAAsB1I,KAC1DC,EAAAA,IACI,SAAA8I,GACI,OAAO,IAAI7D,GACPC,EAA4B4D,EAAatG,qBAAsBsG,EAAa/F,qBAexF6D,EAAA1iB,UAAAokB,wCAAR,SAAgDS,EAAyCC,mBAGrF,IAAuB,IAAAC,EAAA/K,EAAA6K,GAAwBG,EAAAD,EAAAljB,QAAAmjB,EAAAjjB,KAAAijB,EAAAD,EAAAljB,OAAE,CAA5C,IAAMogB,EAAQ+C,EAAAljB,MAET8c,EAAcqD,EAAS,OAGvB7B,EAA+B,GAC/BC,EAAuB,GAE7B,GAAI4B,EAAStd,EAAe0D,kBAAoBlF,UAAW,CAEvD,IAAI8hB,OAAoB,EAMpBA,EAHCxlB,MAAMylB,QAAQjD,EAAStd,EAAe0D,iBAGhB4Z,EAAStd,EAAe0D,gBAFxB,CAAC4Z,EAAStd,EAAe0D,qBAQpD,IAAsB,IAAA8c,EAAAnL,EAAAiL,GAAoBG,EAAAD,EAAAtjB,QAAAujB,EAAArjB,KAAAqjB,EAAAD,EAAAtjB,OAAE,CAAvC,IAAMwjB,EAAOD,EAAAtjB,MAKd,GAAIujB,aAAmB/lB,QAAU+lB,EAAQ,WAAaliB,WAAakiB,EAAQ,WAAa1gB,EAAeqE,eAAgB,CAEnH,IAAIsc,OAAO,EAGX,GAAID,EAAQ1gB,EAAemE,qBAAuB3F,UAC9CmiB,EAAU,IAAIzF,GAAYpP,EAAAA,sBAAsB8U,QAASF,EAAQ1gB,EAAemE,mBAAoBuc,EAAQ1gB,EAAeiE,eAAe,aACvI,GAAIyc,EAAQ1gB,EAAeoE,kBAAoB5F,UAClDmiB,EAAU,IAAIzF,GAAYpP,EAAAA,sBAAsB+U,KAAMH,EAAQ1gB,EAAeoE,gBAAiBsc,EAAQ1gB,EAAeiE,eAAe,YACjI,CAAA,GAAIyc,EAAQ1gB,EAAekE,qBAAuB1F,UAIrD,MAAM,IAAIsiB,UAAU,gCAAgCxD,EAAS,OAAM,IAAIoD,EAAQ1gB,EAAeiE,gBAH9F0c,EAAU,IAAIzF,GAAYpP,EAAAA,sBAAsBiV,QAASL,EAAQ1gB,EAAekE,mBAAoBwc,EAAQ1gB,EAAeiE,eAAe,QAO9IwX,EAAcjG,KAAKmL,GAGnB,IAAIK,OAAW,EACXN,EAAQ1gB,EAAee,kBAAoBvC,YAC3CwiB,EAAc,IAAI3F,GAASqF,EAAQ1gB,EAAee,gBAAiB2f,EAAQ1gB,EAAeiE,eAAe,QAEzGyX,EAASlG,KAAKwL,2GAU9B,IAAMC,EAAc,IAAI3F,GACpBrB,EACAqD,EAAStd,EAAe8C,cACxBwa,EAAStd,EAAeyD,aACxB6Z,EAAStd,EAAewD,WACxBiY,EACAC,GAIJvgB,KAAKijB,cAAcjC,gBAAgBlC,GAAegH,uGAItD9lB,KAAK+lB,uDAAuDf,IAUxDpC,EAAA1iB,UAAA8lB,qCAAR,SAA6CC,GAA7C,IAAA5P,EAAArW,KAGU8kB,EAAe,IAAItE,GAGnBxB,EAAe,GAcrB,OAZAiH,EAAapH,QACT,SAAAC,GACIgG,EAAahG,GAAezI,EAAK4M,cAAcjC,gBAAgBlC,GAE/DzI,EAAK4M,cAAcjC,gBAAgBlC,GAAawB,cAAczB,QAC1D,SAAA6G,GAEI1G,EAAa3E,KAAKqL,EAAKzF,cAKhCjgB,KAAKkmB,uBAAuBlH,GAAcjD,KAC7CC,EAAAA,IACI,SAAAmK,GACI,OAAO,IAAIlF,GAAoB,IAAIJ,GAAgCiE,EAAcqB,EAASpH,qBAclG6D,EAAA1iB,UAAA6lB,uDAAR,SAA+DK,mBAG3D,IAAsB,IAAAC,EAAAnM,EAAAkM,GAA4BE,EAAAD,EAAAtkB,QAAAukB,EAAArkB,KAAAqkB,EAAAD,EAAAtkB,OAAE,CAA/C,IAAM4gB,EAAO2D,EAAAtkB,MAERmU,EAAUwM,EAAQ,OAEpB/a,GAAa,EACb+a,EAAQ9d,EAAe+C,cAAgBvE,YAAoD,IAAvCsf,EAAQ9d,EAAe+C,cAC3EA,GAAa,GAGjB,IAAIC,GAAiB,EACjB8a,EAAQ9d,EAAegD,kBAAoBxE,YAAwD,IAA3Csf,EAAQ9d,EAAegD,kBAC/EA,GAAiB,GAGrB,IAAIC,GAAsB,EACtB6a,EAAQ9d,EAAeiD,uBAAyBzE,YAA6D,IAAhDsf,EAAQ9d,EAAeiD,uBACpFA,GAAsB,GAG1B,IAAIU,EAAgB,GAChBma,EAAQ9d,EAAe2D,iBAAmBnF,WAAa1D,MAAMylB,QAAQzC,EAAQ9d,EAAe2D,gBAC5FA,EAAgBma,EAAQ9d,EAAe2D,eAAewT,IAAI,SAACuK,GAAsB,OAAAA,EAAU,SACpF5D,EAAQ9d,EAAe2D,iBAAmBnF,WACjDmF,EAAc6R,KAAKsI,EAAQ9d,EAAe2D,eAAe,QAG7D,IAAIkY,OAAU,EACViC,EAAQ9d,EAAe6C,cAAgBrE,YACvCqd,EAAaiC,EAAQ9d,EAAe6C,YAAY,QAGpD,IAAMiZ,EAAe,GACrB,GAAIgC,EAAQ9d,EAAegB,sBAAwBxC,UAC/C,GAAI1D,MAAMylB,QAAQzC,EAAQ9d,EAAegB,yBACrC,IAAmB,IAAAsU,EAAAD,EAAAyI,EAAQ9d,EAAegB,qBAAmB2gB,EAAArM,EAAApY,QAAAykB,EAAAvkB,KAAAukB,EAAArM,EAAApY,OAAE,CAA1D,IAAM0kB,EAAID,EAAAxkB,MACX2e,EAAatG,KAAKoM,6GAGtB9F,EAAatG,KAAKsI,EAAQ9d,EAAegB,qBAKjD7F,KAAKijB,cAAchI,WAAW9E,GAAW,IAAIsK,GACzCtK,EACAuK,EACAiC,EAAQ9d,EAAeyD,aACvBqa,EAAQ9d,EAAewD,WACvBG,EACAZ,EACAC,EACAC,EACA6Y,0GAaJiC,EAAA1iB,UAAAwmB,gCAAR,SAAwC1H,GAAxC,IAAA3I,EAAArW,KAEUokB,EAAe,IAAIxD,GAiBzB,OAfA5B,EAAaH,QACT,SAAA1I,GAEI,KAAIE,EAAK0M,mBAAmBvS,QAAQ2F,IAAY,GAAhD,CAIA,GAAIE,EAAK4M,cAAchI,WAAW9E,KAAa9S,UAC3C,MAAM,IAAIuc,GAAmB,iEAAiEzJ,GAGlGiO,EAAajO,GAAWE,EAAK4M,cAAchI,WAAW9E,MAIvD,IAAI8K,GAAoB,IAAIJ,GAAgC,IAAIL,GAAmB4D,IASvFxB,EAAA1iB,UAAAie,sBAAP,WAAA,IAAA9H,EAAArW,KAEI,OAA6C,IAAzCA,KAAKijB,cAAcxQ,WAAW9R,OAEvBX,KAAKkjB,iCAAiCnH,KACzCC,EAAAA,IACI,SAAAxa,GAKI,OAJA6U,EAAKkN,yCAAyC/hB,EAAS,UAAU0iB,OAAO,SAACyC,GAErE,OAAyD,IAAlDtQ,EAAKyM,mBAAmBtS,QAAQmW,EAAK,WAEzCtQ,EAAKmN,uCAMjBoD,EAAAA,GAAG5mB,KAAKwjB,sCAYfZ,EAAA1iB,UAAA2mB,sBAAR,SAA8BrC,GAA9B,IAAAnO,EAAArW,KAGU8mB,EAAc,GAmBpB,OAhBAtC,EAAa3F,QAAQ,SAAArK,GAEjBsS,EAAYzM,KAAKhE,EAAKiN,4CAA4C9O,GAAauH,KAC3EC,EAAAA,IACI,SAACoD,GAEG/I,EAAK0N,sDAAsD3E,SAUpE2H,EAAAA,SAASD,IAUblE,EAAA1iB,UAAA8mB,kCAAP,SAAyCxC,GAAzC,IAAAnO,EAAArW,KAEUinB,EAAsBzC,EAAaN,OACrC,SAAA1P,GAEI,OAAO6B,EAAK4M,cAAclC,6BAA6BvM,KAAiBnR,YAIhF,OAAI4jB,EAAoBtmB,OAAS,EAEtBX,KAAK6mB,sBAAsBI,GAAqBlL,KACnDoH,EAAAA,SACI,WAEI,OAAO9M,EAAKkO,gCAAgCC,MAMjDxkB,KAAKukB,gCAAgCC,IAc7C5B,EAAA1iB,UAAA2kB,4BAAP,SAAmCpG,GAAnC,IAAApI,EAAArW,KAEUknB,EAAmCzI,EAAkByF,OACvD,SAAApF,GAGI,OAAOzI,EAAK4M,cAAcjC,gBAAgBlC,KAAiBzb,YAInE,GAAI6jB,EAAuBvmB,OAAS,EAAG,CAGnC,IAAM6jB,EAAyB0C,EAAuBlL,IAClD,SAAA8C,GACI,OAAOzP,EAAMC,4BAA4BwP,KAE/CoF,OAAO7U,EAAMe,qBAGf,OAAOpQ,KAAK6mB,sBAAsBrC,GAAczI,KAC5CoH,EAAAA,SACI,WAEI,OAAO9M,EAAK2P,qCAAqCvH,MAM7D,OAAOze,KAAKgmB,qCAAqCvH,IAYlDmE,EAAA1iB,UAAAgmB,uBAAP,SAA8BlH,GAA9B,IAAA3I,EAAArW,KAEUmnB,EAA8BnI,EAAakF,OAC7C,SAAA/N,GAGI,QAAIE,EAAK0M,mBAAmBvS,QAAQ2F,IAAY,IAKzCE,EAAK4M,cAAchI,WAAW9E,KAAa9S,YAI1D,GAAI8jB,EAAkBxmB,OAAS,EAAG,CAG9B,IAAM6jB,EAAyB2C,EAAkBnL,IAC7C,SAAA7F,GACI,OAAO9G,EAAMC,4BAA4B6G,KAE/C+N,OAAO7U,EAAMe,qBAGf,OAAOpQ,KAAK6mB,sBAAsBrC,GAAczI,KAC5CC,EAAAA,IACI,SAAAoL,GACI,GAAIA,EACA,OAAO/Q,EAAKqQ,gCAAgC1H,GAE5C,MAAM,IAAIa,MAAM,+EAMhC,OAAO+G,EAAAA,GAAG5mB,KAAK0mB,gCAAgC1H,0HAlmB9C4D,EAAoBxiB,EAAA,CAHhCyd,EAAAA,WAAW,CACRC,WAAY,gCAyB0BI,MAvB7B0E,GAAb,G0BhaAyE,GAAA,WAeA,OAHI,SAA6BC,EAAgDC,GAAhDvnB,KAAAsnB,UAAAA,EAAgDtnB,KAAAunB,kBAAAA,EAP7DvnB,KAAAwnB,oBAA2C,IAAIvG,GAAoB,GAAI,GAAI,KAL/F,GCHAwG,GAAA,WASA,OAHI,SAA4BC,GAAA1nB,KAAA0nB,gBAAAA,GANhC,GCIAC,GAAA,WAWA,OAJI,SAAqBC,EAAuDC,GAAvD7nB,KAAA4nB,oBAAAA,EAAuD5nB,KAAA6nB,QAAAA,GAPhF,GCCAC,GAAA,WAMI,SAAAA,EAAqBC,GAAA/nB,KAAA+nB,eAAAA,EAYzB,OAHID,EAAA5nB,UAAA8nB,cAAA,WACI,OAAOhoB,KAAK+nB,eAAe9M,WAAWpW,EAAekD,cAE7D+f,EAlBA,GCIAG,GAAA,SAAA/R,GAHA,SAAA+R,IAAA,IAAA5R,EAAA,OAAAH,GAAAA,EAAAgS,MAAAloB,KAAAU,YAAAV,YAKYqW,EAAAyC,KAAe,yBAFQxC,EAAAA,EAAAA,GAS/B2R,EAAA/nB,UAAAioB,aAAA,WACI,OAAOnoB,KAAK2b,QAAQ3b,KAAK8Y,MAAMiD,KAC3BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ+O,GAAgBC,SACjEsJ,EAAAA,WAAWvc,KAAKwd,mBAUxByK,EAAA/nB,UAAAkoB,cAAA,SAAcC,GAGV,OAFAroB,KAAK8Y,MAAQ,IAAMwF,mBAAmB+J,GAE/BroB,KAAK2b,QAAQ3b,KAAK8Y,MAAMiD,KAC3BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6O,GAAeC,QAChEwJ,EAAAA,WAAWvc,KAAKwd,gKA3BfyK,EAAa7nB,EAAA,CAHzByd,EAAAA,WAAW,CACRC,WAAY,UAEHmK,GAAb,CAAmCzM,ICcnC8M,GAAA,SAAApS,GAHA,SAAAoS,IAAA,IAAAjS,EAAA,OAAAH,GAAAA,EAAAgS,MAAAloB,KAAAU,YAAAV,YAKYqW,EAAAyC,KAAe,wBAFOxC,EAAAA,EAAAA,GAe9BgS,EAAApoB,UAAAqoB,SAAA,SAASpV,GAIL,OAHIA,IACAnT,KAAK8Y,MAAQ,eAAiBwF,mBAAmBnL,IAE9CnT,KAAK2b,QAAQ3b,KAAK8Y,MAAMiD,KAC3BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQoQ,GAAeC,QAChEiI,EAAAA,WAAWvc,KAAKwd,mBAUxB8K,EAAApoB,UAAAsoB,QAAA,SAAQC,GACJ,OAAOzoB,KAAK2b,QAAQ3b,KAAK8Y,KAAO,IAAMwF,mBAAmBmK,IAAU1M,KAC/DC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQkQ,GAAcC,OAC/DmI,EAAAA,WAAWvc,KAAKwd,mBAUxB8K,EAAApoB,UAAAwoB,YAAA,SAAYD,GAER,OADAzoB,KAAK8Y,MAAQ,UAAYwF,mBAAmBmK,GACrCzoB,KAAK2b,QAAQ3b,KAAK8Y,MAAMiD,KAC3BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6P,GAAkBD,WACnE0I,EAAAA,WAAWvc,KAAKwd,mBAUxB8K,EAAApoB,UAAAyoB,gBAAA,SAAgBC,GAEZ,OADA5oB,KAAK8Y,MAAQ,UAAYwF,mBAAmBsK,GACrC5oB,KAAK2b,QAAQ3b,KAAK8Y,MAAMiD,KAC3BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQgQ,GAAsBC,WACvEqI,EAAAA,WAAWvc,KAAKwd,mBAexB8K,EAAApoB,UAAA2oB,WAAA,SAAWC,GACP,OAAO9oB,KAAK+c,SAAS/c,KAAK8Y,KAAMgQ,GAAS/M,KACrCC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQkQ,GAAcC,OAC/DmI,EAAAA,WAAWvc,KAAKwd,mBAexB8K,EAAApoB,UAAA6oB,eAAA,SAAeD,GAEX,OADA9oB,KAAK8Y,MAAQ,UAAYwF,mBAAmBwK,EAAQL,SAC7CzoB,KAAKid,QAAQjd,KAAK8Y,KAAMgQ,GAAS/M,KACpCC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6P,GAAkBD,WACnE0I,EAAAA,WAAWvc,KAAKwd,gKAnGf8K,EAAYloB,EAAA,CAHxByd,EAAAA,WAAW,CACRC,WAAY,UAEHwK,GAAb,CAAkC9M,ICZlCwN,GAAA,SAAA9S,GAAA,SAAA8S,0DAAqC1S,EAAAA,EAAAA,GAWjC0S,EAAA9oB,UAAA+oB,eAAA,WACI,OAAOjpB,KAAK2b,QAAQ,mBAAmBI,KACnCC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ0R,GAAkBP,WACnEmH,EAAAA,WAAWvc,KAAKwd,mBAUxBwL,EAAA9oB,UAAAgpB,gBAAA,SAAgBb,GACZ,IAAMrkB,EAAc,uBAAyBsa,mBAAmB+J,GAChE,OAAOroB,KAAKmpB,WAAWnlB,IAS3BglB,EAAA9oB,UAAAkpB,sBAAA,SAAsBlX,GAClB,IAAMlO,EAAM,6BAA+BkO,EAC3C,OAAOlS,KAAKmpB,WAAWnlB,IAS3BglB,EAAA9oB,UAAAmpB,sBAAA,SAAsBlX,GAClB,IAAMnO,EAAM,6BAA+BmO,EAC3C,OAAOnS,KAAKmpB,WAAWnlB,IAUjBglB,EAAA9oB,UAAAipB,WAAV,SAAqBnlB,GACjB,OAAOhE,KAAK2b,QAAQ3X,GAAK+X,KACrBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQyR,GAAiB7C,UAClE0J,EAAAA,WAAWvc,KAAKwd,mBAWxBwL,EAAA9oB,UAAAopB,uBAAA,SAAuBjB,GACnB,IAAMrkB,EAAM,uBAAyBsa,mBAAmB+J,GAAO,WAC/D,OAAOroB,KAAKupB,kBAAkBvlB,IAUlCglB,EAAA9oB,UAAAspB,6BAAA,SAA6BtX,GACzB,IAAMlO,EAAM,6BAA+BkO,EAAY,WACvD,OAAOlS,KAAKupB,kBAAkBvlB,IAUlCglB,EAAA9oB,UAAAupB,6BAAA,SAA6BtX,GACzB,IAAMnO,EAAM,6BAA+BmO,EAAY,WACvD,OAAOnS,KAAKupB,kBAAkBvlB,IAUzBglB,EAAA9oB,UAAAqpB,kBAAR,SAA0BvlB,GACvB,OAAOhE,KAAK2b,QAAQ3X,GAAK+X,KACrBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQuR,GAAwBC,UACzE8G,EAAAA,WAAWvc,KAAKwd,mBAexBwL,EAAA9oB,UAAAwpB,cAAA,SAAcvK,GAEV,OAAOnf,KAAK+c,SADQ,kBACMoC,GAAMpD,KAC5BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQyR,GAAiB7C,UAClE0J,EAAAA,WAAWvc,KAAKwd,mBAexBwL,EAAA9oB,UAAAypB,cAAA,SAActB,EAAalJ,GACvB,IAAMnb,EAAc,uBAAyBsa,mBAAmB+J,GAEhE,OAAOroB,KAAKid,QAAQjZ,EAAKmb,GAAMpD,KAC3BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQyR,GAAiB7C,UAClE0J,EAAAA,WAAWvc,KAAKwd,mBAWxBwL,EAAA9oB,UAAA0pB,gBAAA,SAAgBvB,GACZ,IAIMrkB,EAAc,uBAAyBsa,mBAAmB+J,GAEhE,OAAOroB,KAAKid,QAAQjZ,EANF,CACdF,QAAQ,IAKmBiY,KAC3BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQyR,GAAiB7C,UAClE0J,EAAAA,WAAWvc,KAAKwd,mBAexBwL,EAAA9oB,UAAA2pB,cAAA,SAAcxB,GACV,IAAMrkB,EAAc,uBAAyBsa,mBAAmB+J,GAEhE,OAAOroB,KAAKmd,WAAWnZ,GAAK+X,KACxBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQyR,GAAiB7C,UAClE0J,EAAAA,WAAWvc,KAAKwd,gKA9LfwL,EAAe5oB,EAAA,CAH3Byd,EAAAA,WAAW,CACRC,WAAY,UAEHkL,GAAb,CAAqCxN,ICKrCsO,GAAA,SAAA5T,GAAA,SAAA4T,0DAAkCxT,EAAAA,EAAAA,GAU9BwT,EAAA5pB,UAAA6pB,YAAA,WACI,OAAO/pB,KAAK2b,QAAQ,gBAAgBI,KAChCC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ2R,GAAeC,QAChE0G,EAAAA,WAAWvc,KAAKwd,mBAYhBsM,EAAA5pB,UAAA8pB,QAAR,SAAgBC,EAAoBC,GAChC,IAAMpR,EAAO,gBAAkBoR,EAAiB,IAAM5L,mBAAmB2L,GACzE,OAAOjqB,KAAK2b,QAAQ7C,GAAMiD,KACtBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAUxBsM,EAAA5pB,UAAAiqB,aAAA,SAAa9B,GACT,OAAOroB,KAAKgqB,QAAQ3B,EAAK,QAS7ByB,EAAA5pB,UAAAkqB,eAAA,SAAetV,GACX,OAAO9U,KAAKgqB,QAAQlV,EAAO,UAS/BgV,EAAA5pB,UAAAmqB,kBAAA,SAAkBtV,GACd,OAAO/U,KAAKgqB,QAAQjV,EAAU,aASlC+U,EAAA5pB,UAAAoqB,yBAAA,SAAyBC,GACrB,IAAMzR,EAAO,oBAAsBwF,mBAAmBiM,GAAW,qBACjE,OAAOvqB,KAAK2b,QAAQ7C,GAAMiD,KACtBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ+O,GAAgBC,SACjEsJ,EAAAA,WAAWvc,KAAKwd,mBAexBsM,EAAA5pB,UAAAsqB,WAAA,SAAWrL,GAEP,OAAOnf,KAAK+c,SADC,eACcoC,GAAMpD,KAC7BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAWxBsM,EAAA5pB,UAAAuqB,iBAAA,SAAiBF,EAAiBpX,GAC9B,IAAM2F,EAAO,oBAAsBwF,mBAAmBiM,GAAW,wBAA0BjM,mBAAmBnL,GAC9G,OAAOnT,KAAK+c,SAASjE,GAAMiD,KACvBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAWxBsM,EAAA5pB,UAAAwqB,sBAAA,SAAsBH,EAAiBpX,GACnC,IAAM2F,EAAO,oBAAsBwF,mBAAmBiM,GAAW,wBAA0BjM,mBAAmBnL,GAC9G,OAAOnT,KAAKmd,WAAWrE,GAAMiD,KACzBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAWxBsM,EAAA5pB,UAAAyqB,sBAAA,SAAsBJ,EAAiBpX,GACnC,IAAM2F,EAAO,oBAAsBwF,mBAAmBiM,GAAW,8BAAgCjM,mBAAmBnL,GACpH,OAAOnT,KAAK+c,SAASjE,GAAMiD,KACvBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAWxBsM,EAAA5pB,UAAA0qB,2BAAA,SAA2BL,EAAiBpX,GACxC,IAAM2F,EAAO,oBAAsBwF,mBAAmBiM,GAAW,8BAAgCjM,mBAAmBnL,GACpH,OAAOnT,KAAKmd,WAAWrE,GAAMiD,KACzBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAWxBsM,EAAA5pB,UAAA2qB,eAAA,SAAeN,EAAiBO,GAC5B,IAAMhS,EAAO,oBAAsBwF,mBAAmBiM,GAAW,sBAAwBjM,mBAAmBwM,GAC5G,OAAO9qB,KAAK+c,SAASjE,GAAMiD,KACvBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAYxBsM,EAAA5pB,UAAA6qB,oBAAA,SAAoBR,EAAiBO,GACjC,IAAMhS,EAAO,oBAAsBwF,mBAAmBiM,GAAW,sBAAwBjM,mBAAmBwM,GAC5G,OAAO9qB,KAAKmd,WAAWrE,GAAMiD,KACzBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAiBxBsM,EAAA5pB,UAAA8qB,qBAAA,SAAqBT,GAKjB,OAAOvqB,KAAKirB,sBAAsBV,EAJrB,CACThV,aAAe,KAYvBuU,EAAA5pB,UAAAgrB,0BAAA,SAA0BX,GAKtB,OAAOvqB,KAAKirB,sBAAsBV,EAJrB,CACThV,aAAe,KAefuU,EAAA5pB,UAAA+qB,sBAAR,SAA8BV,EAAiBpL,GAC3C,IAAMrG,EAAO,oBAAsBwF,mBAAmBiM,GAAW,eACjE,OAAOvqB,KAAKid,QAAQnE,EAAMqG,GAAMpD,KAC5BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAWxBsM,EAAA5pB,UAAAirB,aAAA,SAAaZ,GACT,IAAMzR,EAAO,oBAAsBwF,mBAAmBiM,GAAW,UAMjE,OAAOvqB,KAAKid,QAAQnE,EAJF,CACdhV,QAAQ,IAGoBiY,KAC5BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAaxBsM,EAAA5pB,UAAAkrB,kBAAA,SAAkBb,EAAiBc,EAAqBC,GACpD,IAAMxS,EAAO,oBAAsBwF,mBAAmBiM,GAAW,YAE3DpL,EAAO,CACTmM,YAAaA,EACbC,kBAAmBF,GAGvB,OAAOrrB,KAAKid,QAAQnE,EAAMqG,GAAMpD,KAC5BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAYxBsM,EAAA5pB,UAAAsrB,oBAAA,SAAoBjB,EAAiBgB,EAA2BD,GAC5D,IAAMxS,EAAO,oBAAsBwF,mBAAmBiM,GAAW,YAE3DpL,EAAO,CACTmM,YAAaA,EACbC,kBAAmBA,GAGvB,OAAOvrB,KAAKid,QAAQnE,EAAMqG,GAAMpD,KAC5BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAUxBsM,EAAA5pB,UAAAurB,2BAAA,SAA2BlB,EAAiBpL,GACxC,IAAMrG,EAAO,oBAAsBwF,mBAAmBiM,GAAW,wBAEjE,OAAOvqB,KAAKid,QAAQnE,EAAMqG,GAAMpD,KAC5BC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,mBAexBsM,EAAA5pB,UAAAwrB,WAAA,SAAWnB,GACP,IAAMzR,EAAO,oBAAsBwF,mBAAmBiM,GACtD,OAAOvqB,KAAKmd,WAAWrE,GAAMiD,KACzBC,EAAAA,IAAI,SAACE,GAA6B,OAAAA,EAAOjY,QAAQ6R,GAAcC,OAC/DwG,EAAAA,WAAWvc,KAAKwd,gKA9UfsM,EAAY1pB,EAAA,CAHxByd,EAAAA,WAAW,CACRC,WAAY,UAEHgM,GAAb,CAAkCtO,kBChBlC,SAAAmQ,IAKU3rB,KAAA4rB,QAAU,IAAIC,EAAAA,eAEtBF,EAAAzrB,UAAA4rB,YAAA,SAAY3W,GACVnV,KAAK4rB,QAAQ7pB,KAAK,CAAEgqB,MAAK5W,KAE3BwW,EAAAzrB,UAAA8rB,YAAA,WACE,OAAOhsB,KAAK4rB,QAAQK,qHARXN,EAAevrB,EAAA,CAH3Byd,EAAAA,WAAW,CACVC,WAAY,UAED6N,oBCOX,SAAAO,EAAoBC,EACiB5pB,GADjBvC,KAAAmsB,MAAAA,EACiBnsB,KAAAuC,OAAAA,SASrC2pB,EAAAhsB,UAAAksB,aAAA,WAEE,OAAOpsB,KAAKmsB,MAAMtQ,IAAI7b,KAAKuC,OAAOe,IAAM,+BACrCyY,KAAKC,EAAAA,IACJ,SAACqQ,GACC,OAAOA,GAET,SAAAC,GACE5c,QAAQC,MAAM2c,oJApBXJ,EAAgB9rB,EAAA,CAH5Byd,EAAAA,WAAW,CACVC,WAAY,SAKTC,EAAAA,EAAAC,EAAAA,OAAO7b,2BADiB8b,EAAAA,WAAUze,UAF1B0sB,OCmBb,SAAcK,GAWV,IAAMC,EAAmB,SAACC,GACtB,MAAoB,QAAbA,GACa,UAAbA,GACAA,IAAa5nB,EAAewD,WAC5BokB,IAAa5nB,EAAe0E,mBAC5BkjB,IAAa5nB,EAAe2E,gBAC5BijB,IAAa5nB,EAAesE,cAC5BsjB,IAAa5nB,EAAeuE,sBAC5BqjB,IAAa5nB,EAAewE,gBAC5BojB,IAAa5nB,EAAeyE,mBAC5BmjB,IAAa5nB,EAAe2C,QAC5BilB,IAAa5nB,EAAe4C,eAWvC,SAASilB,EAAsBC,GAE3B,IAAM1R,EAmQV,SAAiC0R,mBAIvBC,EAAmCD,EAAe9nB,EAAekG,wBAGjE8hB,EAAsC,GAI5C,GAAID,IAA6BvpB,WAAa1D,MAAMylB,QAAQwH,OACxD,IAAiC,IAAAE,EAAA5S,EAAA0S,GAAwBG,EAAAD,EAAA/qB,QAAAgrB,EAAA9qB,KAAA8qB,EAAAD,EAAA/qB,OAAE,CAAtD,IAAMirB,EAAkBD,EAAA/qB,MACnBirB,EAA6BC,EAC/BF,EAAoBnoB,EAAekG,uBAAwB,IAG/D8hB,EAAmBxS,KAAK4S,6GAEzB,GAAIL,IAA6BvpB,UAAW,CAC/C,IAAM4pB,EAAcC,EAChBN,EAA0B/nB,EAAekG,uBAAwB,IAGrE8hB,EAAmBxS,KAAK4S,GAG5B,IAAIE,EAAY3tB,OAAO4tB,KAAKT,GAG5BQ,EAAYA,EAAUjJ,OAAOsI,GAE7B,IAAMvR,EAA6B,OAGnC,IAAuB,IAAAoS,EAAAnT,EAAAiT,GAASG,EAAAD,EAAAtrB,QAAAurB,EAAArrB,KAAAqrB,EAAAD,EAAAtrB,OAAE,CAA7B,IAAM0qB,EAAQa,EAAAtrB,MAETurB,EAAsC,GAG5C,GAAI5tB,MAAMylB,QAAQuH,EAAeF,QAI7B,IAAwB,IAAAjG,EAAAtM,EAAAyS,EAAeF,IAASe,EAAAhH,EAAAzkB,QAAAyrB,EAAAvrB,KAAAurB,EAAAhH,EAAAzkB,OAAE,CAA7C,IAAM0rB,EAASD,EAAAxrB,MAGV0rB,EAAsCR,EAAwBO,EAAWhB,EAAUI,GAIrFa,IAAsBrqB,WAAWkqB,EAAWlT,KAAKqT,4GAGtD,CAGH,IAAMA,EAAsCR,EAAwBP,EAAeF,GAAWA,EAAUI,GAIpGa,IAAsBrqB,WAAWkqB,EAAWlT,KAAKqT,GAIzDzS,EAAWwR,GAAYc,uGAI3B,OAAOtS,EAxU4B0S,CAAwBhB,GAE3D,OAAO,IAAI/R,GACP+R,EAAe,OACfA,EAAe,SACfA,EAAe9nB,EAAewD,WAC9B,GACA,GACA,GACA,GACA4S,GAcR,SAASiS,EACLO,EAAmBtX,EAAiB0W,WAIhCa,EAGJ,OAAQD,EAAU,UACd,KAAK5oB,EAAemB,UAEhB,IAAI4nB,OAAS,EAEb,GAAIH,EAAU5oB,EAAe8F,iBAAmBtH,UAC5CuqB,EAAY,IAAIjkB,EAAsB8jB,EAAU,OAAQtX,EAASsX,EAAU5oB,EAAe8F,qBACvF,GAAI8iB,EAAU5oB,EAAe+F,mBAAqBvH,UAAW,CAEhE,IAAMsT,EAAqD,OAI3D,IAA2B,IAAAkX,EAAA3T,EAAA2S,GAAkBiB,EAAAD,EAAA9rB,QAAA+rB,EAAA7rB,KAAA6rB,EAAAD,EAAA9rB,OAAE,CAA1C,IACKgsB,EADaD,EAAA9rB,MAC4B6V,iBAC/ClB,EAAkBoX,EAAY9b,IAAM8b,uGAGxCH,EAAY,IAAIlkB,EACZ+jB,EAAU,OAAQtX,EAASsX,EAAU5oB,EAAe+F,iBAAkB+L,QAG1E8W,EAAU5oB,EAAegG,kBAAoBxH,WAAaoqB,EAAU5oB,EAAeiG,qBAAqB,SAAWzH,UACnHuqB,EAAY,IAAIhkB,EACZ6jB,EAAU,OAAQtX,EAASsX,EAAU5oB,EAAegG,gBAAiB4iB,EAAU5oB,EAAeiG,qBAAqB,QAIvH4E,QAAQC,MAAM,8BAAgCoK,KAAKiU,UAAUP,IAGjEC,EAAoBE,EACpB,MAEJ,KAAK/oB,EAAewB,UAahBqnB,EAZkB,IAAI7jB,EAAc4jB,EAAU,OAC1CtX,EACAsX,EAAU5oB,EAAe2G,sBACzBiiB,EAAU5oB,EAAemG,uBACzByiB,EAAU5oB,EAAeoG,qBACzBwiB,EAAU5oB,EAAeqG,sBACzBuiB,EAAU5oB,EAAesG,oBACzBsiB,EAAU5oB,EAAeuG,wBACzBqiB,EAAU5oB,EAAewG,sBACzBoiB,EAAU5oB,EAAeyG,sBACzBmiB,EAAU5oB,EAAe0G,qBAG7B,MAEJ,KAAK1G,EAAe6B,UAEhB,IAAIunB,OAAS,EAGb,GAAIR,EAAU5oB,EAAe4G,sBAAwBpI,UAAW,CAG5D,IAAMwU,EAAiC6U,EAAsBe,EAAU5oB,EAAe4G,qBAEtFwiB,EAAY,IAAInkB,GAAc2jB,EAAU,OAAQtX,EAAS0B,EAAiB5F,GAAI4F,QAC3E,GAAI4V,EAAU5oB,EAAe+G,yBAA2BvI,UAAW,CAGtE,IAAMuU,EAAsB6V,EAAU5oB,EAAe+G,uBAAuB,OAE5EqiB,EAAY,IAAInkB,GAAc2jB,EAAU,OAAQtX,EAASyB,QACtD,GAAI6V,EAAU5oB,EAAe6G,sBAAwBrI,UAAW,CAGnE,IAAM6qB,EAAiCxB,EAAsBe,EAAU5oB,EAAe6G,qBAEtFuiB,EAAY,IAAInkB,GAAc2jB,EAAU,OAAQtX,EAAS+X,EAAiBjc,GAAIic,QAC3E,GAAIT,EAAU5oB,EAAe8G,yBAA2BtI,UAAW,CAGtE,IAAM8qB,EAAsBV,EAAU5oB,EAAe8G,uBAAuB,OAE5EsiB,EAAY,IAAInkB,GAAc2jB,EAAU,OAAQtX,EAASgY,GAG7DT,EAAoBO,EACpB,MAEJ,KAAKppB,EAAeoB,SAGhBynB,EADiB,IAAI3jB,GAAiB0jB,EAAU,OAAQtX,EAASsX,EAAU5oB,EAAegH,wBAG1F,MAEJ,KAAKhH,EAAeuB,aAGhB,IAAMgoB,EAAiBC,WAAWZ,EAAU5oB,EAAeiH,uBAAuB,WAGlF4hB,EADqB,IAAI1jB,GAAiByjB,EAAU,OAAQtX,EAASiY,GAGrE,MAGJ,KAAKvpB,EAAemC,oBAYhB0mB,EAVqD,IAAIzjB,GACrDwjB,EAAU,OACVtX,EACAsX,EAAU5oB,EAAeoH,sBACzBwhB,EAAU5oB,EAAewH,mCAAmC,UAC5DohB,EAAU5oB,EAAekH,gBAAgB,UACzC0hB,EAAU5oB,EAAesH,4BACzBshB,EAAU5oB,EAAeuH,6BAK7B,MAEJ,KAAKvH,EAAeqC,cAShBwmB,EAPsB,IAAItjB,GACtBqjB,EAAU,OACVtX,EACAsX,EAAU5oB,EAAeoH,sBACzBwhB,EAAU5oB,EAAekH,gBAAgB,WAK7C,MAEJ,KAAKlH,EAAeyB,WAQhBonB,EANuC,IAAIpjB,GACvCmjB,EAAU,OACVtX,EACAsX,EAAU5oB,EAAeyH,oBAK7B,MAEJ,KAAKzH,EAAe0B,UAQhBmnB,EANqC,IAAIrjB,GACrCojB,EAAU,OACVtX,EACAsX,EAAU5oB,EAAe0H,0BAK7B,MAEJ,KAAK1H,EAAesB,SAQhBunB,EAN+B,IAAInjB,GAC/BkjB,EAAU,OACVtX,EACAsX,EAAU5oB,EAAe2H,eAAe,WAK5C,MAEJ,KAAK3H,EAAeqB,aAQhBwnB,EANoC,IAAIljB,GACpCijB,EAAU,OACVtX,EACAsX,EAAU5oB,EAAe4H,wBAK7B,MAGJ,KAAK5H,EAAe4B,cAGhB,IAAM6nB,EAAWD,WAAWZ,EAAU5oB,EAAe6H,uBAAuB,WACtE6hB,EAASF,WAAWZ,EAAU5oB,EAAe8H,qBAAqB,WASxE+gB,EAPyC,IAAIjjB,GACzCgjB,EAAU,OACVtX,EACAmY,EACAC,GAKJ,MAEJ,KAAK1pB,EAAe2B,UAQhBknB,EANiC,IAAIhjB,GACjC+iB,EAAU,OACVtX,EACAsX,EAAU5oB,EAAe+H,qBAAqB,QAKlD,MAEJ,QAEI8C,QAAQC,MAAM,0CAA4C8d,EAAU,SAAW,IAAMA,EAAU,OAAS,KAIhH,OAAOC,EAwIX,SAASc,EAA2B7B,eAE5BQ,EAAY3tB,OAAO4tB,KAAKT,GAE5BQ,EAAYA,EAAUjJ,OAAOsI,GAE7B,IAAMiC,EAA0B,OAEhC,IAAmB,IAAAC,EAAAxU,EAAAiT,GAASwB,EAAAD,EAAA3sB,QAAA4sB,EAAA1sB,KAAA0sB,EAAAD,EAAA3sB,OAAE,CAAzB,IAAM0gB,EAAIkM,EAAA3sB,MAGX,GAAIrC,MAAMylB,QAAQuH,EAAelK,QAE7B,IAA0B,IAAAtI,EAAAD,EAAAyS,EAAelK,IAAK+D,EAAArM,EAAApY,QAAAykB,EAAAvkB,KAAAukB,EAAArM,EAAApY,OAAE,CAA3C,IAAMgsB,EAAWvH,EAAAxkB,MAGd+rB,EAAY,WAAalpB,EAAe6B,WAAaqnB,EAAYlpB,EAAe4G,sBAAwBpI,UAGxGorB,EAAwBpU,KAAK0T,EAAYlpB,EAAe4G,oBAAoB,UAE5EsiB,EAAY,WAAalpB,EAAe6B,WAAaqnB,EAAYlpB,EAAe6G,sBAAwBrI,WAExGorB,EAAwBpU,KAAK0T,EAAYlpB,EAAe6G,oBAAoB,oHAShFihB,EAAelK,GAAM,WACjB5d,EAAe6B,WAAaimB,EAAelK,GAAM5d,EAAe4G,sBAChEpI,UAGJorB,EAAwBpU,KAAKsS,EAAelK,GAAM5d,EAAe4G,oBAAoB,UAErFkhB,EAAelK,GAAM,WACjB5d,EAAe6B,WAAaimB,EAAelK,GAAM5d,EAAe6G,sBAChErI,WAEJorB,EAAwBpU,KAAKsS,EAAelK,GAAM5d,EAAe6G,oBAAoB,+GAMjG,OAAO+iB,EA9FKlC,EAAAqC,sCAAhB,SAAsDC,WAG9CtH,EADED,EAAiC,GAEjCwH,EAAiBD,EAAwB,UAG/C,GAAIC,IAAmBzrB,UAAW,CAE9BkkB,EAAoBuH,EAAenuB,WAEnC,IAA6B,IAAAouB,EAAA7U,EAAA4U,GAAcE,EAAAD,EAAAhtB,QAAAitB,EAAA/sB,KAAA+sB,EAAAD,EAAAhtB,OAAE,CAAxC,IAEKktB,EAAyBvC,EAFVsC,EAAAhtB,OAKrBslB,EAAUjN,KAAK4U,8GAGiC,IAAhDzvB,OAAO4tB,KAAKyB,GAAyBluB,OAErC4mB,EAAoB,GAIpBA,EAAoB,EAEd0H,EAAyBvC,EAAsBmC,GAGrDvH,EAAUjN,KAAK4U,IAIvB,OAAO,IAAI5H,GAAsBC,EAAWC,IAuEhCgF,EAAA2C,6BAAhB,SAA6CL,WAEnCC,EAAiBD,EAAwB,UAC3C7N,EAAiC,GAGrC,GAAI8N,IAAmBzrB,cAGnB,IAA6B,IAAA8rB,EAAAjV,EAAA4U,GAAcM,EAAAD,EAAAptB,QAAAqtB,EAAAntB,KAAAmtB,EAAAD,EAAAptB,OAAE,CAAxC,IAAM4qB,EAAcyC,EAAAptB,MAErBgf,EAAgB3G,KAAKsS,EAAe,UAGpC,IAAM8B,EAA0BD,EAA2B7B,GAE3D3L,EAAkBA,EAAgB4D,OAAO6J,4GAI1C,CAGH,GAAoD,IAAhDjvB,OAAO4tB,KAAKyB,GAAyBluB,OACrC,MAAO,GAEPqgB,EAAgB3G,KAAKwU,EAAwB,UAGvCJ,EAA0BD,EAA2BK,GAE3D7N,EAAkBA,EAAgB4D,OAAO6J,GAKjD,OAAOzN,EAAgBkD,OAAO7U,EAAMe,sBAWxBmc,EAAA8C,uBAAhB,SAAuCC,GACnC,OAAO,IAAI7H,GAAiB6H,EAAiBzqB,EAAeoD,uBA9gBpE,CAAcskB,EAAAA,gBAAAA,EAAAA,cAAa,KCd3B,IAAAgD,GAAA,SAAArZ,GAEI,SAAAqZ,EAAoB9T,EACmBlZ,EAC3BitB,GAFZ,IAAAnZ,EAGIH,EAAApU,KAAA9B,KAAMyb,EAAMlZ,IAAOvC,YAHHqW,EAAAoF,KAAAA,EACmBpF,EAAA9T,OAAAA,EAC3B8T,EAAAmZ,sBAAAA,WAJqBlZ,EAAAA,EAAAA,GAcjCiZ,EAAArvB,UAAAuvB,YAAA,SAAYpH,GACR,OAAOroB,KAAK2b,QAAQ,iBAAmB2C,mBAAmB+J,KAS9DkH,EAAArvB,UAAAwvB,gBAAA,SAAgBrH,GAAhB,IAAAhS,EAAArW,KAKI,OAJ4DA,KAAK2b,QAAQ,iBAAmB2C,mBAAmB+J,IAIpGtM,KACPoH,EAAAA,SAEInjB,KAAKyc,eAET0G,EAAAA,SAEI,SAACzG,GAEG,IAAMiT,EAAgCpD,EAAAA,cAAcqC,sCAAsClS,GAGpF+B,EAA8B8N,EAAAA,cAAc2C,6BAA6BxS,GAG/E,OAAOrG,EAAKmZ,sBAAsB3K,4BAA4BpG,GAAmB1C,KAC7EC,EAAAA,IACI,SAAC4T,GAGG,OADAD,EAAOnI,oBAAoBhG,0BAA0BoO,GAC9CD,qKAjD1BJ,EAAenvB,EAAA,CAH3Byd,EAAAA,WAAW,CACRC,WAAY,SAKPC,EAAAA,EAAAC,EAAAA,OAAO7b,2BADc8b,EAAAA,WAAUze,OAEDojB,MAJ1B2M,GAAb,CAAqC/T,ICgBrCqU,GAAA,SAAA3Z,GAEI,SAAA2Z,EAAmBpU,EACoBlZ,EAC3BitB,GAFZ,IAAAnZ,EAGIH,EAAApU,KAAA9B,KAAMyb,EAAMlZ,IAAOvC,YAHJqW,EAAAoF,KAAAA,EACoBpF,EAAA9T,OAAAA,EAC3B8T,EAAAmZ,sBAAAA,EAkEJnZ,EAAAyZ,oCAAuG,SAACpT,GAE5G,IAAMiT,EAAgCpD,EAAAA,cAAcqC,sCAAsClS,GAGpF+B,EAA8B8N,EAAAA,cAAc2C,6BAA6BxS,GAG/E,OAAOrG,EAAKmZ,sBAAsB3K,4BAA4BpG,GAAmB1C,KAC7EC,EAAAA,IACI,SAAC4T,GAGG,OADAD,EAAOnI,oBAAoBhG,0BAA0BoO,GAC9CD,eAnFQrZ,EAAAA,EAAAA,GAevBuZ,EAAA3vB,UAAA6vB,4BAAR,SAAoCnU,EAA8BoU,GAG9D,IAAIC,EAAeD,EAgBnB,OAZIpU,EAAOsU,iBAAmB7sB,YAC1B4sB,EAAeA,EAAaE,IAAI,iBAAkBvU,EAAOsU,iBAGzDtU,EAAOwU,uBAAyB/sB,YAChC4sB,EAAeA,EAAaE,IAAI,uBAAwBvU,EAAOwU,uBAG/DxU,EAAOyU,uBAAyBhtB,YAChC4sB,EAAeA,EAAaE,IAAI,uBAAwBvU,EAAOyU,uBAG5DJ,GAUHJ,EAAA3vB,UAAAowB,2BAAR,SAAmC1U,EAA6BoU,GAG5D,IAAIC,EAAeD,EAYnB,OARIpU,EAAOwU,uBAAyB/sB,YAChC4sB,EAAeA,EAAaE,IAAI,uBAAwBvU,EAAOwU,uBAG/DxU,EAAOsU,iBAAmB7sB,YAC1B4sB,EAAeA,EAAaE,IAAI,iBAAkBvU,EAAOsU,iBAGtDD,GAuCXJ,EAAA3vB,UAAAqwB,iBAAA,SAAiBC,EAAoBC,EAAoB7U,GAErD,QAFiC,IAAA6U,IAAAA,EAAA,GAE7BD,IAAentB,WAAmC,IAAtBmtB,EAAW7vB,OACvC,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,qEAGxD,IAAIqgB,EAAa,IAAIU,EAAAA,WAQrB,OANAV,EAAaA,EAAWG,IAAI,SAAUM,EAAOjf,YAEzCoK,IAAWvY,YACX2sB,EAAahwB,KAAK+vB,4BAA4BnU,EAAQoU,IAGnDhwB,KAAK2b,QAAQ,cAAgB2C,mBAAmBkS,GAAaR,IAWxEH,EAAA3vB,UAAAywB,qCAAA,SAAqCH,EAAoBC,EAAoB7U,GACzE,QADqD,IAAA6U,IAAAA,EAAA,GACjDD,IAAentB,WAAmC,IAAtBmtB,EAAW7vB,OACvC,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,qEAGxD,IAAIqgB,EAAa,IAAIU,EAAAA,WAUrB,OARAV,EAAaA,EAAWG,IAAI,SAAUM,EAAOjf,YAEzCoK,IAAWvY,YACX2sB,EAAahwB,KAAK+vB,4BAA4BnU,EAAQoU,IAG7BhwB,KAAK2b,QAAQ,cAAgB2C,mBAAmBkS,GAAaR,GAE/EjU,KACPoH,EAAAA,SAEInjB,KAAKyc,eAET0G,EAAAA,SAEInjB,KAAK8vB,uCAajBD,EAAA3vB,UAAA0wB,2BAAA,SAA2BJ,EAAoB5U,GAE3C,GAAI4U,IAAentB,WAAmC,IAAtBmtB,EAAW7vB,OACvC,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,+EAGxD,IAAIqgB,EAAa,IAAIU,EAAAA,WAMrB,OAJI9U,IAAWvY,YACX2sB,EAAahwB,KAAK+vB,4BAA4BnU,EAAQoU,IAGnDhwB,KAAK2b,QAAQ,oBAAsB2C,mBAAmBkS,GAAaR,IAU9EH,EAAA3vB,UAAA2wB,2CAAA,SAA2CL,EAAoB5U,GAE3D,GAAI4U,IAAentB,WAAmC,IAAtBmtB,EAAW7vB,OACvC,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,+EAGxD,IAAIqgB,EAAa,IAAIU,EAAAA,WAQrB,OANI9U,IAAWvY,YACX2sB,EAAahwB,KAAK+vB,4BAA4BnU,EAAQoU,IAG9ChwB,KAAK2b,QAAQ,oBAAsB2C,mBAAmBkS,GAAaR,GAEpEjU,KACPoH,EAAAA,SAEInjB,KAAKyc,eAETT,EAAAA,IAEIuQ,EAAAA,cAAc8C,0BAY1BQ,EAAA3vB,UAAA4wB,iBAAA,SAAiBC,GAEb,OAAIA,IAAoB1tB,WAAwC,IAA3B0tB,EAAgBpwB,OAC1C+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,uEAGjD3P,KAAK+c,SAAS,qBAAsBgU,IAS/ClB,EAAA3vB,UAAA8wB,qCAAA,SAAqCD,GAEjC,OAAIA,IAAoB1tB,WAAwC,IAA3B0tB,EAAgBpwB,OAC1C+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,uEAG5C3P,KAAK+c,SAAS,qBAAsBgU,GAErChV,KACPoH,EAAAA,SACInjB,KAAKyc,eAET0G,EAAAA,SACInjB,KAAK8vB,uCAYjBD,EAAA3vB,UAAA+wB,2BAAA,SAA2BF,GAEvB,OAAIA,IAAoB1tB,WAAwC,IAA3B0tB,EAAgBpwB,OAC1C+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,iFAGjD3P,KAAK+c,SAAS,2BAA4BgU,IASrDlB,EAAA3vB,UAAAgxB,2CAAA,SAA2CH,GAEvC,OAAIA,IAAoB1tB,WAAwC,IAA3B0tB,EAAgBpwB,OAC1C+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,iFAG5C3P,KAAK+c,SAAS,2BAA4BgU,GAE3ChV,KACPoH,EAAAA,SAEInjB,KAAKyc,eAETT,EAAAA,IAEIuQ,EAAAA,cAAc8C,0BAc1BQ,EAAA3vB,UAAAixB,cAAA,SAAcX,EAAoBC,EAAoB7U,GAElD,QAF8B,IAAA6U,IAAAA,EAAA,GAE1BD,IAAentB,WAAmC,IAAtBmtB,EAAW7vB,OACvC,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,qEAGxD,IAAIqgB,EAAyB,IAAIU,EAAAA,WASjC,OAPAV,EAAaA,EAAWG,IAAI,SAAUM,EAAOjf,YAEzCoK,IAAWvY,YACX2sB,EAAahwB,KAAKswB,2BAA2B1U,EAAQoU,IAIlDhwB,KAAK2b,QAAQ,qBAAuB2C,mBAAmBkS,GAAaR,IAY/EH,EAAA3vB,UAAAkxB,kCAAA,SAAkCZ,EAAoBC,EAAoB7U,GAEtE,QAFkD,IAAA6U,IAAAA,EAAA,GAE9CD,IAAentB,WAAmC,IAAtBmtB,EAAW7vB,OACvC,OAAO+d,EAAAA,WAAWve,OAAO,SAAAwe,GAAY,OAAAA,EAAShP,MAAM,qEAGxD,IAAIqgB,EAAyB,IAAIU,EAAAA,WAUjC,OARAV,EAAaA,EAAWG,IAAI,SAAUM,EAAOjf,YAEzCoK,IAAWvY,YACX2sB,EAAahwB,KAAKswB,2BAA2B1U,EAAQoU,IAG7ChwB,KAAK2b,QAAQ,qBAAuB2C,mBAAmBkS,GAAaR,GAErEjU,KACPoH,EAAAA,SACInjB,KAAKyc,eAET0G,EAAAA,SACInjB,KAAK8vB,mMAzVRD,EAAazvB,EAAA,CAHzByd,EAAAA,WAAW,CACRC,WAAY,SAKPC,EAAAA,EAAAC,EAAAA,OAAO7b,2BADa8b,EAAAA,WAAUze,OAEAojB,MAJ1BiN,GAAb,CAAmCrU,ICrBnC6V,GAAA,SAAAnb,GAAA,SAAAmb,0DAAqC/a,EAAAA,EAAAA,GASjC+a,EAAAnxB,UAAAoxB,mBAAA,SAAmBC,EAAqBd,GACpC,IAAMe,EAAiB,yWAeCD,EAAW,2EAGxCA,EAAW,saAgBHd,EAAM,KAGT,OAAOzwB,KAAKgxB,qCAAqCQ,IAWrDH,EAAAnxB,UAAAuxB,gDAAA,SAAgD5a,EAAqB4Z,GACjE,IAAMe,EAAiB,yUAcH3a,EAAW,yEAGpCA,EAAW,0TAaL4Z,EAAM,KAGP,OAAOzwB,KAAKgxB,qCAAqCQ,IAYrDH,EAAAnxB,UAAAwxB,4BAAA,SAA4B7a,EAAqB4Z,GAC7C,IAAMe,EAAiB,wKAMD3a,EAAW,0FAMXA,EAAW,WAEtCA,EAAW,oRAQyBA,EAAW,qEAIbA,EAAW,sBAGrC4Z,EAAM,KAGT,OAAOzwB,KAAKgxB,qCAAqCQ,gKAzI5CH,EAAejxB,EAAA,CAH3Byd,EAAAA,WAAW,CACRC,WAAY,UAEHuT,GAAb,CAAqCxB,ICJrC8B,GAAA,WAcA,OAJI,SAAmBC,GAAA5xB,KAAA4xB,mBAAAA,GAVvB,iBA0BI,SAAAC,IAGI7xB,KAAK8xB,qBAAuB,IAAIC,EAAAA,gBAAsC,IAAIJ,GAAqB,SAAClB,GAAmB,OAAA,YASvHoB,EAAA3xB,UAAA8xB,sBAAA,SAAsB/B,GAClBjwB,KAAK8xB,qBAAqB/vB,KAAKkuB,IAQnC4B,EAAA3xB,UAAA+xB,gBAAA,WACI,OAAOjyB,KAAK8xB,qBAAqBI,iHA1B5BL,EAAmBzxB,EAAA,CAN/Byd,EAAAA,WAAW,CACRC,WAAY,oCAKH+T,MClBbM,GAAA,WAsCI,SAAAA,EAAoBC,GAAApyB,KAAAoyB,qBAAAA,iBAtCXD,EAgDTA,EAAAjyB,UAAAmyB,sBAAA,SAAsBpX,EAAiCqX,EAAkC7B,QAAA,IAAAA,IAAAA,EAAA,GAGrF,IAAI8B,EAAoB,GAGpBD,IAA4BjvB,YAC5BkvB,EAAoB,eAAeD,EAAuB,OAI9D,IAAME,EAAkB,GAGlBC,EAAmB,GAGnBC,EAAkBzX,EAAWe,IAC/B,SAAC2W,EAAgCriB,GAG7B,IAAImd,EAOAA,EANCkF,EAAY1S,SAASpY,gBAAiF,WAA/D8qB,EAAYC,aAAaC,mBAAmBtc,eAMxEoc,EAAYC,aAAa5wB,MAAM8wB,SAAS5wB,EAAAA,YAAY6wB,SAHpD,WAAWziB,EAO3B,IAAI0iB,EAAoB,aAAaL,EAAY1S,SAAShO,GAAE,KAAKwb,EAAS,KAGtEkF,EAAY1S,SAASpY,gBAAiF,cAA/D8qB,EAAYC,aAAaC,mBAAmBtc,eAEnFyc,EAAY,wBAC9BA,EAAS,WAMSP,EAAiBpY,KAAK2Y,GACtBA,EAAY,KAC9BA,EAAS,UAOK,IAAIC,EAAsB,GAE1B,IAAKN,EAAY1S,SAASpY,gBAAiF,WAA/D8qB,EAAYC,aAAaC,mBAAmBtc,eAA6B,CAEjH,IAAM2c,EAAsBzF,EAAS,UAE8B,SAA/DkF,EAAYC,aAAaC,mBAAmBtc,gBAE5C0c,EAAiBxF,EAAS,KAAK0F,EAA4BC,kBAAkBT,EAAY1S,SAASS,YAAW,KAAKwS,EAAqB,KAEvID,GAAe,gBAAgBC,EAAgB,KAAKP,EAAYC,aAAa5wB,MAAM8wB,SAAS5wB,EAAAA,YAAY6wB,SAAQ,UAC1C,UAA/DJ,EAAYC,aAAaC,mBAAmBtc,gBAEnD0c,EAAiBxF,EAAS,KAAK0F,EAA4BC,kBAAkBT,EAAY1S,SAASS,YAAW,KAAKwS,EAAqB,KAEvID,GAAe,WAAWpuB,EAAe8I,cAAa,KAAKulB,EAAgB,KAAKP,EAAYC,aAAa5wB,MAAM8wB,SAAS5wB,EAAAA,YAAY6wB,SAAQ,KACrIJ,EAAY1S,SAASS,aAAe7b,EAAewB,UAE1D4sB,EAAc,iCAAiCxF,EAAS,KAAKkF,EAAYC,aAAaC,mBAAmB5c,KAAI,IAAI0c,EAAYC,aAAa5wB,MAAM8wB,SAAS5wB,EAAAA,YAAY6wB,SAAQ,IACtKJ,EAAY1S,SAASS,aAAe7b,EAAe2B,WAE1DysB,EAAiBxF,EAAS,KAAK0F,EAA4BC,kBAAkBT,EAAY1S,SAASS,YAAW,KAAKiS,EAAYC,aAAa5wB,MAAM8wB,SAAS5wB,EAAAA,YAAY6wB,SAAa,KAEhH,cAA/DJ,EAAYC,aAAaC,mBAAmBtc,iBAC5C0c,EAAc,wDACRA,EAAW,qCAKrBA,EAAiBxF,EAAS,KAAK0F,EAA4BC,kBAAkBT,EAAY1S,SAASS,YAAW,KAAKwS,EAAqB,KAEvID,GAAe,UAAUC,EAAgB,IAAIP,EAAYC,aAAaC,mBAAmB5c,KAAI,IAAI0c,EAAYC,aAAa5wB,MAAM8wB,SAAS5wB,EAAAA,YAAY6wB,SAAQ,KAOrK,OAFIJ,EAAYU,iBAAiBb,EAAgBnY,KAAKoT,GAE5CuF,EAAS,KACjCC,EAAW,OAKDK,EAAmB,GAEnBd,EAAgB7xB,OAAS,IACzB2yB,EAAmB,cACpBd,EAAgBe,KAAK,KAAI,MAK5B,IAAMC,EAAqB,iIAMjCf,EAAiBc,KAAK,MAAK,uDAM3BhB,EAAiB,OAEjBG,EAAMa,KAAK,IAAG,UAGdD,EAGYG,EAAiB,YACtBhD,EAAM,KAkBP,OANe,IAAXA,GAEAzwB,KAAKoyB,qBAAqBJ,sBAAsB,IAAIL,GAVR,SAAC+B,GAK7C,OAAOF,EAJsB,YAChCE,EAAW,QAYLF,EAAqBC,GA1LlBtB,EAAAwB,8BAAgC,CAC1CC,sDAAuD/uB,EAAemI,WACtE6mB,0DAA2DhvB,EAAeoI,WAC1E6mB,0DAA2DjvB,EAAekI,WAC1EgnB,uDAAwDlvB,EAAeiI,UACvEknB,uDAAwDnvB,EAAeuI,WACvE6mB,2DAA4DpvB,EAAewI,eAC3E6mB,uDAAwDrvB,EAAeyI,WACvE6mB,wDAAyDtvB,EAAe0I,YACxE6mB,0DAA2DvvB,EAAe2I,cAC1E6mB,sDAAuDxvB,EAAeqI,OACtEonB,iEAAkEzvB,EAAe4I,WACjF8mB,uDAAwD1vB,EAAe4I,WACvE+mB,kEAAmE3vB,EAAe4I,WAClFgnB,0DAA2D5vB,EAAe4I,WAC1EinB,4DAA6D7vB,EAAe4I,WAC5EknB,+DAAgE9vB,EAAe4I,WAC/EmnB,2DAA4D/vB,EAAe4I,WAC3EonB,uDAAwDhwB,EAAe6I,gBAG7DykB,EAAAiB,kBAAoB,CAC9BQ,sDAAuD/uB,EAAegH,sBACtEgoB,0DAA2DhvB,EAAeiH,sBAC1EgoB,0DAA2DjvB,EAAe4H,sBAC1EsnB,uDAAwDlvB,EAAe8F,cACvE0pB,sDAAuDxvB,EAAe2H,cACtEqoB,uDAAwDhwB,EAAe+H,0IAnClEulB,EAA2BgB,EAAA/yB,EAAA,CAHvCyd,EAAAA,WAAW,CACRC,WAAY,gCAwC8B+T,MAtCjCM,GAAb,iBCEE,SAAA2C,EAAoBrZ,EAAqDlZ,GAArDvC,KAAAyb,KAAAA,EAAqDzb,KAAAuC,OAAAA,SAQzEuyB,EAAA50B,UAAA60B,wBAAA,SAAwBC,GAEtB,OAAOh1B,KAAKyb,KAAKuB,KAAsChd,KAAKuC,OAAOgB,IAAM,uCAAwCyxB,GAC9GjZ,KACCC,EAAAA,IACE,SAACmD,GAGC,OAFgDA,EAElC7B,SAEhB,SAAC3N,GAMC,MALIA,EAAMA,iBAAiBkQ,MACzBnQ,QAAQ6S,IAAI,uEAAwE5S,GAEpFD,QAAQ6S,IAAI,uEAAwE5S,GAEhFA,mJA1BLmlB,EAAY10B,EAAA,CAHxByd,EAAAA,WAAW,CACVC,WAAY,SAI2BC,EAAAA,EAAAC,EAAAA,OAAO7b,2BAApB8b,EAAAA,WAAUze,UAFzBs1B,qBCJb,SAAAG,0DAA0C3e,EAAAA,EAAAA,GAWxC2e,EAAA/0B,UAAAg1B,iBAAA,WACE,IAAMlxB,EAAMhE,KAAKuC,OAAOe,IACxB,OAAOtD,KAAK2b,QAAQ3X,EAAM,qLAbjBixB,EAAoB70B,EAAA,CAHhCyd,EAAAA,WAAW,CACVC,WAAY,UAEDmX,IAA6BzZ,mBCA1C,SAAA2Z,0DAA0C7e,EAAAA,EAAAA,GAQxC6e,EAAAj1B,UAAAk1B,sBAAA,SAAsB/M,GACpB,OAAOroB,KAAK2b,QAAQ,gCAAkC2C,mBAAmB+J,KAS3E8M,EAAAj1B,UAAAm1B,gBAAA,SAAgBhN,GACd,OAAOroB,KAAK2b,QAAQ,qBAAuB2C,mBAAmB+J,kJAnBrD8M,EAAoB/0B,EAAA,CAHhCyd,EAAAA,WAAW,CACVC,WAAY,UAEDqX,IAA6B3Z,ICI1C8Z,GAAA,SAAApf,GAEI,SAAAof,EAAmB7Z,EAC4BlZ,GAD/C,IAAA8T,EAEIH,EAAApU,KAAA9B,KAAMyb,EAAMlZ,IAAOvC,YAFJqW,EAAAoF,KAAAA,EAC4BpF,EAAA9T,OAAAA,WAHlB+T,EAAAA,EAAAA,GAarBgf,EAAAp1B,UAAAq1B,iBAAR,SAAyBC,GACrB,OAAOx1B,KAAK2b,QAAQ,aAAe2C,mBAAmBkX,KAS1DF,EAAAp1B,UAAAsoB,QAAA,SAAQgN,GAGJ,OAFmBx1B,KAAKu1B,iBAAiBC,GAEvBzZ,KACdoH,EAAAA,SAEInjB,KAAKyc,iBAWT6Y,EAAAp1B,UAAAu1B,qBAAR,SAA6B9a,GACzB,OAAO3a,KAAK2b,QAAQ,YAAc2C,mBAAmB3D,KASzD2a,EAAAp1B,UAAAw1B,YAAA,SAAY/a,GAIR,OAFuB3a,KAAKy1B,qBAAqB9a,GAE3BoB,KAClBoH,EAAAA,SAEInjB,KAAKyc,8JAzDR6Y,EAAWl1B,EAAA,CAHvByd,EAAAA,WAAW,CACRC,WAAY,SAKCC,EAAAA,EAAAC,EAAAA,OAAO7b,2BADK8b,EAAAA,WAAUze,UAF1B81B,GAAb,CAAiC9Z,ICHjCma,GAAA,WAaA,OAPI,SAAqB1jB,EAAqBqB,EAAwBG,EAA4BmiB,GAAzE51B,KAAAiS,GAAAA,EAAqBjS,KAAAsT,MAAAA,EAAwBtT,KAAAyT,SAAAA,EAA4BzT,KAAA41B,YAAAA,EAG1F51B,KAAKgU,WAAc4hB,IAAgBvyB,UAEnCrD,KAAKuT,SAAW,IAXxB,GAeAsiB,GAAA,WAIA,OAJA,aAAA,GAMAC,GAAA,WAGA,OAHA,aAAA,GAQAC,GAAA,WAMI,SAAAA,EAAoBC,GAApB,IAAA3f,EAAArW,KAAoBA,KAAAg2B,aAAAA,EAJZh2B,KAAAi2B,UAAY,IAAIJ,GAEhB71B,KAAAk2B,wBAA0B,IAAIJ,GAsB9B91B,KAAAm2B,wBAA8D,SAACC,WAE7Dzb,EAAcyb,EAAW,OAEzBR,EAAcvf,EAAKuf,YAAYQ,GAE/BC,EAAW,IAAIV,GACjBhb,EACAyb,EAAW,8CACXA,EAAW,+DACXR,GAIJ,GAAIQ,EAAW,+DAAiE/yB,UAE5E,GAAI1D,MAAMylB,QAAQgR,EAAW,kEAEzB,IAA0B,IAAAnc,EAAAC,EAAAkc,EAAW,8DAA4Djc,EAAAF,EAAAlY,QAAAoY,EAAAlY,KAAAkY,EAAAF,EAAAlY,OAAE,CAA9F,IAAMu0B,EAAWnc,EAAAnY,MAClBq0B,EAAS9iB,SAAS8G,KAAKhE,EAAK8f,wBAAwBG,8GAIxDD,EAAS9iB,SAAS8G,KAAKhE,EAAK8f,wBAAwBC,EAAW,+DAOvE,OAFA/f,EAAK6f,wBAAwBvb,GAAe0b,EAErCA,UA/CHN,EAAA71B,UAAA01B,YAAR,SAAoBQ,GAChB,IAAIG,EAMJ,OAJIH,EAAW,4DAA8D/yB,YACzEkzB,EAAUH,EAAW,0DAA0D,QAG5EG,GAiDXR,EAAA71B,UAAAsoB,QAAA,SAAQgN,GAAR,IAAAnf,EAAArW,KAGI,OAAIA,KAAKi2B,UAAUT,KAAiBnyB,UAGzBujB,EAAAA,GAAG5mB,KAAKi2B,UAAUT,IAKNx1B,KAAKg2B,aAAaxN,QAAQgN,GAEKzZ,KAC9CC,EAAAA,IACIhc,KAAKm2B,0BAICpa,KACVC,EAAAA,IACI,SAAC5H,GAGG,OADAiC,EAAK4f,UAAUT,GAAephB,EACvBA,MAa3B2hB,EAAA71B,UAAAw1B,YAAA,SAAY/a,GAAZ,IAAAtE,EAAArW,KAGI,OAAIA,KAAKk2B,wBAAwBvb,KAAiBtX,UAGvCujB,EAAAA,GAAG5mB,KAAKk2B,wBAAwBvb,IAItB3a,KAAKg2B,aAAaN,YAAY/a,GAE/BoB,KACZoH,EAAAA,SACI,SAACqT,GACG,IAAMZ,EAAcvf,EAAKuf,YAAYY,GAErC,OAAIZ,IAAgBvyB,UAETgT,EAAKmS,QAAQoN,GAAa7Z,KAC7BC,EAAAA,IACI,SAACya,GAEG,OAAOpgB,EAAK6f,wBAAwBvb,MAKzCtE,EAAKmS,QAAQ7N,GAAaoB,KAC7BC,EAAAA,IACI,SAACya,GAEG,OAAOpgB,EAAK6f,wBAAwBvb,+HAtI/Dob,EAAgB31B,EAAA,CAH5Byd,EAAAA,WAAW,CACRC,WAAY,gCAQsBwX,MANzBS,GAAb,iBCZI,SAAAW,IAHA12B,KAAAiW,KAAOpR,EAAe+I,yBACtB5N,KAAAsT,MAAQzO,EAAegJ,sBAQ3B,OAHI6oB,EAAAx2B,UAAAqW,aAAA,WACI,MAAO,UAEfmgB,mBAQI,SAAAC,IAHA32B,KAAAiW,KAAOpR,EAAeiJ,4BACtB9N,KAAAsT,MAAQzO,EAAekJ,yBAQ3B,OAHI4oB,EAAAz2B,UAAAqW,aAAA,WACI,MAAO,aAEfogB,mBAOI,SAAAC,IAHA52B,KAAAiW,KAAOpR,EAAeqJ,oCACtBlO,KAAAsT,MAAQzO,EAAesJ,iCAQ3B,OAHIyoB,EAAA12B,UAAAqW,aAAA,WACI,MAAO,qBAEfqgB,mBAOI,SAAAC,IAHA72B,KAAAiW,KAAOpR,EAAemJ,8BACtBhO,KAAAsT,MAAQzO,EAAeoJ,2BAQ3B,OAHI4oB,EAAA32B,UAAAqW,aAAA,WACI,MAAO,eAEfsgB,mBAOI,SAAAC,IAHA92B,KAAAiW,KAAOpR,EAAeuJ,2BACtBpO,KAAAsT,MAAQzO,EAAewJ,wBAQ3B,OAHIyoB,EAAA52B,UAAAqW,aAAA,WACI,MAAO,YAEfugB,mBAOI,SAAAC,IAHA/2B,KAAAiW,KAAOpR,EAAeyJ,iCACtBtO,KAAAsT,MAAQzO,EAAe0J,6BAQ3B,OAHIwoB,EAAA72B,UAAAqW,aAAA,WACI,MAAO,kBAEfwgB,mBAQI,SAAAC,IAHAh3B,KAAAiW,KAAOpR,EAAe2J,yBACtBxO,KAAAsT,MAAQzO,EAAe4J,sBAQ3B,OAHIuoB,EAAA92B,UAAAqW,aAAA,WACI,MAAO,UAEfygB,mBAOI,SAAAC,IAHAj3B,KAAAiW,KAAOpR,EAAe6J,uBACtB1O,KAAAsT,MAAQzO,EAAe8J,oBAS3B,OAJIsoB,EAAA/2B,UAAAqW,aAAA,WACI,MAAO,QAGf0gB,mBAOI,SAAAC,IAHAl3B,KAAAiW,KAAOpR,EAAe+J,wBACtB5O,KAAAsT,MAAQzO,EAAegK,qBAS3B,OAJIqoB,EAAAh3B,UAAAqW,aAAA,WACI,MAAO,SAGf2gB,KAMAC,GAAA,WAIA,OAFI,SAAqBtE,EAAiD7wB,GAAjDhC,KAAA6yB,mBAAAA,EAAiD7yB,KAAAgC,MAAAA,GAF1E,GAwBAo1B,GAAA,WAQI,SAAAA,EACoBp1B,EACAiU,GADAjW,KAAAgC,MAAAA,EACAhC,KAAAiW,KAAAA,EA0BxB,OAhBWmhB,EAAAl3B,UAAA4yB,SAAP,SAAgBuE,GAEZ,IAAIC,EAWJ,OALIA,EAFAD,IAAWn1B,EAAAA,YAAYq1B,QAAUpF,GAA4BwB,8BAA8B3zB,KAAKiW,QAAU5S,UAE5F8uB,GAA4BwB,8BAA8B3zB,KAAKiW,MAG/DjW,KAAKiW,KAEhB,IAAIjW,KAAKgC,MAAK,OAAOs1B,EAAW,KAG/CF,EApCA,GAyCAI,GAAA,WAOI,SAAAA,EAAqBnP,GAAAroB,KAAAqoB,IAAAA,EAczB,OALWmP,EAAAt3B,UAAA4yB,SAAP,SAAgBuE,GAEZ,MAAO,IAAIr3B,KAAKqoB,IAAG,KAG3BmP,EArBA,GA8CAC,GAAA,WAeA,OANI,SACaxX,EACA2S,EACAS,GAFArzB,KAAAigB,SAAAA,EACAjgB,KAAA4yB,aAAAA,EACA5yB,KAAAqzB,gBAAAA,GAZjB","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class KnoraConstants {\n\n    // The following version of Knora is needed to work properly with this module\n    public static KnoraVersion: string = '8.0.0';\n\n    public static KnoraApi: string = 'http://api.knora.org/ontology/knora-api';\n    public static PathSeparator: string = '#';\n\n    public static KnoraOntologyPath: string = 'http://www.knora.org/ontology';\n    public static KnoraBase: string = KnoraConstants.KnoraOntologyPath + '/knora-base';\n    public static KnoraAdmin: string = KnoraConstants.KnoraOntologyPath + '/knora-admin';\n\n    public static DefaultSharedOntologyIRI: string = KnoraConstants.KnoraAdmin + '#DefaultSharedOntologiesProject';\n    public static SystemProjectIRI: string = KnoraConstants.KnoraAdmin + '#SystemProject';\n    public static SystemAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#SystemAdmin';\n    public static ProjectAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectAdmin';\n    public static ProjectMemberGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectMember';\n\n    public static KnoraApiV2WithValueObjectPath: string = KnoraConstants.KnoraApi + '/v2' + KnoraConstants.PathSeparator;\n    public static KnoraApiV2SimplePath: string = KnoraConstants.KnoraApi + '/simple/v2' + KnoraConstants.PathSeparator;\n\n    public static SalsahGuiOntology: string = 'http://api.knora.org/ontology/salsah-gui/v2';\n\n    public static SalsahGuiOrder: string = KnoraConstants.SalsahGuiOntology + '#guiOrder';\n    public static SalsahGuiAttribute: string = KnoraConstants.SalsahGuiOntology + '#guiAttribute';\n\n\n    public static StandoffOntology: string = 'http://api.knora.org/ontology/standoff/v2';\n\n    public static Resource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Resource';\n    public static TextValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextValue';\n    public static IntValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntValue';\n    public static BooleanValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'BooleanValue';\n    public static UriValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'UriValue';\n    public static DecimalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DecimalValue';\n    public static DateValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DateValue';\n    public static ColorValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ColorValue';\n    public static GeomValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeomValue';\n    public static ListValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListValue';\n    public static IntervalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntervalValue';\n    public static LinkValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'LinkValue';\n    public static GeonameValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeonameValue';\n    public static FileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'FileValue';\n    public static AudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'AudioFileValue';\n    public static DDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DDDFileValue';\n    public static DocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DocumentFileValue';\n    public static StillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'StillImageFileValue';\n    public static MovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'MovingImageFileValue';\n    public static TextFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextFileValue';\n    public static IsResourceClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isResourceClass';\n    public static IsValueClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isValueClass';\n    public static ForbiddenResource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ForbiddenResource';\n    public static XMLToStandoffMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'XMLToStandoffMapping';\n    public static ListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListNode';\n\n    public static ArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'arkUrl';\n    public static versionArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'versionArkUrl';\n    public static ObjectType = KnoraConstants.KnoraApiV2WithValueObjectPath + 'objectType';\n\n    public static ResourceIcon: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'resourceIcon';\n    public static isEditable: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isEditable';\n    public static isLinkProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkProperty';\n    public static isLinkValueProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkValueProperty';\n    public static hasGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasGeometry';\n\n    public static schemaName: string = 'http://schema.org/name';\n    public static schemaNumberOfItems: string = 'http://schema.org/numberOfItems';\n    public static schemaItemListElement: string = 'http://schema.org/itemListElement';\n\n\n    public static RdfProperty: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property';\n    public static RdfsSchema: string = 'http://www.w3.org/2000/01/rdf-schema' + KnoraConstants.PathSeparator;\n    public static RdfsLabel: string = KnoraConstants.RdfsSchema + 'label';\n    public static RdfsComment: string = KnoraConstants.RdfsSchema + 'comment';\n    public static RdfsSubclassOf: string = KnoraConstants.RdfsSchema + 'subClassOf';\n    public static subPropertyOf: string = KnoraConstants.RdfsSchema + 'subPropertyOf';\n\n    public static owl: string = 'http://www.w3.org/2002/07/owl';\n\n    public static OwlClass: string = KnoraConstants.owl + '#Class';\n    public static OwlObjectProperty: string = KnoraConstants.owl + '#ObjectProperty';\n    public static OwlDatatypeProperty: string = KnoraConstants.owl + '#DatatypeProperty';\n    public static OwlAnnotationProperty: string = KnoraConstants.owl + '#AnnotationProperty';\n    public static OwlOnProperty: string = KnoraConstants.owl + '#onProperty';\n    public static OwlMaxCardinality: string = KnoraConstants.owl + '#maxCardinality';\n    public static OwlMinCardinality: string = KnoraConstants.owl + '#minCardinality';\n    public static OwlCardinality: string = KnoraConstants.owl + '#cardinality';\n    public static OwlRestriction: string = KnoraConstants.owl + '#Restriction';\n\n    public static creationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'creationDate';\n    public static lastModificationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'lastModificationDate';\n    public static hasPermissions: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasPermissions';\n    public static userHasPermission: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'userHasPermission';\n    public static attachedToProject: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToProject';\n    public static attachedToUser: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToUser';\n\n    public static Region: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Region';\n\n    public static ReadTextValueAsHtml: string = 'ReadTextValueAsHtml';\n    public static ReadTextValueAsString: string = 'ReadTextValueAsString';\n    public static ReadTextValueAsXml: string = 'ReadTextValueAsXml';\n    public static ReadDateValue: string = 'ReadDateValue';\n    public static ReadLinkValue: string = 'ReadLinkValue';\n    public static ReadIntegerValue: string = 'ReadIntegerValue';\n    public static ReadDecimalValue: string = 'ReadDecimalValue';\n    public static ReadStillImageFileValue: string = 'ReadStillImageFileValue';\n    public static ReadMovingImageFileValue: string = 'ReadMovingImageFileValue';\n    public static ReadAudioFileValue: string = 'ReadAudioFileValue';\n    public static ReadTextFileValue: string = 'ReadTextFileValue';\n    public static ReadGeomValue: string = 'ReadGeomValue';\n    public static ReadColorValue: string = 'ReadColorValue';\n    public static ReadUriValue: string = 'ReadUriValue';\n    public static ReadBooleanValue: string = 'ReadBooleanValue';\n    public static ReadIntervalValue: string = 'ReadIntervalValue';\n    public static ReadListValue: string = 'ReadListValue';\n\n    public static valueAsString: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'valueAsString';\n\n    public static textValueAsHtml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsHtml';\n    public static textValueAsXml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsXml';\n    public static textValueHasMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueHasMapping';\n\n    public static hasStandoffLinkToValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStandoffLinkToValue';\n\n    public static dateValueHasStartYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartYear';\n    public static dateValueHasEndYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndYear';\n    public static dateValueHasStartEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartEra';\n    public static dateValueHasEndEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndEra';\n    public static dateValueHasStartMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartMonth';\n    public static dateValueHasEndMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndMonth';\n    public static dateValueHasStartDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartDay';\n    public static dateValueHasEndDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndDay';\n    public static dateValueHasCalendar: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasCalendar';\n\n    public static linkValueHasTarget: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTarget';\n    public static linkValueHasSource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSource';\n    public static linkValueHasSourceIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSourceIri';\n    public static linkValueHasTargetIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTargetIri';\n\n    public static integerValueAsInteger: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intValueAsInt';\n\n    public static decimalValueAsDecimal: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'decimalValueAsDecimal';\n\n    public static fileValueAsUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueAsUrl';\n    public static fileValueIsPreview: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueIsPreview';\n    public static fileValueHasFilename: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueHasFilename';\n\n    public static hasStillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStillImageFileValue';\n\n    public static stillImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimX';\n    public static stillImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimY';\n    public static stillImageFileValueHasIIIFBaseUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasIIIFBaseUrl';\n\n    public static colorValueAsColor: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'colorValueAsColor';\n    public static geometryValueAsGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'geometryValueAsGeometry';\n    public static uriValueAsUri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'uriValueAsUri';\n    public static booleanValueAsBoolean: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'booleanValueAsBoolean';\n\n    public static intervalValueHasStart: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasStart';\n    public static intervalValueHasEnd: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasEnd';\n\n    public static listValueAsListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNode';\n\n    public static Xsd: string = 'http://www.w3.org/2001/XMLSchema#';\n\n    public static xsdString: string = KnoraConstants.Xsd + 'string';\n    public static xsdBoolean: string = KnoraConstants.Xsd + 'boolean';\n    public static xsdInteger: string = KnoraConstants.Xsd + 'integer';\n    public static xsdDecimal: string = KnoraConstants.Xsd + 'decimal';\n    public static xsdUri: string = KnoraConstants.Xsd + 'anyURI';\n\n    public static resourceSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Resource';\n    public static dateSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Date';\n    public static intervalSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Interval';\n    public static geomSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geom';\n    public static colorSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Color';\n    public static geonameSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geoname';\n    public static fileSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'File';\n    public static listNodeSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'ListNode';\n\n    public static matchFunction: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'match';\n\n    public static EqualsComparisonOperator: string = '=';\n    public static EqualsComparisonLabel: string = 'is equal to';\n\n    public static NotEqualsComparisonOperator: string = '!=';\n    public static NotEqualsComparisonLabel: string = 'is not equal to';\n\n    public static GreaterThanComparisonOperator: string = '>';\n    public static GreaterThanComparisonLabel: string = 'is greater than';\n\n    public static GreaterThanEqualsComparisonOperator: string = '>=';\n    public static GreaterThanEqualsComparisonLabel: string = 'is greater than equals to';\n\n    public static LessThanComparisonOperator: string = '<';\n    public static LessThanComparisonLabel: string = 'is less than';\n\n    public static LessThanEqualsComparisonOperator: string = '<=';\n    public static LessThanQualsComparisonLabel: string = 'is less than equals to';\n\n    public static ExistsComparisonOperator: string = 'E';\n    public static ExistsComparisonLabel: string = 'exists';\n\n    public static LikeComparisonOperator: string = 'regex';\n    public static LikeComparisonLabel: string = 'is like';\n\n    public static MatchComparisonOperator: string = 'contains';\n    public static MatchComparisonLabel: string = 'matches';\n\n    public static SalsahLink: string = 'salsah-link'; // class on an HTML <a> element that indicates a link to a Knora resource\n    public static RefMarker: string = 'ref-marker'; // class on an HTML element that refers to another element in the same document\n\n    public static GNDPrefix: string = '(DE-588)';\n    public static GNDResolver: string = 'http://d-nb.info/gnd/';\n\n    public static VIAFPrefix: string = '(VIAF)';\n    public static VIAFResolver: string = 'https://viaf.org/viaf/';\n\n}\n\n\nexport enum KnoraSchema {\n    complex = 0,\n    simple = 1\n}\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { KuiCoreConfig } from './declarations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nexport const KuiCoreConfigToken = new InjectionToken<KuiCoreConfig>('KuiCoreConfigToken (knora.core.config)');\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: [],\n    exports: [\n        HttpClientModule\n    ]\n})\nexport class KuiCoreModule {\n    /**\n     *\n     * @param {KuiCoreConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: KuiCoreConfig): ModuleWithProviders {\n        // get the app environment configuration here\n        // console.log('KuiCoreModule - forRoot - config: ', config);\n        return {\n            ngModule: KuiCoreModule,\n            providers: [\n                {provide: KuiCoreConfigToken, useValue: config}\n            ]\n        };\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * Knora-ui core configuration with the server definitions of:\n *  - api: URL of data service e.g. knora: http://localhost:3333\n *  - media: URL of media server service e.g. sipi: http://localhost:1024\n *  - app: URL of the app e.g. salsah: http://localhost:4200\n */\n@JsonObject('KuiCoreConfig')\nexport class KuiCoreConfig {\n\n    /**\n     * name of the app e.g. 'SALSAH'\n     * @type {string}\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * url of the app e.g. 'https://salsah.org'\n     * @type {undefined}\n     */\n    @JsonProperty('app', String)\n    public app: string = undefined;\n\n    /**\n     * url of the api e.g. 'https://api.knora.org'\n     * @type {string}\n     */\n    @JsonProperty('api', String)\n    public api: string = undefined;\n\n    /**\n     * url of media/file server e.g. 'https://iiif.sipi.io'\n     * @type {string}\n     */\n    @JsonProperty('media', String)\n    public media: string = undefined;\n\n}\n","\nimport { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\n\n/**\n * Result class used as API url response in ApiService\n */\nexport class ApiServiceResult {\n\n    private static jsonConvert: JsonConvert = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL);\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Body as JSON\n     */\n    body: any;\n\n    /**\n     * Gets the result body as instance of classObject.\n     * @param classObject\n     * @returns {any}\n     * @throws\n     */\n\n    getBody(classObject?: { new(): any }): any {\n        // console.log(this.body);\n        return ApiServiceResult.jsonConvert.deserialize(this.body, classObject);\n    }\n\n\n}\n","\n/**\n * Error class used as API response in ApiService\n */\nexport class ApiServiceError {\n\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Additional error info\n     */\n    errorInfo = '';\n\n}\n","/**\n * Collection of useful utility functions.\n */\nimport { KnoraConstants } from './api/knora-constants';\n\n// @dynamic\nexport class Utils {\n    /**\n     * A regex to validate Email address.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    /**\n     * A regex to validate Username.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUsername = /^[a-zA-Z0-9]+$/;\n\n    /**\n     * A regex to validate URLs.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUrl = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/i;\n\n    /**\n     * A regex to validate Passwords\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexPassword = /^(?=.*\\d)(?=.*[a-zA-Z]).{8,}$/i;\n\n    /**\n     * A regex to validate Hexadecimal values\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexHex = /^[0-9A-Fa-f]+$/;\n\n    /**\n     * A regex to validate shortname in projects\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexShortname = /^[a-zA-Z]+\\S*$/;\n\n\n    /**\n     * Lambda function eliminating duplicates in a collection to be passed to [[filter]].\n     *\n     * @param elem element of an Array that is currently being looked at.\n     * @param index current elements index.\n     * @param self reference to the whole Array.\n     * @returns {boolean} true if the same element does not already exist in the Array.\n     */\n    public static filterOutDuplicates = (elem, index: number, self) => {\n\n        // https://stackoverflow.com/questions/16747798/delete-duplicate-elements-from-an-array\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example\n\n        // returns true if the element's index equals the index of the leftmost element\n        // -> this means that there is no identical element before this index, hence it is not a duplicate\n        // for all other elements, false is returned\n        return index === self.indexOf(elem);\n\n    }\n\n    /**\n     * Given a Knora entity IRI, gets the ontology Iri.\n     *\n     * @param {string} entityIri an entity Iri.\n     * @return {string} the ontology IRI\n     */\n    public static getOntologyIriFromEntityIri(entityIri: string) {\n\n        // split class Iri on \"#\"\n        const segments: string[] = entityIri.split(KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${entityIri} is not a valid entity IRI.`);\n\n        return segments[0];\n\n    }\n\n    /**\n     * Converts a complex knora-api entity Iri to a knora-api simple entity Iri.\n     *\n     * @param {string} complexEntityIri\n     * @returns {string}\n     */\n    public static convertComplexKnoraApiEntityIritoSimple(complexEntityIri: string) {\n\n        // split entity Iri on \"#\"\n        const segments: string[] = complexEntityIri.split('v2' + KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${complexEntityIri} is not a valid entity IRI.`);\n\n        // add 'simple' to base path\n        return segments[0] + 'simple/v2' + KnoraConstants.PathSeparator + segments[1];\n\n    }\n\n\n}\n","/**\n * Precision for DateSalsah.\n */\nexport enum Precision {\n    yearPrecision,\n    monthPrecision,\n    dayPrecision\n}\n\n/**\n * Represents a Salsah date object with a precision information.\n */\nexport class DateSalsah {\n\n    private static separator = '-';\n\n    readonly precision: Precision;\n\n    constructor(\n        readonly calendar: string,\n        readonly era: string,\n        readonly year: number,\n        readonly month?: number,\n        readonly day?: number\n    ) {\n        if (this.month === undefined) {\n            // year precision\n            this.precision = Precision.yearPrecision;\n        } else if (this.day === undefined) {\n            // month precision\n            this.precision = Precision.monthPrecision;\n        } else {\n            // day precision\n            this.precision = Precision.dayPrecision;\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the date without the calendar.\n     *\n     * @returns {string}\n     */\n    getDateAsStringWithoutCalendar() {\n\n        let dateString = '(' + this.era + ') ';\n\n        switch (this.precision) {\n\n            case Precision.yearPrecision: {\n                dateString += this.year.toString();\n                break;\n            }\n\n            case Precision.monthPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month;\n                break;\n            }\n\n            case Precision.dayPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month + DateSalsah.separator + this.day;\n                break;\n            }\n\n            default: {\n                break;\n            }\n\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Returns a string representation of the date (with calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString(): string {\n\n        return this.calendar + ':' + this.getDateAsStringWithoutCalendar();\n    }\n\n}\n\n/**\n * Represents a period (with start date and end date).\n */\nexport class DateRangeSalsah {\n\n    constructor(\n        readonly start: DateSalsah,\n        readonly end: DateSalsah\n    ) {\n    }\n\n    /**\n     * Returns a string representation of the date range (with preceding calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString() {\n        return this.start.getDateAsString() + ':' + this.end.getDateAsStringWithoutCalendar();\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('StringLiteral')\nexport class StringLiteral {\n\n    @JsonProperty('value', String, false)\n    public value: string = undefined;\n\n    @JsonProperty('language', String, true)\n    public language: string = '';\n}\n","import { Injectable } from '@angular/core';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { Utils } from '../../declarations/utils';\nimport { OntologyService } from './ontology.service';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n/**\n * Represents an error occurred in OntologyCacheService.\n */\nclass OntologyCacheError extends Error {\n\n    constructor(readonly message: string) {\n        super(message);\n    }\n}\n\n\n/**\n * Represents an ontology's metadata.\n */\nexport class OntologyMetadata {\n\n    /**\n     * @hideconstructor\n     *\n     * @param {string} id Iri identifying the ontology.\n     * @param {string} label a label describing the ontology.\n     */\n    constructor(readonly id: string,\n        readonly label: string) {\n\n    }\n\n}\n\n\n/**\n * Occurrence of a property for a resource class (its cardinality).\n */\nexport enum CardinalityOccurrence {\n    minCard = 0,\n    card = 1,\n    maxCard = 2\n}\n\n\n/**\n * Cardinality of a property for the given resource class.\n */\nexport class Cardinality {\n\n    /**\n     * @param {CardinalityOccurrence} occurrence type of given occurrence.\n     * @param {number} value numerical value of given occurrence.\n     * @param {string} property the property the given occurrence applies to.\n     */\n    constructor(readonly occurrence: CardinalityOccurrence,\n        readonly value: number,\n        readonly property: string) {\n    }\n}\n/**\n * Property gui order\n */\nexport class GuiOrder {\n    /**\n     * @param  {number} value\n     * @param  {string} property\n     */\n    constructor(readonly value: number,\n        readonly property: string\n    ) {\n\n    }\n}\n\n/**\n * A resource class definition.\n */\nexport class ResourceClass {\n\n    /**\n     * @param {string} id Iri identifying the resource class.\n     * @param {string} icon path to an icon representing the resource class.\n     * @param {string} comment comment on the resource class.\n     * @param {string} label label describing the resource class.\n     * @param {Cardinality[]} cardinalities the resource class's properties.\n     * @param {GuiOrder[]} guiOrder the resource class's gui-order properties.\n     */\n    constructor(readonly id: string,\n        readonly icon: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly cardinalities: Array<Cardinality>,\n        readonly guiOrder: Array<GuiOrder>) {\n\n    }\n}\n\n\n/**\n * A map of resource class Iris to resource class definitions.\n */\nexport class ResourceClasses {\n    [index: string]: ResourceClass;\n}\n\n\n/**\n * A property definition.\n */\nexport class Property {\n\n    /**\n     * @param {string} id Iri identifying the property definition.\n     * @param {string} objectType the property's object constraint.\n     * @param {string} comment comment on the property definition.\n     * @param {string} label label describing the property definition.\n     * @param {string[]} subPropertyOf Iris of properties the given property is a subproperty of.\n     * @param {boolean} isEditable indicates whether the given property can be edited by the client.\n     * @param {boolean} isLinkProperty indicates whether the given property is a linking property.\n     * @param {boolean} isLinkValueProperty indicates whether the given property refers to a link value.\n     * @param {string} guiAttribute the gui attribute assigned to this property, if any.\n     */\n    constructor(readonly id: string,\n                readonly objectType: string,\n                readonly comment: string,\n                readonly label: string,\n                readonly subPropertyOf: Array<string>,\n                readonly isEditable: Boolean,\n                readonly isLinkProperty: Boolean,\n                readonly isLinkValueProperty: Boolean,\n                readonly guiAttribute: string[]) {\n    }\n}\n\n\n/**\n * A map of property Iris to property definitions.\n */\nexport class Properties {\n    [index: string]: Property;\n}\n\n\n/**\n * Groups resource classes by the ontology they are defined in.\n *\n * A map of ontology Iris to an array of resource class Iris.\n */\nexport class ResourceClassIrisForOntology {\n    [index: string]: Array<string>;\n}\n\n\n/**\n * Represents cached ontology information (only used by this service internally).\n * This cache is updated whenever new definitions are requested from Knora.\n *\n * Requested ontology information by a service is represented by [[OntologyInformation]].\n */\nclass OntologyCache {\n\n    /**\n     * @param {OntologyMetadata[]} ontologies An array of all existing ontologies.\n     */\n    ontologies: Array<OntologyMetadata>;\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassIrisForOntology list of all resource class Iris for a named graph.\n     */\n    resourceClassIrisForOntology: ResourceClassIrisForOntology;\n\n    /**\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     */\n    resourceClasses: ResourceClasses;\n\n    /**\n     * @param {Properties} properties property definitions.\n     */\n    properties: Properties;\n\n    constructor() {\n        this.ontologies = [];\n\n        this.resourceClassIrisForOntology = new ResourceClassIrisForOntology();\n\n        this.resourceClasses = new ResourceClasses();\n\n        this.properties = new Properties();\n    }\n}\n\n/**\n * Represents ontology information requested from this service.\n *\n * For every request, an instance of this class is returned containing the requested information.\n */\nexport class OntologyInformation {\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassesForOntology all resource class Iris for a given ontology.\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     * @param {Properties} properties property definitions.\n     */\n    constructor(\n        private resourceClassesForOntology: ResourceClassIrisForOntology,\n        private resourceClasses: ResourceClasses,\n        private properties: Properties) {\n    }\n\n    /**\n     * Sorts an array of `ResourceClass` or `Property` by label.\n     *\n     * @param a first element\n     * @param b second element\n     * @return negative -1 if the first element is considered lower than the second, 1 if the second element is considered bigger, 0 if they are equal\n     */\n    static sortFunc(a: ResourceClass | Property, b: ResourceClass | Property) {\n        // dealing with 'undefined' labels\n        if (a.label === undefined) {\n            return 1;\n        } else if (b.label === undefined) {\n            return -1;\n        }\n\n        const labelA = a.label.toLowerCase();\n        const labelB = b.label.toLowerCase();\n\n        if (labelA < labelB) {\n            return -1;\n        } else if (labelA > labelB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Merge the given [[OntologyInformation]] into the current instance,\n     * updating the existing information.\n     * This is necessary when a service like the search fetches new results\n     * that have to be added to an existing collection.\n     * The existing ontology information must not be lost.\n     *\n     * @param {OntologyInformation} ontologyInfo the given definitions that have to be integrated.\n     * @returns void\n     */\n    updateOntologyInformation(ontologyInfo: OntologyInformation): void {\n\n        // get new resourceClassIrisForOntology\n        const newResourceClassesForOntology: ResourceClassIrisForOntology = ontologyInfo.getResourceClassForOntology();\n\n        // update new resourceClassIrisForOntology\n        // tslint:disable-next-line:forin\n        for (const newResClassForOntology in newResourceClassesForOntology) {\n            this.resourceClassesForOntology[newResClassForOntology] = newResourceClassesForOntology[newResClassForOntology];\n        }\n\n        // get new resource class definitions\n        const newResourceClasses = ontologyInfo.getResourceClasses();\n\n        // update resourceClasses\n        // tslint:disable-next-line:forin\n        for (const newResClass in newResourceClasses) {\n            this.resourceClasses[newResClass] = newResourceClasses[newResClass];\n        }\n\n        // get new property definitions\n        const newProperties = ontologyInfo.getProperties();\n\n        // update properties\n        // tslint:disable-next-line:forin\n        for (const newProp in newProperties) {\n            this.properties[newProp] = newProperties[newProp];\n        }\n\n    }\n\n    /**\n     * Returns resource class definitions for ontologies.\n     *\n     * @returns ResourceClassIrisForOntology - all resource class definitions grouped by ontologies.\n     */\n    getResourceClassForOntology(): ResourceClassIrisForOntology {\n        return this.resourceClassesForOntology;\n    }\n\n    /**\n     * Returns all resource classes as an object.\n     *\n     * @returns ResourceClasses - all resource class definitions as an object.\n     */\n    getResourceClasses(): ResourceClasses {\n        return this.resourceClasses;\n    }\n\n    /**\n     * Returns all resource classes as an array.\n     *\n     * @param {boolean} sortAsc sort resource classes by label in ascending order by default\n     * @returns ResourceClass[]\n     */\n    getResourceClassesAsArray(sortAsc: boolean = true): Array<ResourceClass> {\n\n        const resClasses: Array<ResourceClass> = [];\n\n        // tslint:disable-next-line:forin\n        for (const resClassIri in this.resourceClasses) {\n            const resClass: ResourceClass = this.resourceClasses[resClassIri];\n            resClasses.push(resClass);\n        }\n\n        // resourceClasses order by label in ascending order\n        resClasses.sort(OntologyInformation.sortFunc);\n\n        // resourceClasses order by label in descending order\n        if (!sortAsc) {\n            resClasses.reverse();\n        }\n\n        return resClasses;\n\n    }\n\n    /**\n     * Returns a resource class's label.\n     *\n     * @param {string} resClass resource class to query for.\n     * @returns string - the resource class's label.\n     */\n    getLabelForResourceClass(resClass: string): string {\n\n        if (resClass !== undefined) {\n\n            const resClassDef: ResourceClass = this.resourceClasses[resClass];\n\n            if (resClassDef !== undefined && resClassDef.label !== undefined) {\n                return resClassDef.label;\n            } else {\n                console.log(`cannot get label for ${resClass}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForResourceClass without argument resClass');\n        }\n    }\n\n    /**\n     * Returns all properties as an object.\n     *\n     * @returns Properties - all properties as an object.\n     */\n    getProperties(): Properties {\n        return this.properties;\n    }\n\n    /**\n     * Returns all properties as an array.\n     *\n     * @param {boolean} sortAsc sort properties by label in ascending order by default\n     * @returns Property[] - all properties as an array.\n     */\n    getPropertiesAsArray(sortAsc: boolean = true): Array<Property> {\n\n        const properties: Array<Property> = [];\n\n        // tslint:disable-next-line:forin\n        for (const propIri in this.properties) {\n            const prop: Property = this.properties[propIri];\n            properties.push(prop);\n        }\n\n        // properties order by label in ascending order\n        properties.sort(OntologyInformation.sortFunc);\n\n        // properties order by label in descending order\n        if (!sortAsc) {\n            properties.reverse();\n        }\n\n        return properties;\n\n    }\n\n    /**\n     * Returns a property's label.\n     *\n     * @param {string} property to query for.\n     * @returns string - the property's label.\n     */\n    getLabelForProperty(property: string): string {\n\n        if (property !== undefined) {\n\n            const propDef: Property = this.properties[property];\n\n            if (propDef !== undefined && propDef.label !== undefined) {\n                return propDef.label;\n            } else {\n                console.log(`cannot get label for ${property}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForProperty without argument property');\n        }\n    }\n\n}\n\n\n/**\n * Requests ontology information from Knora and caches it.\n * Other components or services obtain ontology information through this service.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class OntologyCacheService {\n\n    /**\n     * Ontologies ingored by this service.\n     * @param {string[]} excludedOntologies\n     */\n    private excludedOntologies: Array<string> = [KnoraConstants.SalsahGuiOntology, KnoraConstants.StandoffOntology];\n\n    /**\n     * @param {string[]} excludedProperties properties that Knora is not responsible for and that have to be ignored because they cannot be resolved at the moment.\n     */\n    private excludedProperties: Array<string> = [KnoraConstants.RdfsLabel];\n\n    /**\n     * @param {string[]} nonResourceClasses class definitions that are not be treated as Knora resource classes\n     */\n    private nonResourceClasses: Array<string> = [KnoraConstants.ForbiddenResource, KnoraConstants.XMLToStandoffMapping, KnoraConstants.ListNode];\n\n    /**\n     * @param {OntologyCache} cacheOntology central instance that caches all definitions\n     */\n    private cacheOntology: OntologyCache = new OntologyCache();\n\n    constructor(private _ontologyService: OntologyService) {\n    }\n\n    /**\n     * Requests the metadata of all ontologies from Knora.\n     *\n     * @returns Observable<object> - metadata for all ontologies as JSON-LD (no prefixes, all Iris fully expanded).\n     */\n    private getOntologiesMetadataFromKnora(): Observable<object> {\n\n        return this._ontologyService.getOntologiesMetadata().pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Requests all entity definitions (resource classes and properties) for the given ontology from Knora.\n     *\n     * @param {string} ontologyIri the Iri of the requested ontology.\n     * @returns Observable<object> - metadata for all entity definitions for ontology from Knora.\n     */\n    private getAllEntityDefinitionsForOntologyFromKnora(ontologyIri: string): Observable<object> {\n\n        return this._ontologyService.getAllEntityDefinitionsForOntologies(ontologyIri).pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Writes all the ontologies' metadata returned by Knora to the cache.\n     *\n     * @param {object[]} ontologies metadata of all existing ontologies as JSON-LD.\n     * @returns a new OntologyMetadata object\n     */\n    private convertAndWriteOntologiesMetadataToCache(ontologies: object[]) {\n\n        this.cacheOntology.ontologies = ontologies.map(\n            ontology => {\n                return new OntologyMetadata(ontology['@id'], ontology[KnoraConstants.RdfsLabel]);\n            }\n        );\n    }\n\n    /**\n     * Returns all ontologies' metadata from the cache and returns them.\n     *\n     * @returns Array<OntologyMetadata> - metadata of all existing ontologies.\n     */\n    private getAllOntologiesMetadataFromCache(): Array<OntologyMetadata> {\n\n        return this.cacheOntology.ontologies;\n\n    }\n\n    /**\n     * Returns resource class Iris from the ontology response.\n     * `knora-api:Resource` will be excluded.\n     *\n     * @param {Array<object>} classDefinitions the class definitions in an ontology response.\n     * @returns string[] - resource class Iris from the given class definitions.\n     */\n    private getResourceClassIrisFromOntologyResponse(classDefinitions: Array<object>): string[] {\n        const resourceClassIris: string[] = [];\n\n        for (const classDef of classDefinitions) {\n            const classIri = classDef['@id'];\n\n            // check that class name is not listed as a non resource class and that the isResourceClass flag is present and set to true\n            if (\n                classIri !== KnoraConstants.Resource && this.nonResourceClasses.indexOf(classIri)\n                === -1 && (classDef[KnoraConstants.IsResourceClass] !== undefined && classDef[KnoraConstants.IsResourceClass] === true)) {\n                // it is not a value class, but a resource class definition\n                resourceClassIris.push(classIri);\n            }\n        }\n\n        return resourceClassIris;\n    }\n\n    /**\n     * Converts a Knora response for all entity definitions for the requested ontology\n     * into an internal representation and caches it.\n     *\n     * Knora automatically includes the property definitions referred to in the cardinalities of resource classes.\n     * If they are defined in another ontology, that ontology is requested from Knora too.\n     *\n     * @param {Object} ontology the ontology to be cached.\n     * @returns void\n     */\n    private convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology: object): void {\n\n        const graph = ontology['@graph'];\n\n        // get all class definitions\n        const classDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlClass;\n            });\n\n        // get all property definitions\n        const propertyDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlObjectProperty ||\n                    entityType === KnoraConstants.OwlDatatypeProperty ||\n                    entityType === KnoraConstants.OwlAnnotationProperty ||\n                    entityType === KnoraConstants.RdfProperty;\n            });\n\n\n        // cache all resource class Iris belonging to the current ontology\n        this.cacheOntology.resourceClassIrisForOntology[ontology['@id']] = this.getResourceClassIrisFromOntologyResponse(classDefs);\n\n        // write class and property defintions to cache\n        this.convertAndWriteEntityDefinitionsToCache(classDefs, propertyDefs);\n\n    }\n\n    /**\n     * Returns definitions for the requested ontologies from the cache.\n     *\n     * @param {string[]} ontologyIris the ontologies for which definitions should be returned.\n     * @returns Observable<OntologyInformation> - the definitions for the requested ontologies.\n     */\n    private getOntologyInformationFromCache(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const resourceClassesForOntology = new ResourceClassIrisForOntology();\n\n        // collect resource class Iris for all requested named graphs\n        let allResourceClassIris = [];\n\n        for (const ontologyIri of ontologyIris) {\n\n            if (this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined) {\n                throw new OntologyCacheError(`getResourceClassesForOntologiesFromCache: ontology not found in cache: ${ontologyIri}`);\n            }\n\n            // add information for the given ontology\n            resourceClassesForOntology[ontologyIri] = this.cacheOntology.resourceClassIrisForOntology[ontologyIri];\n\n            // add all resource class Iris of this ontology\n            allResourceClassIris = allResourceClassIris.concat(this.cacheOntology.resourceClassIrisForOntology[ontologyIri]);\n        }\n\n        // get resource class definitions for all requested ontologies\n        return this.getResourceClassDefinitions(allResourceClassIris).pipe(\n            map(\n                resClassDefs => {\n                    return new OntologyInformation(\n                        resourceClassesForOntology, resClassDefs.getResourceClasses(), resClassDefs.getProperties()\n                    );\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora ontology response into an internal representation and caches it.\n     *\n     * @param {object[]} resourceClassDefinitions the resource class definitions returned by Knora.\n     * @param {object[]} propertyClassDefinitions the property definitions returned by Knora.\n     * @returns void\n     */\n    private convertAndWriteEntityDefinitionsToCache(resourceClassDefinitions: Array<object>, propertyClassDefinitions: Array<object>): void {\n\n        // convert and cache each given resource class definition\n        for (const resClass of resourceClassDefinitions) {\n\n            const resClassIri = resClass['@id'];\n\n            // represents all cardinalities of this resource class\n            const cardinalities: Cardinality[] = [];\n            const guiOrder: GuiOrder[] = [];\n\n            if (resClass[KnoraConstants.RdfsSubclassOf] !== undefined) {\n\n                let subclassOfCollection;\n\n                // check if it is a single object or a collection\n                if (!Array.isArray(resClass[KnoraConstants.RdfsSubclassOf])) {\n                    subclassOfCollection = [resClass[KnoraConstants.RdfsSubclassOf]];\n                } else {\n                    subclassOfCollection = resClass[KnoraConstants.RdfsSubclassOf];\n                }\n\n\n\n                // get cardinalities for the properties of a resource class\n                for (const curCard of subclassOfCollection) {\n\n\n\n                    // make sure it is a cardinality (it could also be an Iri of a superclass)\n                    if (curCard instanceof Object && curCard['@type'] !== undefined && curCard['@type'] === KnoraConstants.OwlRestriction) {\n\n                        let newCard;\n\n                        // get occurrence\n                        if (curCard[KnoraConstants.OwlMinCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.minCard, curCard[KnoraConstants.OwlMinCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.card, curCard[KnoraConstants.OwlCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlMaxCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.maxCard, curCard[KnoraConstants.OwlMaxCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else {\n                            // no known occurrence found\n                            throw new TypeError(`cardinality type invalid for ${resClass['@id']} ${curCard[KnoraConstants.OwlOnProperty]}`);\n                        }\n\n                        // add cardinality\n                        cardinalities.push(newCard);\n\n                        // get gui order\n                        let newGuiOrder;\n                        if (curCard[KnoraConstants.SalsahGuiOrder] !== undefined) {\n                            newGuiOrder = new GuiOrder(curCard[KnoraConstants.SalsahGuiOrder], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                            // add gui order\n                            guiOrder.push(newGuiOrder);\n                        }\n\n\n\n                    }\n\n                }\n            }\n\n            const resClassObj = new ResourceClass(\n                resClassIri,\n                resClass[KnoraConstants.ResourceIcon],\n                resClass[KnoraConstants.RdfsComment],\n                resClass[KnoraConstants.RdfsLabel],\n                cardinalities,\n                guiOrder\n            );\n\n            // write this resource class definition to the cache object\n            this.cacheOntology.resourceClasses[resClassIri] = resClassObj;\n        }\n\n        // cache the property definitions\n        this.convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyClassDefinitions);\n    }\n\n    /**\n     * Gets information about resource classes from the cache.\n     * The answer includes the property definitions referred to by the cardinalities of the given resource classes.\n     *\n     * @param {string[]} resClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - an [[OntologyCache]] representing the requested resource classes.\n     */\n    private getResourceClassDefinitionsFromCache(resClassIris: string[]): Observable<OntologyInformation> {\n        // collect the definitions for each resource class from the cache\n\n        const resClassDefs = new ResourceClasses();\n\n        // collect the properties from the cardinalities of the given resource classes\n        const propertyIris = [];\n\n        resClassIris.forEach(\n            resClassIri => {\n                resClassDefs[resClassIri] = this.cacheOntology.resourceClasses[resClassIri];\n\n                this.cacheOntology.resourceClasses[resClassIri].cardinalities.forEach(\n                    card => {\n                        // get property definition for each cardinality\n                        propertyIris.push(card.property);\n                    }\n                );\n            });\n\n        return this.getPropertyDefinitions(propertyIris).pipe(\n            map(\n                propDefs => {\n                    return new OntologyInformation(new ResourceClassIrisForOntology(), resClassDefs, propDefs.getProperties());\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora response for ontology information about properties\n     * into an internal representation and cache it.\n     *\n     * @param {object[]} propertyDefinitionsFromKnora the property definitions returned by Knora\n     * @returns void\n     */\n    private convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyDefinitionsFromKnora: Array<object>): void {\n\n        // convert and cache each given property definition\n        for (const propDef of propertyDefinitionsFromKnora) {\n\n            const propIri = propDef['@id'];\n\n            let isEditable = false;\n            if (propDef[KnoraConstants.isEditable] !== undefined && propDef[KnoraConstants.isEditable] === true) {\n                isEditable = true;\n            }\n\n            let isLinkProperty = false;\n            if (propDef[KnoraConstants.isLinkProperty] !== undefined && propDef[KnoraConstants.isLinkProperty] === true) {\n                isLinkProperty = true;\n            }\n\n            let isLinkValueProperty = false;\n            if (propDef[KnoraConstants.isLinkValueProperty] !== undefined && propDef[KnoraConstants.isLinkValueProperty] === true) {\n                isLinkValueProperty = true;\n            }\n\n            let subPropertyOf = [];\n            if (propDef[KnoraConstants.subPropertyOf] !== undefined && Array.isArray(propDef[KnoraConstants.subPropertyOf])) {\n                subPropertyOf = propDef[KnoraConstants.subPropertyOf].map((superProp: Object) => superProp['@id']);\n            } else if (propDef[KnoraConstants.subPropertyOf] !== undefined) {\n                subPropertyOf.push(propDef[KnoraConstants.subPropertyOf]['@id']);\n            }\n\n            let objectType;\n            if (propDef[KnoraConstants.ObjectType] !== undefined) {\n                objectType = propDef[KnoraConstants.ObjectType]['@id'];\n            }\n\n            const guiAttribute = [];\n            if (propDef[KnoraConstants.SalsahGuiAttribute] !== undefined) {\n                if (Array.isArray(propDef[KnoraConstants.SalsahGuiAttribute])) {\n                    for (const attr of propDef[KnoraConstants.SalsahGuiAttribute]) {\n                        guiAttribute.push(attr);\n                    }\n                } else {\n                    guiAttribute.push(propDef[KnoraConstants.SalsahGuiAttribute]);\n                }\n            }\n\n            // cache property definition\n            this.cacheOntology.properties[propIri] = new Property(\n                propIri,\n                objectType,\n                propDef[KnoraConstants.RdfsComment],\n                propDef[KnoraConstants.RdfsLabel],\n                subPropertyOf,\n                isEditable,\n                isLinkProperty,\n                isLinkValueProperty,\n                guiAttribute\n            );\n\n        }\n\n    }\n\n    /**\n     * Returns property definitions from the cache.\n     *\n     * @param {string[]} propertyIris the property definitions to be returned.\n     * @returns OntologyInformation - requested property defintions.\n     */\n    private getPropertyDefinitionsFromCache(propertyIris: string[]): OntologyInformation {\n\n        const propertyDefs = new Properties();\n\n        propertyIris.forEach(\n            propIri => {\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return;\n                }\n\n                if (this.cacheOntology.properties[propIri] === undefined) {\n                    throw new OntologyCacheError(`getPropertyDefinitionsFromCache: property not found in cache: ${propIri}`);\n                }\n\n                propertyDefs[propIri] = this.cacheOntology.properties[propIri];\n            }\n        );\n\n        return new OntologyInformation(new ResourceClassIrisForOntology(), new ResourceClasses(), propertyDefs);\n\n    }\n\n    /**\n     * Returns metadata about all ontologies.\n     *\n     * @returns Observable<Array<OntologyMetadata>> - metadata about all ontologies.\n     */\n    public getOntologiesMetadata(): Observable<Array<OntologyMetadata>> {\n\n        if (this.cacheOntology.ontologies.length === 0) {\n            // nothing in cache yet, get metadata from Knora\n            return this.getOntologiesMetadataFromKnora().pipe(\n                map(\n                    metadata => {\n                        this.convertAndWriteOntologiesMetadataToCache(metadata['@graph'].filter((onto) => {\n                            // ignore excluded ontologies\n                            return this.excludedOntologies.indexOf(onto['@id']) === -1;\n                        }));\n                        return this.getAllOntologiesMetadataFromCache();\n                    }\n                )\n            );\n        } else {\n            // return metadata from cache\n            return of(this.getAllOntologiesMetadataFromCache());\n        }\n\n    }\n\n\n    /**\n     * Requests the requested ontologies from Knora, adding them to the cache.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be requested.\n     * @returns Observable<any[]>\n     */\n    private getAndCacheOntologies(ontologyIris: string[]): Observable<any[]> {\n\n        // array to be populated with Observables\n        const observables = [];\n\n        // do a request for each ontology\n        ontologyIris.forEach(ontologyIri => {\n            // push an Observable onto `observables`\n            observables.push(this.getAllEntityDefinitionsForOntologyFromKnora(ontologyIri).pipe(\n                map(\n                    (ontology: object) => {\n                        // write response to cache\n                        this.convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology);\n                    }\n                )\n            ));\n        });\n\n        // forkJoin returns an Observable of an array of results\n        // returned by each Observable contained in `observables`\n        // a subscription to the Observable returned by forkJoin is executed\n        // once all Observables have been completed\n        return forkJoin(observables);\n    }\n\n\n    /**\n     * Returns the entity definitions for the requested ontologies.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be queried.\n     * @returns Observable<OntologyInformation> - all ontology metadata from the cache\n     */\n    public getEntityDefinitionsForOntologies(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const ontologyIrisToQuery = ontologyIris.filter(\n            ontologyIri => {\n                // return the ontology Iris that are not cached yet\n                return this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined;\n            });\n\n        // get ontologies that are mot cached yet\n        if (ontologyIrisToQuery.length > 0) {\n\n            return this.getAndCacheOntologies(ontologyIrisToQuery).pipe(\n                mergeMap(\n                    () => {\n                        // executed once all ontologies have been cached\n                        return this.getOntologyInformationFromCache(ontologyIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getOntologyInformationFromCache(ontologyIris);\n        }\n\n    }\n\n    /**\n     * Returns the definitions for the given resource class Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * Properties contained in the cardinalities will be returned too.\n     *\n     * @param {string[]} resourceClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - the requested resource classes (including properties).\n     */\n    public getResourceClassDefinitions(resourceClassIris: string[]): Observable<OntologyInformation> {\n\n        const resClassIrisToQueryFor: string[] = resourceClassIris.filter(\n            resClassIri => {\n\n                // return the resource class Iris that are not cached yet\n                return this.cacheOntology.resourceClasses[resClassIri] === undefined;\n\n            });\n\n        if (resClassIrisToQueryFor.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing resource classes\n            const ontologyIris: string[] = resClassIrisToQueryFor.map(\n                resClassIri => {\n                    return Utils.getOntologyIriFromEntityIri(resClassIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                mergeMap(\n                    () => {\n\n                        return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n\n        }\n    }\n\n    /**\n     * Get definitions for the given property Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be returned .\n     * @returns Observable<OntologyInformation> - the requested property definitions.\n     */\n    public getPropertyDefinitions(propertyIris: string[]): Observable<OntologyInformation> {\n\n        const propertiesToQuery: string[] = propertyIris.filter(\n            propIri => {\n\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return false;\n                }\n\n                // return the property Iris that are not cached yet\n                return this.cacheOntology.properties[propIri] === undefined;\n            }\n        );\n\n        if (propertiesToQuery.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing properties\n            const ontologyIris: string[] = propertiesToQuery.map(\n                propIri => {\n                    return Utils.getOntologyIriFromEntityIri(propIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                map(\n                    results => {\n                        if (results) {\n                            return this.getPropertyDefinitionsFromCache(propertyIris);\n                        } else {\n                            throw new Error('Problem with: return this.getPropertyDefinitionsFromCache(propertyIris);');\n                        }\n                    }\n                )\n            );\n        } else {\n            return of(this.getPropertyDefinitionsFromCache(propertyIris));\n        }\n    }\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('AuthenticationResponse')\nexport class AuthenticationResponse {\n\n    @JsonProperty('token', String)\n    public token: string = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n\n@JsonObject('Project')\nexport class Project {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('shortname', String)\n    public shortname: string = undefined;\n\n    @JsonProperty('shortcode', String, true)\n    public shortcode: string = undefined;\n\n    @JsonProperty('longname', String, true)\n    public longname: string = undefined;\n\n    @JsonProperty('description', [StringLiteral], true)\n    public description: StringLiteral[] = [new StringLiteral()];\n\n    @JsonProperty('keywords', [String], true)\n    public keywords: string[] = undefined;\n\n    @JsonProperty('logo', String, true)\n    public logo: string = undefined;\n\n    @JsonProperty('institution', String, true)\n    public institution: string = undefined;\n\n    @JsonProperty('ontologies', [String])\n    public ontologies: string[] = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from '../projects/project';\n\n@JsonObject('Group')\nexport class Group {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('description', String)\n    public description: string = undefined;\n\n    @JsonProperty('project', Project, false)\n    public project: Project = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupResponse')\nexport class GroupResponse {\n\n    @JsonProperty('group', Group)\n    public group: Group = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupsResponse')\nexport class GroupsResponse {\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListInfo')\nexport class ListInfo {\n\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('projectIri', String, false)\n    public projectIri: string = undefined;\n\n    @JsonProperty('labels', [StringLiteral], true)\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral], true)\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('ListNode')\nexport class ListNode {\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('label', String, true)\n    public label: string = undefined;\n\n    @JsonProperty('children', [ListNode], true)\n    public children: ListNode[] = undefined;\n\n    @JsonProperty('level', Number, true)\n    public level: number = undefined;\n\n    @JsonProperty('position', Number, true)\n    public position: number = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\nimport { ListNode } from './list-node';\n\n@JsonObject('List')\nexport class List {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n\n    @JsonProperty('children', [ListNode], false)\n    public children: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\n\n@JsonObject('ListInfoResponse')\nexport class ListInfoResponse {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListNodeInfo')\nexport class ListNodeInfo {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListNodeInfoResponse')\nexport class ListNodeInfoResponse {\n\n    @JsonProperty('nodeinfo', ListNodeInfo, false)\n    public nodeinfo: ListNodeInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { List } from './list';\n\n@JsonObject('ListResponse')\nexport class ListResponse {\n\n    @JsonProperty('list', List, false)\n    public list: List = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListsResponse')\nexport class ListsResponse {\n\n    @JsonProperty('lists', [ListNodeInfo], false)\n    public lists: ListNodeInfo[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('OntologyInfoShort')\nexport class OntologyInfoShort {\n\n    @JsonProperty('ontologyIri', String)\n    public ontologyIri: string = undefined;\n\n    @JsonProperty('ontologyName', String)\n    public ontologyName: string = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('PermissionData')\nexport class PermissionData {\n\n    @JsonProperty('groupsPerProject', Object)\n    public groupsPerProject: any = undefined;\n\n    @JsonProperty('administrativePermissionsPerProject', Object)\n    public administrativePermissionsPerProject: any = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from '../groups/group';\nimport { PermissionData } from '../permissions/permission-data';\nimport { Project } from '../projects/project';\n\n@JsonObject('User')\nexport class User {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('email', String)\n    public email: string = undefined;\n\n    @JsonProperty('username', String)\n    public username: string = undefined;\n\n    @JsonProperty('password', String, true)\n    public password: string = undefined;\n\n    @JsonProperty('token', String, true)\n    public token: string = undefined;\n\n    @JsonProperty('givenName', String)\n    public givenName: string = undefined;\n\n    @JsonProperty('familyName', String)\n    public familyName: string = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('lang', String)\n    public lang: string = undefined;\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n    @JsonProperty('sessionId', String, true)\n    public sessionId: string = undefined;\n\n    @JsonProperty('permissions', PermissionData)\n    public permissions: PermissionData = undefined;\n\n    @JsonProperty('systemAdmin', Boolean, true)\n    public systemAdmin?: boolean = false;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from '../users/user';\n\n@JsonObject('ProjectMembersResponse')\nexport class ProjectMembersResponse {\n    @JsonProperty('members', [User])\n    public members: User[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n\n@JsonObject('ProjectResponse')\nexport class ProjectResponse {\n\n    @JsonProperty('project', Project)\n    public project: Project = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n@JsonObject('ProjectsResponse')\nexport class ProjectsResponse {\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UsersResponse')\nexport class UsersResponse {\n\n    @JsonProperty('users', [User])\n    public users: User[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UserResponse')\nexport class UserResponse {\n\n    @JsonProperty('user', User)\n    public user: User = undefined;\n}\n","import { ReadResource } from '../../../';\nimport { OntologyInformation } from '../../../../services';\nimport { KnoraConstants } from '../../knora-constants';\nimport { DateRangeSalsah, DateSalsah } from '../../shared/date';\n\n/**\n * An abstract interface representing any value object.\n */\nexport interface ReadPropertyItem {\n\n    /**\n     * The value object's Iri.\n     */\n    readonly id: string;\n\n    /**\n     * The value object's type.\n     */\n    readonly type: string;\n\n    /**\n     * The property pointing to the value object.\n     */\n    readonly propIri: string;\n\n    /**\n     * Gets the class name of the class that implements this interface.\n     *\n     * @returns {string}\n     */\n    getClassName(): string;\n\n    /**\n     * Gets the value as a string (complexity of the value possibly reduced).\n     *\n     * @returns {string}\n     */\n    getContent(): string;\n}\n\n/**\n * Abstract class representing a text value object with or without markup.\n */\nexport abstract class ReadTextValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string = KnoraConstants.TextValue;\n\n    abstract propIri: string;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a text value object without markup (mere character string).\n */\nexport class ReadTextValueAsString extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly str: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsString;\n    }\n\n    getContent() {\n        return this.str;\n    }\n}\n\n/**\n * Represents resources referred to by standoff links.\n */\nexport class ReferredResourcesByStandoffLink {\n    [index: string]: ReadResource;\n}\n\n/**\n * Represents a text value object with markup that has been turned into HTML.\n */\nexport class ReadTextValueAsHtml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly html: string, readonly referredResources: ReferredResourcesByStandoffLink) {\n        super();\n    }\n\n    /**\n     * Gets information about a resource referred to by a standoff link from a text value.\n     *\n     * @param {string} resourceIri the Iri of the referred resource.\n     * @param {OntologyInformation} ontologyInfo ontology information.\n     * @returns {string} information about the referred resource's class and its label.\n     */\n\n\n    getReferredResourceInfo(resourceIri: string, ontologyInfo: OntologyInformation) {\n        if (this.referredResources !== undefined && this.referredResources[resourceIri] !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResources[resourceIri].type);\n\n            return this.referredResources[resourceIri].label + ` (${resClassLabel})`;\n        } else {\n            return 'no information found about referred resource (target of standoff link)';\n        }\n    }\n\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsHtml;\n    }\n\n    getContent() {\n        return this.html;\n    }\n\n}\n\n/**\n * Represents a text value object with markup as XML.\n */\nexport class ReadTextValueAsXml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly xml: string, readonly mappingIri: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsXml;\n    }\n\n    getContent() {\n        return this.xml;\n    }\n\n}\n\n\n/**\n * Represents a date value object.\n */\nexport class ReadDateValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly calendar: string,\n        readonly startYear: number,\n        readonly endYear: number,\n        readonly startEra: string,\n        readonly endEra: string,\n        readonly startMonth?: number,\n        readonly endMonth?: number,\n        readonly startDay?: number,\n        readonly endDay?: number) {\n    }\n\n    readonly type = KnoraConstants.DateValue;\n\n    private separator = '/';\n\n    getDateSalsah(): DateSalsah | DateRangeSalsah {\n        if (this.startYear === this.endYear && this.startMonth === this.endMonth && this.startDay === this.endDay && this.startEra === this.endEra) {\n            // precise date\n            return new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay);\n        } else {\n            // date period\n            return new DateRangeSalsah(new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay), new DateSalsah(this.calendar, this.endEra, this.endYear, this.endMonth, this.endDay));\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadDateValue;\n    }\n\n    getContent() {\n        return this.getDateSalsah().getDateAsString();\n    }\n}\n\n/**\n * Represents a link value object (reification).\n */\nexport class ReadLinkValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly referredResourceIri: string, readonly referredResource?: ReadResource) {\n\n    }\n\n    readonly type = KnoraConstants.LinkValue;\n\n    getReferredResourceInfo(ontologyInfo: OntologyInformation) {\n        if (this.referredResource !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResource.type);\n\n            return this.referredResource.label + ` (${resClassLabel})`;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadLinkValue;\n    }\n\n    getContent() {\n        if (this.referredResource !== undefined) {\n            return this.referredResource.label;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n}\n\n/**\n * Represents an integer value object.\n */\nexport class ReadIntegerValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly integer: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntegerValue;\n    }\n\n    getContent() {\n        return this.integer.toString();\n    }\n\n}\n\n/**\n * Represents a decimal value object.\n */\nexport class ReadDecimalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly decimal: number) {\n\n    }\n\n    readonly type = KnoraConstants.DecimalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDecimalValue;\n    }\n\n    getContent() {\n        return this.decimal.toString();\n    }\n}\n\n/**\n * Represents a still image value object.\n */\nexport class ReadStillImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly imageFilename: string,\n        readonly imageServerIIIFBaseURL: string,\n        readonly imagePath: string,\n        readonly dimX: number,\n        readonly dimY: number) {\n\n        // if the image is a jpeg, it is a preview image\n        this.isPreview = imageFilename.endsWith('.jpg');\n\n    }\n\n    readonly type = KnoraConstants.StillImageFileValue;\n\n    readonly isPreview: boolean;\n\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.imagePath;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.imageServerIIIFBaseURL + '/' + this.imageFilename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadStillImageFileValue;\n    }\n\n    getContent() {\n        return this.imagePath;\n    }\n}\n\n/**\n * Represents a moving image value object.\n */\nexport class ReadMovingImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly filename: string,\n        readonly mediaServerIIIFBaseURL: string,\n        readonly path: string,\n        readonly dimX: number,\n        readonly dimY: number,\n        readonly duration: number,\n        readonly fps?: number,\n        readonly aspectRatio?: string) {\n\n    }\n\n    readonly type = KnoraConstants.MovingImageFileValue;\n\n    // preview doesn't include the video file itself\n    readonly isPreview: boolean;\n\n    /*\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.path;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.mediaServerIIIFBaseURL + '/' + this.filename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n    */\n\n    getClassName(): string {\n        return KnoraConstants.ReadMovingImageFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a text representation value object\n */\nexport class ReadTextFileValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly textFilename: string, readonly textFileURL: string) {\n\n    }\n\n    readonly type = KnoraConstants.TextFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextFileValue;\n    }\n\n    getContent() {\n        return this.textFileURL;\n    }\n\n}\n\n/**\n * Represents a color value object.\n */\nexport class ReadColorValue implements ReadPropertyItem {\n\n    constructor(readonly id: string,\n        readonly propIri,\n        readonly colorHex: string) {\n    }\n\n    readonly type = KnoraConstants.ColorValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadColorValue;\n    }\n\n    getContent() {\n        return this.colorHex;\n    }\n}\n\n/**\n * Represents a point in a 2D-coordinate system (for geometry values).\n */\nexport class Point2D {\n    constructor(public x: number, public y: number) {\n    }\n}\n\n/**\n * Represents a geometry value parsed from JSON.\n */\nexport class RegionGeometry {\n    constructor(public status: string,\n        public lineColor: string,\n        public lineWidth: number,\n        public points: Point2D[],\n        public type: string,\n        public radius?: Point2D\n    ) {\n    }\n}\n\n/**\n * Represents a geometry value object.\n */\nexport class ReadGeomValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly geometryString: string) {\n\n        const geometryJSON = JSON.parse(geometryString);\n\n        const points: Point2D[] = [];\n        for (const point of geometryJSON.points) {\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        let radius;\n        if (geometryJSON.radius) {\n            radius = new Point2D(geometryJSON.radius.x, geometryJSON.radius.y);\n        }\n\n        this.geometry = new RegionGeometry(\n            geometryJSON.status,\n            geometryJSON.lineColor,\n            geometryJSON.lineWidth,\n            points,\n            geometryJSON.type,\n            radius\n        );\n\n    }\n\n    readonly geometry: RegionGeometry;\n\n    readonly type = KnoraConstants.GeomValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadGeomValue;\n    }\n\n    getContent() {\n        return this.geometryString;\n    }\n}\n\n/**\n * Represents a URI value object.\n */\nexport class ReadUriValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly uri: string) {\n\n    }\n\n    readonly type = KnoraConstants.UriValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadUriValue;\n    }\n\n    getContent() {\n        return this.uri;\n    }\n\n}\n\n/**\n * Represents a Boolean value object.\n */\nexport class ReadBooleanValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly bool: boolean) {\n\n    }\n\n    readonly type = KnoraConstants.BooleanValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadBooleanValue;\n    }\n\n    getContent() {\n        return this.bool.toString();\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadIntervalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly intervalStart: number, readonly intervalEnd: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntervalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntervalValue;\n    }\n\n    getContent() {\n        return this.intervalStart.toString() + '-' + this.intervalEnd;\n    }\n\n}\n\n/**\n * Represents a list value object.\n */\nexport class ReadListValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly listNodeIri: string) {\n\n    }\n\n    readonly type = KnoraConstants.ListValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadListValue;\n    }\n\n    getContent() {\n        return this.listNodeIri;\n    }\n\n}\n","import { ReadProperties, StillImageRepresentation } from '../../../';\n\n/**\n * Represents a resource and its properties.\n */\nexport class ReadResource {\n\n    /**\n     *\n     * @param {string} id the resource's Iri.\n     * @param {string} type the resource's type (class).\n     * @param {string} label the resource's rdfs:label.\n     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).\n     * @param {ReadProperties} properties the resources's properties.\n     */\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        // TODO: we should use a more generic object here; or what's about incomingSequences?\n        public incomingRegions: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation\n        public incomingStillImageRepresentations: Array<ReadResource>,\n        public incomingLinks: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like media or fileRepresentation\n        public stillImageRepresentationsToDisplay: StillImageRepresentation[],\n        // TODO: the properties should be a list: Array<ReadProperties> or not?\n        public readonly properties?: ReadProperties) {\n    }\n\n}\n\n/**\n * This is a temporary class, to test a new resource setup.\n * When it works, we will merge it with the ReadResource object\n */\nexport class Resource {\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        public incomingAnnotations: Array<Resource>,\n        public incomingFileRepresentations: Array<Resource>,\n        public incomingLinks: Array<ReadResource>,\n        public fileRepresentationsToDisplay: Array<ReadResource>,\n        public readonly properties?: ReadProperties) {\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceError } from '../declarations/api-service-error';\nimport { ApiServiceResult } from '../declarations/api-service-result';\nimport { from } from 'rxjs';\nimport { KuiCoreConfigToken } from '../core.module';\nimport { KnoraConstants } from '../declarations/api/knora-constants';\n\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\nconst semver = require('semver');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport abstract class ApiService {\n\n    // if is loading, set it true;\n    // it can be used in components\n    // for progress loader element\n    loading = false;\n\n    protected constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config) {\n\n        // console.log('ApiService constructor: config', config);\n    }\n\n    /**\n     * GET\n     *\n     * @param {string} path the URL for the GET request.\n     * @param {HttpParams} params the parameters for the GET request.\n     * @returns Observable of any\n     */\n    httpGet(path: string, params?: HttpParams): Observable<any> {\n\n        this.loading = true;\n\n        return this.http.get(this.config.api + path, { observe: 'response', params: params }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(response.headers.get('Server'));\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * Processes JSON-LD returned by Knora.\n     * Expands Iris and creates an empty context object.\n     *\n     * @param {ApiServiceResult} resourceResponse\n     */\n    protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n        const resPromises = jsonld.promises;\n        // compact JSON-LD using an empty context: expands all Iris\n        const resPromise = resPromises.compact(resourceResponse.body, {});\n\n        // convert promise to Observable and return it\n        // https://www.learnrxjs.io/operators/creation/frompromise.html\n        return from(resPromise);\n\n    }\n\n    /**\n     * POST\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPost(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.post(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * PUT\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPut(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.put(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n    /**\n     * DELETE\n     *\n     * @param {string} path\n     * @returns Observable of any\n     */\n    httpDelete(path: string): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.delete(this.config.api + path, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param {HttpErrorResponse} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        // console.error(error);\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n\n    /**\n     * handle json error in case of type error in json response (json2typescript)\n     *\n     * @param {any} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n        if (error instanceof ApiServiceError) return throwError(error);\n\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = -1;\n        serviceError.statusText = 'Invalid JSON';\n        serviceError.errorInfo = error;\n        serviceError.url = '';\n        return throwError(serviceError);\n\n    }\n\n    protected compareVersion(server: string): void {\n\n        // expected knora api version\n        const expected: string = KnoraConstants.KnoraVersion;\n\n        // existing knora api version\n        if (server) {\n            const versions: string[] = server.split(' ');\n            const existing: string = versions[0].split('/')[1];\n\n            // compare the two versions: expected vs existing\n            if (semver.diff(existing, expected) === 'major') {\n                console.warn('The version of the @knora/core module works with Knora v' + expected + ', but you are using it with Knora v' + existing);\n            }\n        } else {\n            // console.warn('No server information from headers response');\n        }\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { NewOntology } from '../../declarations/api/v2/ontology/new-ontology';\nimport { ApiService } from '../api.service';\n\n/**\n * Requests ontology information from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------\n\n    /**\n     * DEPRECATED: You should use getAllOntologies()\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getOntologiesMetadata(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getAllOntologies(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the ontologies of a specific project\n     *\n     * @param projectIri\n     * @returns Observable<ApiServiceResult> - the metadata of project ontologies.\n     */\n    getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // GET ontology\n    // ------------------------------------------------------------------------\n\n    /**\n     * Requests all entity definitions for the given ontologies from Knora's ontologies route.\n     *\n     * @param {string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.\n     * @returns Observable<ApiServiceResult> - the requested ontology.\n     */\n    getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n    }\n\n    /**\n     * Requests information about the given resource classes from Knora's ontologies route.\n     *\n     * @param {string[]} resourceClassIris the Iris of the resource classes to be queried.\n     * @returns Observable<ApiServiceResult> - the requested resource class definitions.\n     */\n    getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n        if (resourceClassIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n        }\n\n        let resClassUriEnc = '';\n\n        resourceClassIris.forEach(function (resClassIri) {\n            resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n    }\n\n    /**\n     * Requests properties from Knora's ontologies route.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be queried.\n     * @returns Observable<ApiServiceResult> - the requested properties.\n     */\n    getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n        if (propertyIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n        }\n\n        let propertiesUriEnc = '';\n\n        propertyIris.forEach(function (resClassIri) {\n            propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new ontology.\n     *\n     * @param {NewOntology} data Data contains: projectIri, name, label\n     * @returns Observable<ApiServiceResult>\n     */\n    createOntology(data: NewOntology): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies';\n\n        const ontology = {\n            'knora-api:ontologyName': data.name,\n            'knora-api:attachedToProject': {\n                '@id': data.projectIri,\n            },\n            'rdfs:label': data.label,\n            '@context': {\n                'rdfs': KnoraConstants.RdfsSchema,\n                'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n            }\n        };\n\n        return this.httpPost(path, ontology).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { ReadResource } from './read-resource';\nimport { OntologyInformation } from '../../../../services/v2/ontology-cache.service';\n\n/**\n * Represents a sequence of resources.\n */\nexport class ReadResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `ReadResource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<ReadResource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor (public readonly resources: Array<ReadResource>, public readonly numberOfResources: number) {\n    }\n\n}\n","/**\n * Represents the result of a count query.\n */\nexport class CountQueryResult {\n\n    /**\n     *\n     * @param numberOfResults total number of results for a query.\n     */\n    constructor(public readonly numberOfResults: number) {\n\n    }\n}\n","import { ReadStillImageFileValue } from '../../../';\nimport { ImageRegion } from './image-region';\n\n/**\n * Represents an image including its regions.\n */\n\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param {ReadStillImageFileValue} stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param {ImageRegion[]} regions the regions belonging to the image.\n     */\n    constructor(readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: ImageRegion[]) {\n\n    }\n\n}\n","import { ReadGeomValue, ReadResource } from '../../../';\nimport { KnoraConstants } from '../../knora-constants';\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\n\nexport class ImageRegion {\n\n    /**\n     *\n     * @param {ReadResource} regionResource a resource of type Region\n     */\n    constructor(readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns {ReadGeomValue[]}\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, Group, GroupResponse, GroupsResponse } from '../../declarations/';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about group from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupsService extends ApiService {\n\n    private path: string = '/admin/groups';\n\n    /**\n     * Return a list of all groups.\n     *\n     * @returns Observable<Group[]>\n     */\n    getAllGroups(): Observable<Group[]> {\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a group object (filter by IRI).\n     *\n     * @param {string} iri\n     * @returns Observable<Group>\n     */\n    getGroupByIri(iri: string): Observable<Group> {\n        this.path += '/' + encodeURIComponent(iri);\n\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupResponse).group),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n    ApiServiceResult,\n    List,\n    ListCreatePayload,\n    ListInfo,\n    ListInfoResponse,\n    ListInfoUpdatePayload,\n    ListNodeInfo,\n    ListNodeInfoResponse,\n    ListResponse,\n    ListsResponse\n} from '../../declarations';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about lists from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all lists.\n     *\n     * @param {string} [projectIri]\n     * @returns Observable<ListNodeInfo[]>\n     */\n    getLists(projectIri?: string): Observable<ListNodeInfo[]> {\n        if (projectIri) {\n            this.path += '?projectIri=' + encodeURIComponent(projectIri);\n        }\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list object.\n     *\n     * @param {string} listIri\n     * @returns Observable<List>\n     */\n    getList(listIri: string): Observable<List> {\n        return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list info object.\n     *\n     * @param {string} listIri\n     * @returns Observable<ListInfo>\n     */\n    getListInfo(listIri: string): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(listIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list node info object.\n     *\n     * @param {string} nodeIri\n     * @returns Observable<ListNodeInfo>\n     */\n    getListNodeInfo(nodeIri: string): Observable<ListNodeInfo> {\n        this.path += '/nodes/' + encodeURIComponent(nodeIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeInfoResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new list.\n     *\n     * @param {ListCreatePayload} payload\n     * @returns Observable<List>\n     */\n    createList(payload: ListCreatePayload): Observable<List> {\n        return this.httpPost(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit list data.\n     *\n     * @param {ListInfoUpdatePayload} payload\n     * @returns Observable<ListInfo>\n     */\n    updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(payload.listIri);\n        return this.httpPut(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { ApiServiceResult, Project, ProjectMembersResponse, ProjectResponse, ProjectsResponse, User } from '../../declarations/';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about projects from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all projects.\n     *\n     * @returns Observable<Project[]>\n     */\n    getAllProjects(): Observable<Project[]> {\n        return this.httpGet('/admin/projects').pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    getProjectByIri(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortname(shortname: string): Observable<Project> {\n        const url = '/admin/projects/shortname/' + shortname;\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortcode(shortcode: string): Observable<Project> {\n        const url = '/admin/projects/shortcode/' + shortcode;\n        return this.getProject(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<Project>\n     */\n    protected getProject(url: string): Observable<Project> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is project id (iri).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByIri(iri: string): Observable<User[]> {\n        const url = '/admin/projects/iri/' + encodeURIComponent(iri) + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortname.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortname(shortname: string): Observable<User[]> {\n        const url = '/admin/projects/shortname/' + shortname + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortcode.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n        const url = '/admin/projects/shortcode/' + shortcode + '/members';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project member retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<User[]>\n     */\n     private getProjectMembers(url: string): Observable<User[]> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new project.\n     *\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    createProject(data: any): Observable<Project> {\n        const url: string = '/admin/projects';\n        return this.httpPost(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit project data.\n     *\n     * @param {string} iri identifier of the project\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    updateProject(iri: string, data: any): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate project (if it was deleted).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    activateProject(iri: string): Observable<Project> {\n        const data: any = {\n            status: true\n        };\n\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete (set inactive) project.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    deleteProject(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpDelete(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../api.service';\nimport {\n    ApiServiceResult,\n    Group,\n    GroupsResponse,\n    User,\n    UserResponse,\n    UsersResponse\n} from '../../declarations/';\n\n/**\n * This service uses the Knora admin API and handles all user data.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all users.\n     *\n     * @returns Observable<User[]>\n     */\n    getAllUsers(): Observable<User[]> {\n        return this.httpGet('/admin/users').pipe(\n            map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by username, email or by iri.\n     * @ignore\n     *\n     * @param  {string} identifier username, email or by iri\n     * @param  {String} identifierType\n     * @returns Observable<User>\n     */\n    private getUser(identifier: string, identifierType: String): Observable<User> {\n        const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by IRI\n     *\n     * @param  {string} iri\n     * @returns Observable<User>\n     */\n    getUserByIri(iri: string): Observable<User> {\n        return this.getUser(iri, 'iri');\n    }\n\n    /**\n     * Get user by email\n     *\n     * @param  {string} email\n     * @returns Observable<User>\n     */\n    getUserByEmail(email: string): Observable<User> {\n        return this.getUser(email, 'email');\n    }\n\n    /**\n     * Get user by username.\n     *\n     * @param  {string} username\n     * @returns Observable<User>\n     */\n    getUserByUsername(username: string): Observable<User> {\n        return this.getUser(username, 'username');\n    }\n\n    /**\n     * Get all groups, where the user is member of\n     *\n     * @param  {string} userIri\n     * @returns Observable<Group[]>\n     */\n    getUsersGroupMemberships(userIri: string): Observable<Group[]> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new user.\n     *\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    createUser(data: any): Observable<User> {\n        const path = '/admin/users';\n        return this.httpPost(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Remove user from project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Delete user from the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    addUserToGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    /**\n     * remove user from project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    removeUserFromGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n\n    /**\n     * Add user to the admin system.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    addUserToSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': true\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n\n    }\n\n    /**\n     * Remove user from the admin system.\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    removeUserFromSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': false\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n    }\n\n    /**\n     * Update user system admin membership\n     * @ignore\n     *\n     * @param {string} userIri\n     * @param {any} data\n     *\n     * @returns Observable<User>\n     */\n    private updateUserSystemAdmin(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    activateUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';\n\n        const data: any = {\n            status: true\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Update own password.\n     *\n     * @param {string} userIri\n     * @param {string} oldPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: oldPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update password of another user (not own).\n     *\n     * @param {string} userIri\n     * @param {string} requesterPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: requesterPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update basic user information: given name, family name\n     * @param userIri\n     * @param data\n     * @returns Observable<User>\n     */\n    updateBasicUserInformation(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete / deactivate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    deleteUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  private subject = new Subject<any>();\n\n  setLanguage(lang: string) {\n    this.subject.next({ var: lang });\n  }\n  getLanguage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KuiCoreConfig } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusMsgService {\n\n  constructor(private _http: HttpClient,\n    @Inject(KuiCoreConfigToken) public config) {\n  }\n\n  /**\n  * this method get the status messages from the statusMsg.json file\n  * which are defined here: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  * and here: http://www.w3schools.com/tags/ref_httpmessages.asp\n  *\n  */\n  getStatusMsg(): Observable<any> {\n\n    return this._http.get(this.config.app + '/assets/i18n/statusMsg.json')\n      .pipe(map(\n        (res: any) => {\n          return res;\n        },\n        err => {\n          console.error(err);\n        }\n      )\n      );\n\n  }\n}\n","import {\n    CountQueryResult,\n    KnoraConstants,\n    ReadBooleanValue,\n    ReadColorValue,\n    ReadDateValue,\n    ReadDecimalValue,\n    ReadGeomValue,\n    ReadIntegerValue,\n    ReadIntervalValue,\n    ReadLinkValue,\n    ReadListValue,\n    ReadProperties,\n    ReadPropertyItem,\n    ReadResource,\n    ReadResourcesSequence,\n    ReadStillImageFileValue,\n    ReadTextFileValue,\n    ReadTextValueAsHtml,\n    ReadTextValueAsString,\n    ReadTextValueAsXml,\n    ReadUriValue,\n    ReferredResourcesByStandoffLink,\n    Utils\n} from '../../declarations';\n\n/**\n * Contains methods to convert JSON-LD representing resources and properties to classes.\n * These methods works only for instances of resources and properties, not for ontologies (data model).\n */\nexport module ConvertJSONLD {\n\n    /**\n     * Function to be passed to a filter used on an array of property names\n     * sorting out all non value property names.\n     *\n     * Gets all property names that refer to value objects.\n     *\n     * @param propName the name of a property to be checked.\n     * @returns boolean - indicating if the name refers to a value property.\n     */\n    const getPropertyNames = (propName) => {\n        return propName !== '@id'\n            && propName !== '@type'\n            && propName !== KnoraConstants.RdfsLabel\n            && propName !== KnoraConstants.attachedToProject\n            && propName !== KnoraConstants.attachedToUser\n            && propName !== KnoraConstants.creationDate\n            && propName !== KnoraConstants.lastModificationDate\n            && propName !== KnoraConstants.hasPermissions\n            && propName !== KnoraConstants.userHasPermission\n            && propName !== KnoraConstants.ArkUrl\n            && propName !== KnoraConstants.versionArkUrl;\n    };\n\n\n    /**\n     * Constructs a [[ReadResource]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an a resource and its properties serialized as JSON-LD.\n     * @returns ReadResource\n     */\n    function constructReadResource(resourceJSONLD: object): ReadResource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new ReadResource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            properties\n        );\n    }\n\n    /**\n     * Constructs a [[ReadPropertyItem]] from JSON-LD,\n     * taking into account the property's value type.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {Object} propValue the value serialized as JSON-LD.\n     * @param {string} propIri the Iri of the property.\n     * @param {ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.\n     * @returns a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.\n     */\n    function createValueSpecificProp(\n        propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n        // convert a JSON-LD property value to a `ReadPropertyItem`\n\n        let valueSpecificProp: ReadPropertyItem;\n\n        // check for the property's value type\n        switch (propValue['@type']) {\n            case KnoraConstants.TextValue:\n                // a text value might be given as plain string, html or xml.\n                let textValue: ReadPropertyItem;\n\n                if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                    textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n                } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                    const referredResources: ReferredResourcesByStandoffLink = {};\n\n                    // check for standoff links and include referred resources, if any\n                    // when the user interacts with a standoff link, further information about the referred resource can be shown\n                    for (const standoffLink of standoffLinkValues) {\n                        const referredRes: ReadResource = standoffLink.referredResource;\n                        referredResources[referredRes.id] = referredRes;\n                    }\n\n                    textValue = new ReadTextValueAsHtml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                    );\n                } else if (\n                    propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                    textValue = new ReadTextValueAsXml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                    );\n                } else {\n                    // expected text value members not defined\n                    console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n                }\n\n                valueSpecificProp = textValue;\n                break;\n\n            case KnoraConstants.DateValue:\n                const dateValue = new ReadDateValue(propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.dateValueHasCalendar],\n                    propValue[KnoraConstants.dateValueHasStartYear],\n                    propValue[KnoraConstants.dateValueHasEndYear],\n                    propValue[KnoraConstants.dateValueHasStartEra],\n                    propValue[KnoraConstants.dateValueHasEndEra],\n                    propValue[KnoraConstants.dateValueHasStartMonth],\n                    propValue[KnoraConstants.dateValueHasEndMonth],\n                    propValue[KnoraConstants.dateValueHasStartDay],\n                    propValue[KnoraConstants.dateValueHasEndDay]);\n\n                valueSpecificProp = dateValue;\n                break;\n\n            case KnoraConstants.LinkValue:\n\n                let linkValue: ReadLinkValue;\n\n                // check if the referred resource is given as an object or just as an IRI\n                if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                    // linkValueHasTarget contains the object\n\n                    const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n                } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                    // linkValueHasTargetIri contains the resource's Iri\n\n                    const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n                } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // linkValueHasSource contains the object\n\n                    const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n                } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                    // linkValueHasSourceIri contains the resource's Iri\n\n                    const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n                }\n\n                valueSpecificProp = linkValue;\n                break;\n\n            case KnoraConstants.IntValue:\n\n                const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n                valueSpecificProp = intValue;\n\n                break;\n\n            case KnoraConstants.DecimalValue:\n\n                // a decimal value is represented as a string in order to preserve its precision\n                const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n                const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n                valueSpecificProp = decimalValue;\n\n                break;\n\n            // TODO: handle movingImageFileValue and the others here...\n            case KnoraConstants.StillImageFileValue:\n\n                const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.stillImageFileValueHasDimX],\n                    propValue[KnoraConstants.stillImageFileValueHasDimY]\n                );\n\n                valueSpecificProp = stillImageFileValue;\n\n                break;\n\n            case KnoraConstants.TextFileValue:\n\n                const textFileValue = new ReadTextFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = textFileValue;\n\n                break;\n\n            case KnoraConstants.ColorValue:\n\n                const readColorValue: ReadColorValue = new ReadColorValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.colorValueAsColor]\n                );\n\n                valueSpecificProp = readColorValue;\n\n                break;\n\n            case KnoraConstants.GeomValue:\n\n                const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.geometryValueAsGeometry]\n                );\n\n                valueSpecificProp = readGeomValue;\n\n                break;\n\n            case KnoraConstants.UriValue:\n\n                const uriValue: ReadUriValue = new ReadUriValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.uriValueAsUri]['@value']\n                );\n\n                valueSpecificProp = uriValue;\n\n                break;\n\n            case KnoraConstants.BooleanValue:\n\n                const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.booleanValueAsBoolean]\n                );\n\n                valueSpecificProp = boolValue;\n\n                break;\n\n\n            case KnoraConstants.IntervalValue:\n\n                // represented as strings to preserve precision\n                const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n                const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n                const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                    propValue['@id'],\n                    propIri,\n                    intStart,\n                    intEnd\n                );\n\n                valueSpecificProp = intervalValue;\n\n                break;\n\n            case KnoraConstants.ListValue:\n\n                const listValue: ReadListValue = new ReadListValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.listValueAsListNode]['@id']\n                );\n\n                valueSpecificProp = listValue;\n\n                break;\n\n            default:\n                // unsupported value type\n                console.error('ERROR: value type not implemented yet: ' + propValue['@type'] + '(' + propValue['@id'] + ')');\n                break;\n        }\n\n        return valueSpecificProp;\n\n    }\n\n\n    /**\n     * Construct a [[ReadProperties]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an object describing the resource and its properties.\n     * @returns ReadProperties\n     */\n    function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n        // JSON-LD representing standoff link values\n        // text values may contain standoff links\n        const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n        // to be populated with standoff link values\n        const standoffLinkValues: ReadLinkValue[] = [];\n\n        // convert each standoff link value JSON-LD object to a ReadLinkValue\n        // in order populate the collection with all the standoff link values\n        if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n            for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n                const standoffVal: ReadLinkValue = createValueSpecificProp(\n                    standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n                ) as ReadLinkValue;\n\n                standoffLinkValues.push(standoffVal);\n            }\n        } else if (standoffLinkValuesJSONLD !== undefined) {\n            const standoffVal = createValueSpecificProp(\n                standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n\n        let propNames = Object.keys(resourceJSONLD);\n\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const properties: ReadProperties = {};\n\n        // iterate over all the given property names\n        for (const propName of propNames) {\n\n            const propValues: Array<ReadPropertyItem> = [];\n\n            // either an array of values or just one value is given\n            if (Array.isArray(resourceJSONLD[propName])) {\n                // array of values\n\n                // for each property name, an array of property values is given, iterate over it\n                for (const propValue of resourceJSONLD[propName]) {\n\n                    // convert a JSON-LD property value to a `ReadPropertyItem`\n                    const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                    // if it is undefined, the value could not be constructed correctly\n                    // add the property value to the array of property values\n                    if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n                }\n            } else {\n                // only one value\n\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n            }\n\n            // add the property to the properties object\n            properties[propName] = propValues;\n\n        }\n\n        return properties;\n    }\n\n    /**\n     * Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.\n     * @returns ReadResourcesSequence - sequence of read resources\n     */\n    export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n        const resources: Array<ReadResource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ReadResourcesSequence(resources, numberOfResources);\n\n    }\n\n    /**\n     * Collects all the types (classes) of referred resources from a given resource (from its linking properties).\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD JSON-LD describing one resource.\n     * @return string[] - an Array of resource class Iris (including duplicates).\n     */\n    function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n        let propNames = Object.keys(resourceJSONLD);\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const referredResourceClasses = [];\n\n        for (const prop of propNames) {\n\n            // several values given for this property\n            if (Array.isArray(resourceJSONLD[prop])) {\n\n                for (const referredRes of resourceJSONLD[prop]) {\n\n                    // if the property is a LinkValue and it contains an embedded resource, get its type\n                    if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                        // target resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                    } else if (\n                        referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                        // source resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                    }\n\n                }\n            } else {\n                // only one value given for this property\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                    !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                    !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n                }\n            }\n\n        }\n\n        return referredResourceClasses;\n\n    }\n\n    /**\n     * Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.\n     * @returns string[] - the resource class Iris (without duplicates).\n     */\n    export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n        let resourceClasses: Array<string> = [];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n\n            for (const resourceJSONLD of resourcesGraph) {\n                // get class of the current resource\n                resourceClasses.push(resourceJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n            }\n\n        } else {\n            // only one resource\n\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                return [];\n            } else {\n                resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n            }\n        }\n\n        // filter out duplicates\n        return resourceClasses.filter(Utils.filterOutDuplicates);\n\n    }\n\n    /**\n     * Turns a JSON-LD response to a count query into a `CountQueryResult`.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param countQueryJSONLD\n     * @returns {CountQueryResult}\n     */\n    export function createCountQueryResult(countQueryJSONLD: object) {\n        return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceError, ApiServiceResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\n/**\n * Requests representation of resources from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns Observable<ApiServiceResult>\n     */\n    getResource(iri): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource as a `ReadResourceSequence`.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        // TODO: handle case of an ApiServiceError\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n    // TODO: post, put, delete\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceResult, CountQueryResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\nexport interface FulltextSearchParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n\n    limitToStandoffClass?: string;\n}\n\nexport interface SearchByLabelParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n}\n\n/**\n * Performs searches (fulltext or extended) and search count queries into Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor(public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Assign fulltext search params to http params.\n     *\n     * @param {FulltextSearchParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processFulltextSearchParams(params: FulltextSearchParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToStandoffClass !== undefined) {\n            searchParams = searchParams.set('limitToStandoffClass', params.limitToStandoffClass);\n        }\n\n        return searchParams;\n\n    }\n    /**\n     * Assign search by label search params to http params.\n     *\n     * @param {SearchByLabelParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processSearchByLabelParams(params: SearchByLabelParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        return searchParams;\n\n    }\n\n    /**\n     * Converts a JSON-LD object to a `ReadResorceSequence`.\n     * To be passed as a function pointer (arrow notation required).\n     *\n     * @param {Object} resourceResponse\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ReadResourceSequence\n        const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ReadResourceSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search.\n     * TODO: mark as deprecated, use of `doFullTextSearchReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearch(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ReadResourcesSequence> {\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res: Observable<any> = this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search count query.\n     * TODO: mark as deprecated, use of `doFullTextSearchCountQueryCountQueryResult` recommended\n     *\n     * @param searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearchCountQuery(searchTerm: string, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<CountQueryResult>\n     */\n    doFullTextSearchCountQueryCountQueryResult(searchTerm: string, params?: FulltextSearchParams): Observable<CountQueryResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        return this.httpPost('/v2/searchextended', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search count query.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param {string} gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label.\n     * TODO: mark as deprecated, use of `searchByLabelReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabel(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        // httpGet() expects only one argument, not 2\n        return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label and turns the results in a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabelReadResourceSequence(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ReadResourcesSequence> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { ReadResourcesSequence } from '../../declarations';\n\n/**\n * Requests incoming information (regions, links, stillImageRepresentations) from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IncomingService extends SearchService {\n\n    /**\n    * Returns all incoming regions for a particular resource.\n    *\n    * @param {string} resourceIRI the Iri of the resource whose Incoming regions should be returned.\n    * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n    * @returns {Observable<any>}\n    */\n    getIncomingRegions(resourceIRI: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n        // console.log('sparqlQueryStr ', sparqlQueryStr);\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n    /**\n     * Returns all the StillImageRepresentations for the given resource, if any.\n     * StillImageRepresentations link to the given resource via knora-base:isPartOf.\n     *\n     * @param {string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n\n    }\n\n\n    /**\n     * Returns all incoming links for the given resource Iri but incoming regions and still image representations.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinksForResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n/**\n * Represents the parameters of an extended search.\n */\nexport class ExtendedSearchParams {\n\n    /**\n     *\n     * @param generateGravsearch a function that generates a Gravsearch query.\n     *\n     *                           The function takes the offset\n     *                           as a parameter and returns a Gravsearch query string.\n     *                           Returns false if not set correctly (init state).\n     */\n    constructor(public generateGravsearch: (offset: number) => string | boolean) {\n\n    }\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\n/**\n * Temporarily stores the parameters of an extended search.\n */\nexport class SearchParamsService {\n\n    private _currentSearchParams;\n\n    constructor() {\n        // init with a dummy function that returns false\n        // if the application is reloaded, this will be returned\n        this._currentSearchParams = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => false));\n    }\n\n    /**\n     * Updates the parameters of an extended search.\n     *\n     * @param {ExtendedSearchParams} searchParams\n     * @returns void\n     */\n    changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n        this._currentSearchParams.next(searchParams);\n    }\n\n    /**\n     * Gets the search params of an extended search.\n     *\n     * @returns ExtendedSearchParams - search parameters\n     */\n    getSearchParams(): ExtendedSearchParams {\n        return this._currentSearchParams.getValue();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExtendedSearchParams, SearchParamsService } from './search-params.service';\nimport { KnoraConstants, KnoraSchema } from '../../declarations';\nimport { PropertyWithValue } from '../../declarations/api/operators';\n\n/**\n * Create GravSearch queries from provided parameters.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GravsearchGenerationService {\n\n    /**\n     * @ignore\n     *\n     * Map of complex knora-api value types to simple ones.\n     * Use computed property name: http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer.\n     */\n    public static typeConversionComplexToSimple = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.xsdInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.xsdDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.xsdBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.xsdString,\n        'http://api.knora.org/ontology/knora-api/v2#DateValue': KnoraConstants.dateSimple,\n        'http://api.knora.org/ontology/knora-api/v2#IntervalValue': KnoraConstants.intervalSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeomValue': KnoraConstants.geomSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ColorValue': KnoraConstants.colorSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeonameValue': KnoraConstants.geonameSimple,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.xsdUri,\n        'http://api.knora.org/ontology/knora-api/v2#StillImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#FileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DDDFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#AudioFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DocumentFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#TextFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listNodeSimple\n    };\n\n    public static complexTypeToProp = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.integerValueAsInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.decimalValueAsDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.booleanValueAsBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.valueAsString,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.uriValueAsUri,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listValueAsListNode\n    };\n\n    constructor(private _searchParamsService: SearchParamsService) { }\n\n    /**\n     * Generates a Gravsearch query from the provided arguments.\n     *\n     * @param {PropertyWithValue[]} properties the properties specified by the user.\n     * @param {string} [mainResourceClassOption] the class of the main resource, if specified.\n     * @param {number} offset the offset to be used (nth page of results).\n     * @returns string - a KnarQL query string.\n     */\n    createGravsearchQuery(properties: PropertyWithValue[], mainResourceClassOption?: string, offset: number = 0): string {\n\n        // class restriction for the resource searched for\n        let mainResourceClass = '';\n\n        // if given, create the class restriction for the main resource\n        if (mainResourceClassOption !== undefined) {\n            mainResourceClass = `?mainRes a <${mainResourceClassOption}> .`;\n        }\n\n        // criteria for the order by statement\n        const orderByCriteria = [];\n\n        // statements to be returned in query results\n        const returnStatements = [];\n\n        // loop over given properties and create statements and filters from them\n        const props: string[] = properties.map(\n            (propWithVal: PropertyWithValue, index: number) => {\n\n                // represents the object of a statement\n                let propValue;\n                if (!propWithVal.property.isLinkProperty || propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Exists') {\n                    // it is not a linking property, create a variable for the value (to be used by a subsequent FILTER)\n                    // OR the comparison operator Exists is used in which case we do not need to specify the object any further\n                    propValue = `?propVal${index}`;\n                } else {\n                    // it is a linking property and the comparison operator is not Exists, use its IRI\n                    propValue = propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex);\n                }\n\n                // generate statement\n                let statement: string = `?mainRes <${propWithVal.property.id}> ${propValue} .`;\n\n                // check if it is a linking property that has to be wrapped in a FILTER NOT EXISTS (comparison operator NOT_EQUALS) to negate it\n                if (propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                    // do not include statement in results, because the query checks for the absence of this statement\n                    statement = `FILTER NOT EXISTS {\n${statement}\n\n\n}`;\n                } else {\n                    // TODO: check if statement should be returned returned in results (Boolean flag from checkbox)\n                    returnStatements.push(statement);\n                    statement = `\n${statement}\n\n\n`;\n                }\n\n                // generate restricting expression (e.g., a FILTER) if comparison operator is not Exists\n                let restriction: string = '';\n                // only create a FILTER if the comparison operator is not EXISTS and it is not a linking property\n                if (!propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() !== 'Exists') {\n                    // generate variable for value literal\n                    const propValueLiteral = `${propValue}Literal`;\n\n                    if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Like') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use regex function for LIKE\n                        restriction += `FILTER regex(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}, \"i\")`;\n                    } else if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Match') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use contains function for MATCH\n                        restriction += `FILTER <${KnoraConstants.matchFunction}>(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.DateValue) {\n                        // handle date property\n                        restriction = `FILTER(knora-api:toSimpleDate(${propValue}) ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.ListValue) {\n                        // handle list node\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}` + '\\n';\n                        // check for comparison operator \"not equals\"\n                        if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                            restriction = `FILTER NOT EXISTS {\n                                ${restriction}\n                            }`;\n                        }\n                    } else {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // generate filter expression\n                        restriction += `FILTER(${propValueLiteral} ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    }\n                }\n\n                // check if current value is a sort criterion\n                if (propWithVal.isSortCriterion) orderByCriteria.push(propValue);\n\n                return `${statement}\n${restriction}\n`;\n\n            });\n\n        let orderByStatement = '';\n\n        if (orderByCriteria.length > 0) {\n            orderByStatement = `\nORDER BY ${orderByCriteria.join(' ')}\n`;\n        }\n\n        // template of the Gravsearch query with dynamic components\n        const gravsearchTemplate = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/v2#>\nCONSTRUCT {\n\n?mainRes knora-api:isMainResource true .\n\n${returnStatements.join('\\n')}\n\n} WHERE {\n\n?mainRes a knora-api:Resource .\n\n${mainResourceClass}\n\n${props.join('')}\n\n}\n${orderByStatement}`;\n\n        // offset component of the Gravsearch query\n        const offsetTemplate = `\nOFFSET ${offset}\n`;\n\n        // function that generates the same KnarQL query with the given offset\n        const generateGravsearchQueryWithCustomOffset = (localOffset: number): string => {\n            const offsetCustomTemplate = `\nOFFSET ${localOffset}\n`;\n\n            return gravsearchTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another KnarQL query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(new ExtendedSearchParams(generateGravsearchQueryWithCustomOffset));\n        }\n\n\n        return gravsearchTemplate + offsetTemplate;\n\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KuiCoreConfig, RdfDataObject, ResetTriplestoreContentResponse } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor(private http: HttpClient, @Inject(KuiCoreConfigToken) public config) { }\n\n  /**\n     * Resets the content of the triplestore.\n     *\n     * @param rdfDataObjects\n     * @returns Observable<string>\n     */\n  resetTriplestoreContent(rdfDataObjects: RdfDataObject[]): Observable<string> {\n\n    return this.http.post<ResetTriplestoreContentResponse>(this.config.api + '/admin/store/ResetTriplestoreContent', rdfDataObjects)\n      .pipe(\n        map(\n          (data) => {\n            const result: ResetTriplestoreContentResponse = data;\n            // console.log('StoreService - resetTriplestoreContent: ', result);\n            return result.message;\n          },\n          (error: HttpErrorResponse) => {\n            if (error.error instanceof Error) {\n              console.log('StoreService - resetTriplestoreContent - Client-side error occurred.', error);\n            } else {\n              console.log('StoreService - resetTriplestoreContent - Server-side error occurred.', error);\n            }\n            throw error;\n          }\n        ));\n\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicOntologyService extends ApiService {\n\n  /**\n     * returns our list of a basic ontology\n     *\n     * @returns {Observable<any>}\n     */\n  // getBasicOntology(): Observable<any> {\n  //     let url = environment.url;\n  //     return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  // }\n  getBasicOntology(): Observable<any> {\n    const url = this.config.app;\n    return this.httpGet(url + '/data/base-data/basic-ontology.json');\n    // return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceTypesService extends ApiService {\n\n  /**\n     * Get all resource types defined by the vocabulary.\n     *\n     * @param {string} iri Vocabulary iri\n     * @returns Observable<any>\n     */\n  getResourceTypesByVoc(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes?vocabulary=' + encodeURIComponent(iri));\n  }\n\n  /**\n   * Get a specific resource type.\n   *\n   * @param {string} iri resource type iri\n   * @returns Observable<any>\n   */\n  getResourceType(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes/' + encodeURIComponent(iri));\n  }\n\n\n  // putResourceType(iri)\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiServiceError, ApiServiceResult } from '../../declarations';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject(KuiCoreConfigToken) public config) {\n        super(http, config);\n    }\n\n    /**\n     * Gets a hierarchical list from Knora.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListFromKnora(rootNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/lists/' + encodeURIComponent(rootNodeIri));\n    }\n\n    /**\n     * Returns a list as expanded JSON-LD.\n     *\n     * @param {string} rootNodeIri the root node of the list.\n     * @return {Observable<object>} the expanded JSON-LD.\n     */\n    getList(rootNodeIri: string): Observable<object> {\n        const listJSONLD = this.getListFromKnora(rootNodeIri);\n\n        return listJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n\n    /**\n     * Gets a list node from Knora.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListNodeFromKnora(listNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/node/' + encodeURIComponent(listNodeIri));\n    }\n\n    /**\n     * Returns a list node as expanded JSON-LD.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<object> {\n\n        const listNodeJSONLD = this.getListNodeFromKnora(listNodeIri);\n\n        return listNodeJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ListService } from './list.service';\n\n/**\n * Represents a list node v2.\n */\nexport class ListNodeV2 {\n\n    readonly children: ListNodeV2[];\n\n    readonly isRootNode: boolean;\n\n    constructor(readonly id: string, readonly label: string, readonly position?: number, readonly hasRootNode?: string) {\n\n        // if hasRootNode is not given, this node is the root node.\n        this.isRootNode = (hasRootNode === undefined);\n\n        this.children = [];\n    }\n}\n\nclass ListCache {\n\n    [index: string]: ListNodeV2;\n\n}\n\nclass ListNodeIriToListNodeV2 {\n\n    [index: string]: ListNodeV2;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListCacheService {\n\n    private listCache = new ListCache();\n\n    private listNodeIriToListNodeV2 = new ListNodeIriToListNodeV2();\n\n    constructor(private _listService: ListService) {\n    }\n\n    private hasRootNode(listJSONLD) {\n        let hasRoot;\n\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode'] !== undefined) {\n            hasRoot = listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode']['@id'];\n        }\n\n        return hasRoot;\n    }\n\n    /**\n     * Converts a JSON-LD represention of a ListNodeV2 to  a `ListNodeV2`.\n     * Recursively converts child nodes.\n     *\n     * @param {object} listJSONLD the JSON-LD representation of a list node v2.\n     * @return {ListNodeV2}\n     */\n    private convertJSONLDToListNode: (listJSONLD: object) => ListNodeV2 = (listJSONLD: object) => {\n\n        const listNodeIri = listJSONLD['@id'];\n\n        const hasRootNode = this.hasRootNode(listJSONLD);\n\n        const listNode = new ListNodeV2(\n            listNodeIri,\n            listJSONLD['http://www.w3.org/2000/01/rdf-schema#label'],\n            listJSONLD['http://api.knora.org/ontology/knora-api/v2#listNodePosition'],\n            hasRootNode\n        );\n\n        // check if there are child nodes\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'] !== undefined) {\n\n            if (Array.isArray(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'])) {\n                // array of child nodes\n                for (const subListNode of listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']) {\n                    listNode.children.push(this.convertJSONLDToListNode(subListNode));\n                }\n            } else {\n                // single child node\n                listNode.children.push(this.convertJSONLDToListNode(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']));\n            }\n\n        }\n\n        this.listNodeIriToListNodeV2[listNodeIri] = listNode;\n\n        return listNode;\n    };\n\n    /**\n     * Gets a list from the cache or requests it from Knora and caches it.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ListNodeV2>}\n     */\n    getList(rootNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list is already in cache\n        if (this.listCache[rootNodeIri] !== undefined) {\n\n            // return list from cache\n            return of(this.listCache[rootNodeIri]);\n\n        } else {\n            // get list from Knora and cache it\n\n            const listJSONLD = this._listService.getList(rootNodeIri);\n\n            const listV2: Observable<ListNodeV2> = listJSONLD.pipe(\n                map(\n                    this.convertJSONLDToListNode\n                )\n            );\n\n            return listV2.pipe(\n                map(\n                    (list: ListNodeV2) => {\n                        // write list to cache and return it\n                        this.listCache[rootNodeIri] = list;\n                        return list;\n                    }\n                )\n            );\n        }\n    }\n\n    /**\n     * Gets a list node from the cache or requests the whole list from Knora and caches it.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list node is already in cache\n        if (this.listNodeIriToListNodeV2[listNodeIri] !== undefined) {\n\n            // list node is already cached\n            return of(this.listNodeIriToListNodeV2[listNodeIri]);\n\n        } else {\n\n            const listNode = this._listService.getListNode(listNodeIri);\n\n            return listNode.pipe(\n                mergeMap(\n                    (listNodeJSONLD: object) => {\n                        const hasRootNode = this.hasRootNode(listNodeJSONLD);\n\n                        if (hasRootNode !== undefined) {\n                            // get the whole list\n                            return this.getList(hasRootNode).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        } else {\n                            // this is the root node, get the whole list\n                            return this.getList(listNodeIri).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        }\n                    }\n                )\n            );\n        }\n    }\n}\n","import { KnoraConstants, KnoraSchema } from './knora-constants';\nimport { GravsearchGenerationService, Property } from '../../services';\n\n\n/**\n * An abstract interface representing a comparison operator.\n * This interface is implemented for the supported comparison operators.\n */\nexport interface ComparisonOperator {\n\n    // type of comparison operator\n    type: string;\n\n    // the label of the comparison operator to be presented to the user.\n    label: string;\n\n    // returns the class name when called on an instance\n    getClassName(): string;\n}\n\nexport class Equals implements ComparisonOperator {\n\n    type = KnoraConstants.EqualsComparisonOperator;\n    label = KnoraConstants.EqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Equals';\n    }\n}\n\n\nexport class NotEquals implements ComparisonOperator {\n\n    type = KnoraConstants.NotEqualsComparisonOperator;\n    label = KnoraConstants.NotEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'NotEquals';\n    }\n}\n\nexport class GreaterThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanEqualsComparisonOperator;\n    label = KnoraConstants.GreaterThanEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThanEquals';\n    }\n}\n\nexport class GreaterThan implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanComparisonOperator;\n    label = KnoraConstants.GreaterThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThan';\n    }\n}\n\nexport class LessThan implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanComparisonOperator;\n    label = KnoraConstants.LessThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThan';\n    }\n}\n\nexport class LessThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanEqualsComparisonOperator;\n    label = KnoraConstants.LessThanQualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThanEquals';\n    }\n}\n\n\nexport class Exists implements ComparisonOperator {\n\n    type = KnoraConstants.ExistsComparisonOperator;\n    label = KnoraConstants.ExistsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Exists';\n    }\n}\n\nexport class Like implements ComparisonOperator {\n\n    type = KnoraConstants.LikeComparisonOperator;\n    label = KnoraConstants.LikeComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Like';\n    }\n\n}\n\nexport class Match implements ComparisonOperator {\n\n    type = KnoraConstants.MatchComparisonOperator;\n    label = KnoraConstants.MatchComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Match';\n    }\n\n}\n\n/**\n * Combination of a comparison operator and a value literal or an IRI.\n * In case the comparison operator is 'Exists', no value is given.\n */\nexport class ComparisonOperatorAndValue {\n\n    constructor(readonly comparisonOperator: ComparisonOperator, readonly value?: Value) {\n    }\n}\n\n/**\n * An abstract interface representing a value: an IRI or a literal.\n */\nexport interface Value {\n\n    /**\n     * Turns the value into a SPARQL string representation.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string} SPARQL representation of the value.\n     */\n    toSparql(schema: KnoraSchema): string;\n\n}\n\n/**\n * Represents a property's value as a literal with the indication of its type.\n */\nexport class ValueLiteral implements Value {\n\n    /**\n     * Constructs a [ValueLiteral].\n     *\n     * @param {string} value the literal representation of the value.\n     * @param {string} type the type of the value (making use of xsd).\n     */\n    constructor(\n        public readonly value: string,\n        public readonly type: string) {\n    }\n\n\n    /**\n     * Creates a type annotated value literal to be used in a SPARQL query.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n\n        let literalType: string;\n\n        // check if a Knora schema conversion is necessary, e.g., knora-api:dateValue (complex) to knora-api:date (simple).\n        // xsd types will remain unchanged\n        if (schema === KnoraSchema.simple && GravsearchGenerationService.typeConversionComplexToSimple[this.type] !== undefined) {\n            // convert to simple schema\n            literalType = GravsearchGenerationService.typeConversionComplexToSimple[this.type];\n        } else {\n            // do not convert\n            literalType = this.type;\n        }\n        return `\"${this.value}\"^^<${literalType}>`;\n    }\n\n}\n\n/**\n * Represents an IRI.\n */\nexport class IRI implements Value {\n\n    /**\n     * Constructs an [IRI].\n     *\n     * @param {string} iri the IRI of a resource instance.\n     */\n    constructor(readonly iri: string) {\n    }\n\n    /**\n     * Creates a SPARQL representation of the IRI.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n        // this is an instance Iri and does not have to be converted.\n        return `<${this.iri}>`;\n    }\n\n}\n\n/**\n * An abstract interface that represents a value.\n * This interface has to be implemented for all value types (value component classes).\n */\nexport interface PropertyValue {\n\n    /**\n     * Type of the value.\n     */\n    type: string;\n\n    /**\n     * Returns the value.\n     *\n     * @returns {Value}.\n     */\n    getValue(): Value;\n\n}\n\n/**\n * Represents a property, the specified comparison operator, and value.\n */\nexport class PropertyWithValue {\n\n    /**\n     * Constructs a [PropertyWithValue].\n     *\n     * @param {Property} property the specified property.\n     * @param {ComparisonOperatorAndValue} valueLiteral the specified comparison operator and value.\n     * @param isSortCriterion indicates if the property is used as a sort criterion.\n     */\n    constructor(\n        readonly property: Property,\n        readonly valueLiteral: ComparisonOperatorAndValue,\n        readonly isSortCriterion: Boolean) {\n    }\n\n}\n\n/**\n * a list, which is used in the mat-autocomplete form field\n * contains objects with id and name. the id is usual the iri\n */\nexport interface AutocompleteItem {\n    iri: string;\n    name: string;\n    label?: string;\n}\n\n"]}