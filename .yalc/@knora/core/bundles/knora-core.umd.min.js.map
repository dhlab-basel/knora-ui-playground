{"version":3,"sources":["ng://@knora/core/lib/core.module.ts","node_modules/tslib/tslib.es6.js","ng://@knora/core/lib/declarations/api/knora-constants.ts","ng://@knora/core/lib/declarations/core.config.ts","ng://@knora/core/lib/declarations/api-service-result.ts","ng://@knora/core/lib/declarations/api-service-error.ts","ng://@knora/core/lib/declarations/utils.ts","ng://@knora/core/lib/declarations/api/shared/date.ts","ng://@knora/core/lib/declarations/api/shared/strings.ts","ng://@knora/core/lib/services/v2/ontology-cache.service.ts","ng://@knora/core/lib/declarations/api/admin/authentication/authentication-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project.ts","ng://@knora/core/lib/declarations/api/admin/groups/group.ts","ng://@knora/core/lib/declarations/api/admin/groups/group-response.ts","ng://@knora/core/lib/declarations/api/admin/groups/groups-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node.ts","ng://@knora/core/lib/declarations/api/admin/lists/list.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/lists-response.ts","ng://@knora/core/lib/declarations/api/admin/ontologies/ontology-info-short.ts","ng://@knora/core/lib/declarations/api/admin/permissions/permission-data.ts","ng://@knora/core/lib/declarations/api/admin/users/user.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-members-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/projects-response.ts","ng://@knora/core/lib/declarations/api/admin/users/users-response.ts","ng://@knora/core/lib/declarations/api/admin/users/user-response.ts","ng://@knora/core/lib/declarations/api/v2/properties/read-property-item.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resource.ts","ng://@knora/core/lib/services/api.service.ts","ng://@knora/core/lib/services/v2/ontology.service.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resources-sequence.ts","ng://@knora/core/lib/declarations/api/v2/count-query/count-query-result.ts","ng://@knora/core/lib/declarations/api/v2/still-image/still-image-representation.ts","ng://@knora/core/lib/declarations/api/v2/still-image/image-region.ts","ng://@knora/core/lib/services/admin/groups.service.ts","ng://@knora/core/lib/services/admin/lists.service.ts","ng://@knora/core/lib/services/admin/projects.service.ts","ng://@knora/core/lib/services/admin/users.service.ts","ng://@knora/core/lib/services/admin/language.service.ts","ng://@knora/core/lib/services/admin/status-msg.service.ts","ng://@knora/core/lib/services/v2/convert-jsonld.ts","ng://@knora/core/lib/services/v2/resource.service.ts","ng://@knora/core/lib/services/v2/search.service.ts","ng://@knora/core/lib/services/v2/incoming.service.ts","ng://@knora/core/lib/services/v2/search-params.service.ts","ng://@knora/core/lib/services/v2/grav-search.service.ts","ng://@knora/core/lib/services/v2/store.service.ts","ng://@knora/core/lib/services/v2/basic-ontology.service.ts","ng://@knora/core/lib/services/v2/resource-types.service.ts","ng://@knora/core/lib/services/v2/list.service.ts","ng://@knora/core/lib/services/v2/list-cache.service.ts","ng://@knora/core/lib/declarations/api/operators.ts"],"names":["KuiCoreConfigToken","InjectionToken","KuiCoreModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","args","imports","CommonModule","HttpClientModule","declarations","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","KnoraSchema","KuiCoreConfig","name","undefined","app","api","media","tslib_1.__decorate","JsonProperty","String","JsonObject","ApiServiceResult","status","statusText","url","getBody","classObject","jsonConvert","deserialize","body","JsonConvert","OperationMode","ENABLE","ValueCheckingMode","ALLOW_NULL","ApiServiceError","errorInfo","KnoraConstants","KnoraApi","PathSeparator","KnoraBase","KnoraOntologyPath","SystemProjectIRI","KnoraAdmin","SystemAdminGroupIRI","ProjectAdminGroupIRI","ProjectMemberGroupIRI","KnoraApiV2WithValueObjectPath","KnoraApiV2SimplePath","SalsahGuiOrder","SalsahGuiOntology","SalsahGuiAttribute","StandoffOntology","Resource","TextValue","IntValue","BooleanValue","UriValue","DecimalValue","DateValue","ColorValue","GeomValue","ListValue","IntervalValue","LinkValue","GeonameValue","FileValue","AudioFileValue","DDDFileValue","DocumentFileValue","StillImageFileValue","MovingImageFileValue","TextFileValue","IsResourceClass","IsValueClass","ForbiddenResource","XMLToStandoffMapping","ListNode","ArkUrl","versionArkUrl","ObjectType","ResourceIcon","isEditable","isLinkProperty","isLinkValueProperty","hasGeometry","schemaName","schemaNumberOfItems","schemaItemListElement","RdfProperty","RdfsLabel","RdfsSchema","RdfsComment","RdfsSubclassOf","subPropertyOf","OwlClass","owl","OwlObjectProperty","OwlDatatypeProperty","OwlAnnotationProperty","OwlOnProperty","OwlMaxCardinality","OwlMinCardinality","OwlCardinality","OwlRestriction","creationDate","lastModificationDate","hasPermissions","userHasPermission","attachedToProject","attachedToUser","Region","ReadTextValueAsHtml","ReadTextValueAsString","ReadTextValueAsXml","ReadDateValue","ReadLinkValue","ReadIntegerValue","ReadDecimalValue","ReadStillImageFileValue","ReadMovingImageFileValue","ReadAudioFileValue","ReadTextFileValue","ReadGeomValue","ReadColorValue","ReadUriValue","ReadBooleanValue","ReadIntervalValue","ReadListValue","valueAsString","textValueAsHtml","textValueAsXml","textValueHasMapping","hasStandoffLinkToValue","dateValueHasStartYear","dateValueHasEndYear","dateValueHasStartEra","dateValueHasEndEra","dateValueHasStartMonth","dateValueHasEndMonth","dateValueHasStartDay","dateValueHasEndDay","dateValueHasCalendar","linkValueHasTarget","linkValueHasSource","linkValueHasSourceIri","linkValueHasTargetIri","integerValueAsInteger","decimalValueAsDecimal","fileValueAsUrl","fileValueIsPreview","fileValueHasFilename","hasStillImageFileValue","stillImageFileValueHasDimX","stillImageFileValueHasDimY","stillImageFileValueHasIIIFBaseUrl","colorValueAsColor","geometryValueAsGeometry","uriValueAsUri","booleanValueAsBoolean","intervalValueHasStart","intervalValueHasEnd","listValueAsListNode","xsdString","Xsd","xsdBoolean","xsdInteger","xsdDecimal","xsdUri","resourceSimple","dateSimple","intervalSimple","geomSimple","colorSimple","geonameSimple","fileSimple","listNodeSimple","matchFunction","EqualsComparisonOperator","EqualsComparisonLabel","NotEqualsComparisonOperator","NotEqualsComparisonLabel","GreaterThanComparisonOperator","GreaterThanComparisonLabel","GreaterThanEqualsComparisonOperator","GreaterThanEqualsComparisonLabel","LessThanComparisonOperator","LessThanComparisonLabel","LessThanEqualsComparisonOperator","LessThanQualsComparisonLabel","ExistsComparisonOperator","ExistsComparisonLabel","LikeComparisonOperator","LikeComparisonLabel","MatchComparisonOperator","MatchComparisonLabel","SalsahLink","RefMarker","GNDPrefix","GNDResolver","VIAFPrefix","VIAFResolver","Precision","Utils","getOntologyIriFromEntityIri","entityIri","segments","split","console","error","convertComplexKnoraApiEntityIritoSimple","complexEntityIri","RegexEmail","RegexUsername","RegexUrl","RegexPassword","RegexHex","RegexShortname","filterOutDuplicates","elem","index","self","indexOf","StringLiteral","language","CardinalityOccurrence","DateSalsah","calendar","era","year","month","day","precision","yearPrecision","monthPrecision","dayPrecision","getDateAsStringWithoutCalendar","dateString","toString","separator","getDateAsString","DateRangeSalsah","start","end","AuthenticationResponse","token","Project","id","shortname","shortcode","longname","description","keywords","logo","institution","ontologies","selfjoin","Boolean","Group","project","GroupResponse","group","GroupsResponse","groups","ListInfo","projectIri","labels","comments","label","children","level","position","ListNode_1","Number","List","listinfo","ListInfoResponse","ListNodeInfo","isRootNode","ListNodeInfoResponse","nodeinfo","ListResponse","list","ListsResponse","lists","OntologyInfoShort","ontologyIri","ontologyName","PermissionData","groupsPerProject","administrativePermissionsPerProject","User","email","username","password","givenName","familyName","lang","projects","sessionId","permissions","systemAdmin","ProjectMembersResponse","members","ProjectResponse","ProjectsResponse","UsersResponse","users","UserResponse","user","ReadTextValue","type","_super","propIri","str","_this","tslib_1.__extends","getClassName","getContent","ReferredResourcesByStandoffLink","html","referredResources","getReferredResourceInfo","resourceIri","ontologyInfo","resClassLabel","getLabelForResourceClass","xml","mappingIri","startYear","endYear","startEra","endEra","startMonth","endMonth","startDay","endDay","getDateSalsah","referredResourceIri","referredResource","integer","decimal","imageFilename","imageServerIIIFBaseURL","imagePath","dimX","dimY","isPreview","endsWith","makeIIIFUrl","reduceFactor","percentage","Math","floor","filename","mediaServerIIIFBaseURL","path","duration","fps","aspectRatio","textFilename","textFileURL","colorHex","Point2D","x","y","RegionGeometry","lineColor","lineWidth","points","radius","geometryString","geometryJSON","JSON","parse","_b","tslib_1.__values","_c","point","push","geometry","uri","bool","intervalStart","intervalEnd","listNodeIri","ReadResource","incomingRegions","incomingStillImageRepresentations","incomingLinks","stillImageRepresentationsToDisplay","properties","incomingAnnotations","incomingFileRepresentations","fileRepresentationsToDisplay","jsonld","require","ApiService","http","loading","httpGet","params","get","observe","pipe","map","response","result","catchError","handleRequestError","processJSONLD","resourceResponse","resPromise","promises","compact","from","httpPost","post","httpPut","put","httpDelete","delete","serviceError","message","throwError","handleJsonError","Injectable","providedIn","HttpClient","Inject","OntologyService","getOntologiesMetadata","getAllOntologies","getProjectOntologies","encodeURIComponent","getAllEntityDefinitionsForOntologies","getResourceClasses","resourceClassIris","Observable","observer","resClassUriEnc","forEach","resClassIri","getProperties","propertyIris","propertiesUriEnc","createOntology","data","ontology","knora-api:ontologyName","knora-api:attachedToProject","@id","rdfs:label","@context","rdfs","knora-api","OntologyCacheError","Error","OntologyMetadata","Cardinality","occurrence","property","GuiOrder","ResourceClass","icon","comment","cardinalities","guiOrder","ResourceClasses","Property","objectType","guiAttribute","Properties","ResourceClassIrisForOntology","OntologyCache","resourceClassIrisForOntology","resourceClasses","OntologyInformation","resourceClassesForOntology","sortFunc","a","labelA","toLowerCase","labelB","updateOntologyInformation","newResourceClassesForOntology","getResourceClassForOntology","newResClassForOntology","newResourceClasses","newResClass","newProperties","newProp","getResourceClassesAsArray","sortAsc","resClasses","resClass","sort","reverse","resClassDef","log","getPropertiesAsArray","prop","getLabelForProperty","propDef","OntologyCacheService","_ontologyService","excludedOntologies","excludedProperties","nonResourceClasses","cacheOntology","getOntologiesMetadataFromKnora","mergeMap","ontRes","ontPromise","getAllEntityDefinitionsForOntologyFromKnora","convertAndWriteOntologiesMetadataToCache","getAllOntologiesMetadataFromCache","getResourceClassIrisFromOntologyResponse","classDefinitions","classDefinitions_1","classDefinitions_1_1","classDef","classIri","convertAndWriteAllEntityDefinitionsForOntologyToCache","graph","classDefs","filter","entity","propertyDefs","entityType","convertAndWriteEntityDefinitionsToCache","getOntologyInformationFromCache","ontologyIris","allResourceClassIris","ontologyIris_1","ontologyIris_1_1","concat","getResourceClassDefinitions","resClassDefs","resourceClassDefinitions","propertyClassDefinitions","resourceClassDefinitions_1","resourceClassDefinitions_1_1","subclassOfCollection","isArray","subclassOfCollection_1","subclassOfCollection_1_1","curCard","newCard","minCard","card","TypeError","maxCard","newGuiOrder","resClassObj","convertAndWriteKnoraPropertyDefinitionsToOntologyCache","getResourceClassDefinitionsFromCache","resClassIris","getPropertyDefinitions","propDefs","propertyDefinitionsFromKnora","propertyDefinitionsFromKnora_1","propertyDefinitionsFromKnora_1_1","superProp","_d","attr","getPropertyDefinitionsFromCache","onto","of","getAndCacheOntologies","observables","forkJoin","getEntityDefinitionsForOntologies","ontologyIrisToQuery","resClassIrisToQueryFor","propertiesToQuery","results","ReadResourcesSequence","resources","numberOfResources","ontologyInformation","CountQueryResult","numberOfResults","StillImageRepresentation","stillImageFileValue","regions","ImageRegion","regionResource","getGeometries","GroupsService","apply","getAllGroups","getGroupByIri","iri","ListsService","getLists","getList","listIri","getListInfo","getListNodeInfo","nodeIri","createList","payload","updateListInfo","ProjectsService","getAllProjects","getProjectByIri","getProject","getProjectByShortname","getProjectByShortcode","getProjectMembersByIri","getProjectMembers","getProjectMembersByShortname","getProjectMembersByShortcode","createProject","updateProject","activateProject","deleteProject","UsersService","getAllUsers","getUser","identifier","identifierType","getUserByIri","getUserByEmail","getUserByUsername","getUsersGroupMemberships","userIri","createUser","addUserToProject","removeUserFromProject","addUserToProjectAdmin","removeUserFromProjectAdmin","addUserToGroup","groupIri","removeUserFromGroup","addUserToSystemAdmin","updateUserSystemAdmin","removeUserFromSystemAdmin","activateUser","updateOwnPassword","oldPassword","newPassword","requesterPassword","updateUsersPassword","updateBasicUserInformation","deleteUser","LanguageService","subject","Subject","setLanguage","var","getLanguage","asObservable","StatusMsgService","_http","getStatusMsg","res","err","ConvertJSONLD","getPropertyNames","propName","constructReadResource","resourceJSONLD","constructReadProperties","standoffLinkValuesJSONLD","standoffLinkValues","standoffLinkValuesJSONLD_1","standoffLinkValuesJSONLD_1_1","standoffLinkJSONLD","standoffVal","createValueSpecificProp","propNames","keys","propNames_1","propNames_1_1","propValues","_e","propValue","valueSpecificProp","textValue","standoffLinkValues_1","standoffLinkValues_1_1","referredRes","stringify","linkValue","incomingResource","incomingResourceIri","decVal","parseFloat","intStart","intEnd","getReferredResourceClasses","referredResourceClasses","propNames_2","propNames_2_1","createReadResourcesSequenceFromJsonLD","resourcesResponseJSONLD","resourcesGraph","resourcesGraph_1","resourcesGraph_1_1","resource","getResourceClassesFromJsonLD","resourcesGraph_2","resourcesGraph_2_1","createCountQueryResult","countQueryJSONLD","ResourceService","_ontologyCacheService","getResource","getReadResource","resSeq","ontoInfo","SearchService","convertJSONLDToReadResourceSequence","processFulltextSearchParams","httpParams","searchParams","limitToProject","set","limitToResourceClass","limitToStandoffClass","processSearchByLabelParams","doFulltextSearch","searchTerm","offset","HttpParams","doFullTextSearchReadResourceSequence","doFulltextSearchCountQuery","doFullTextSearchCountQueryCountQueryResult","doExtendedSearch","gravsearchQuery","doExtendedSearchReadResourceSequence","doExtendedSearchCountQuery","doExtendedSearchCountQueryCountQueryResult","searchByLabel","searchByLabelReadResourceSequence","IncomingService","getIncomingRegions","resourceIRI","sparqlQueryStr","getStillImageRepresentationsForCompoundResource","getIncomingLinksForResource","ExtendedSearchParams","generateGravsearch","SearchParamsService","_currentSearchParams","BehaviorSubject","changeSearchParamsMsg","getSearchParams","getValue","GravsearchGenerationService","_searchParamsService","createGravsearchQuery","mainResourceClassOption","mainResourceClass","orderByCriteria","returnStatements","props","propWithVal","valueLiteral","comparisonOperator","toSparql","complex","statement","restriction","propValueLiteral","complexTypeToProp","isSortCriterion","orderByStatement","join","gravsearchTemplate","offsetTemplate","localOffset","typeConversionComplexToSimple","http://api.knora.org/ontology/knora-api/v2#IntValue","http://api.knora.org/ontology/knora-api/v2#DecimalValue","http://api.knora.org/ontology/knora-api/v2#BooleanValue","http://api.knora.org/ontology/knora-api/v2#TextValue","http://api.knora.org/ontology/knora-api/v2#DateValue","http://api.knora.org/ontology/knora-api/v2#IntervalValue","http://api.knora.org/ontology/knora-api/v2#GeomValue","http://api.knora.org/ontology/knora-api/v2#ColorValue","http://api.knora.org/ontology/knora-api/v2#GeonameValue","http://api.knora.org/ontology/knora-api/v2#UriValue","http://api.knora.org/ontology/knora-api/v2#StillImageFileValue","http://api.knora.org/ontology/knora-api/v2#FileValue","http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue","http://api.knora.org/ontology/knora-api/v2#DDDFileValue","http://api.knora.org/ontology/knora-api/v2#AudioFileValue","http://api.knora.org/ontology/knora-api/v2#DocumentFileValue","http://api.knora.org/ontology/knora-api/v2#TextFileValue","http://api.knora.org/ontology/knora-api/v2#ListValue","StoreService","resetTriplestoreContent","rdfDataObjects","BasicOntologyService","getBasicOntology","ResourceTypesService","getResourceTypesByVoc","getResourceType","ListService","getListFromKnora","rootNodeIri","getListNodeFromKnora","getListNode","ListNodeV2","hasRootNode","ListCache","ListNodeIriToListNodeV2","ListCacheService","_listService","listCache","listNodeIriToListNodeV2","convertJSONLDToListNode","listJSONLD","listNode","subListNode","hasRoot","listNodeJSONLD","completeList","Equals","NotEquals","GreaterThanEquals","GreaterThan","LessThan","LessThanEquals","Exists","Like","Match","ComparisonOperatorAndValue","ValueLiteral","schema","literalType","simple","IRI","PropertyWithValue"],"mappings":"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","sourcesContent":["import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { KuiCoreConfig } from './declarations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nexport const KuiCoreConfigToken = new InjectionToken<KuiCoreConfig>('KuiCoreConfigToken (knora.core.config)');\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: [],\n    exports: [\n        HttpClientModule\n    ]\n})\nexport class KuiCoreModule {\n    /**\n     *\n     * @param {KuiCoreConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: KuiCoreConfig): ModuleWithProviders {\n        // get the app environment configuration here\n        // console.log('KuiCoreModule - forRoot - config: ', config);\n        return {\n            ngModule: KuiCoreModule,\n            providers: [\n                {provide: KuiCoreConfigToken, useValue: config}\n            ]\n        };\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class KnoraConstants {\n\n    public static KnoraApi: string = 'http://api.knora.org/ontology/knora-api';\n    public static PathSeparator: string = '#';\n\n    public static KnoraOntologyPath: string = 'http://www.knora.org/ontology';\n    public static KnoraBase: string = KnoraConstants.KnoraOntologyPath + '/knora-base';\n    public static KnoraAdmin: string = KnoraConstants.KnoraOntologyPath + '/knora-admin';\n\n    public static SystemProjectIRI: string = KnoraConstants.KnoraAdmin + '#SystemProject';\n    public static SystemAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#SystemAdmin';\n    public static ProjectAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectAdmin';\n    public static ProjectMemberGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectMember';\n\n    public static KnoraApiV2WithValueObjectPath: string = KnoraConstants.KnoraApi + '/v2' + KnoraConstants.PathSeparator;\n    public static KnoraApiV2SimplePath: string = KnoraConstants.KnoraApi + '/simple/v2' + KnoraConstants.PathSeparator;\n\n    public static SalsahGuiOntology: string = 'http://api.knora.org/ontology/salsah-gui/v2';\n\n    public static SalsahGuiOrder: string = KnoraConstants.SalsahGuiOntology + '#guiOrder';\n    public static SalsahGuiAttribute: string = KnoraConstants.SalsahGuiOntology + '#guiAttribute';\n\n\n    public static StandoffOntology: string = 'http://api.knora.org/ontology/standoff/v2';\n\n    public static Resource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Resource';\n    public static TextValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextValue';\n    public static IntValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntValue';\n    public static BooleanValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'BooleanValue';\n    public static UriValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'UriValue';\n    public static DecimalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DecimalValue';\n    public static DateValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DateValue';\n    public static ColorValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ColorValue';\n    public static GeomValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeomValue';\n    public static ListValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListValue';\n    public static IntervalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntervalValue';\n    public static LinkValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'LinkValue';\n    public static GeonameValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeonameValue';\n    public static FileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'FileValue';\n    public static AudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'AudioFileValue';\n    public static DDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DDDFileValue';\n    public static DocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DocumentFileValue';\n    public static StillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'StillImageFileValue';\n    public static MovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'MovingImageFileValue';\n    public static TextFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextFileValue';\n    public static IsResourceClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isResourceClass';\n    public static IsValueClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isValueClass';\n    public static ForbiddenResource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ForbiddenResource';\n    public static XMLToStandoffMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'XMLToStandoffMapping';\n    public static ListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListNode';\n\n    public static ArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'arkUrl';\n    public static versionArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'versionArkUrl';\n    public static ObjectType = KnoraConstants.KnoraApiV2WithValueObjectPath + 'objectType';\n\n    public static ResourceIcon: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'resourceIcon';\n    public static isEditable: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isEditable';\n    public static isLinkProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkProperty';\n    public static isLinkValueProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkValueProperty';\n    public static hasGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasGeometry';\n\n    public static schemaName: string = 'http://schema.org/name';\n    public static schemaNumberOfItems: string = 'http://schema.org/numberOfItems';\n    public static schemaItemListElement: string = 'http://schema.org/itemListElement';\n\n\n    public static RdfProperty: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property';\n    public static RdfsSchema: string = 'http://www.w3.org/2000/01/rdf-schema' + KnoraConstants.PathSeparator;\n    public static RdfsLabel: string = KnoraConstants.RdfsSchema + 'label';\n    public static RdfsComment: string = KnoraConstants.RdfsSchema + 'comment';\n    public static RdfsSubclassOf: string = KnoraConstants.RdfsSchema + 'subClassOf';\n    public static subPropertyOf: string = KnoraConstants.RdfsSchema + 'subPropertyOf';\n\n    public static owl: string = 'http://www.w3.org/2002/07/owl';\n\n    public static OwlClass: string = KnoraConstants.owl + '#Class';\n    public static OwlObjectProperty: string = KnoraConstants.owl + '#ObjectProperty';\n    public static OwlDatatypeProperty: string = KnoraConstants.owl + '#DatatypeProperty';\n    public static OwlAnnotationProperty: string = KnoraConstants.owl + '#AnnotationProperty';\n    public static OwlOnProperty: string = KnoraConstants.owl + '#onProperty';\n    public static OwlMaxCardinality: string = KnoraConstants.owl + '#maxCardinality';\n    public static OwlMinCardinality: string = KnoraConstants.owl + '#minCardinality';\n    public static OwlCardinality: string = KnoraConstants.owl + '#cardinality';\n    public static OwlRestriction: string = KnoraConstants.owl + '#Restriction';\n\n    public static creationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'creationDate';\n    public static lastModificationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'lastModificationDate';\n    public static hasPermissions: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasPermissions';\n    public static userHasPermission: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'userHasPermission';\n    public static attachedToProject: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToProject';\n    public static attachedToUser: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToUser';\n\n    public static Region: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Region';\n\n    public static ReadTextValueAsHtml: string = 'ReadTextValueAsHtml';\n    public static ReadTextValueAsString: string = 'ReadTextValueAsString';\n    public static ReadTextValueAsXml: string = 'ReadTextValueAsXml';\n    public static ReadDateValue: string = 'ReadDateValue';\n    public static ReadLinkValue: string = 'ReadLinkValue';\n    public static ReadIntegerValue: string = 'ReadIntegerValue';\n    public static ReadDecimalValue: string = 'ReadDecimalValue';\n    public static ReadStillImageFileValue: string = 'ReadStillImageFileValue';\n    public static ReadMovingImageFileValue: string = 'ReadMovingImageFileValue';\n    public static ReadAudioFileValue: string = 'ReadAudioFileValue';\n    public static ReadTextFileValue: string = 'ReadTextFileValue';\n    public static ReadGeomValue: string = 'ReadGeomValue';\n    public static ReadColorValue: string = 'ReadColorValue';\n    public static ReadUriValue: string = 'ReadUriValue';\n    public static ReadBooleanValue: string = 'ReadBooleanValue';\n    public static ReadIntervalValue: string = 'ReadIntervalValue';\n    public static ReadListValue: string = 'ReadListValue';\n\n    public static valueAsString: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'valueAsString';\n\n    public static textValueAsHtml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsHtml';\n    public static textValueAsXml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsXml';\n    public static textValueHasMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueHasMapping';\n\n    public static hasStandoffLinkToValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStandoffLinkToValue';\n\n    public static dateValueHasStartYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartYear';\n    public static dateValueHasEndYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndYear';\n    public static dateValueHasStartEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartEra';\n    public static dateValueHasEndEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndEra';\n    public static dateValueHasStartMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartMonth';\n    public static dateValueHasEndMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndMonth';\n    public static dateValueHasStartDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartDay';\n    public static dateValueHasEndDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndDay';\n    public static dateValueHasCalendar: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasCalendar';\n\n    public static linkValueHasTarget: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTarget';\n    public static linkValueHasSource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSource';\n    public static linkValueHasSourceIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSourceIri';\n    public static linkValueHasTargetIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTargetIri';\n\n    public static integerValueAsInteger: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intValueAsInt';\n\n    public static decimalValueAsDecimal: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'decimalValueAsDecimal';\n\n    public static fileValueAsUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueAsUrl';\n    public static fileValueIsPreview: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueIsPreview';\n    public static fileValueHasFilename: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueHasFilename';\n\n    public static hasStillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStillImageFileValue';\n\n    public static stillImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimX';\n    public static stillImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimY';\n    public static stillImageFileValueHasIIIFBaseUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasIIIFBaseUrl';\n\n    public static colorValueAsColor: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'colorValueAsColor';\n    public static geometryValueAsGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'geometryValueAsGeometry';\n    public static uriValueAsUri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'uriValueAsUri';\n    public static booleanValueAsBoolean: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'booleanValueAsBoolean';\n\n    public static intervalValueHasStart: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasStart';\n    public static intervalValueHasEnd: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasEnd';\n\n    public static listValueAsListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNode';\n\n    public static Xsd: string = 'http://www.w3.org/2001/XMLSchema#';\n\n    public static xsdString: string = KnoraConstants.Xsd + 'string';\n    public static xsdBoolean: string = KnoraConstants.Xsd + 'boolean';\n    public static xsdInteger: string = KnoraConstants.Xsd + 'integer';\n    public static xsdDecimal: string = KnoraConstants.Xsd + 'decimal';\n    public static xsdUri: string = KnoraConstants.Xsd + 'anyURI';\n\n    public static resourceSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Resource';\n    public static dateSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Date';\n    public static intervalSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Interval';\n    public static geomSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geom';\n    public static colorSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Color';\n    public static geonameSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geoname';\n    public static fileSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'File';\n    public static listNodeSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'ListNode';\n\n    public static matchFunction: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'match';\n\n    public static EqualsComparisonOperator: string = '=';\n    public static EqualsComparisonLabel: string = 'is equal to';\n\n    public static NotEqualsComparisonOperator: string = '!=';\n    public static NotEqualsComparisonLabel: string = 'is not equal to';\n\n    public static GreaterThanComparisonOperator: string = '>';\n    public static GreaterThanComparisonLabel: string = 'is greater than';\n\n    public static GreaterThanEqualsComparisonOperator: string = '>=';\n    public static GreaterThanEqualsComparisonLabel: string = 'is greater than equals to';\n\n    public static LessThanComparisonOperator: string = '<';\n    public static LessThanComparisonLabel: string = 'is less than';\n\n    public static LessThanEqualsComparisonOperator: string = '<=';\n    public static LessThanQualsComparisonLabel: string = 'is less than equals to';\n\n    public static ExistsComparisonOperator: string = 'E';\n    public static ExistsComparisonLabel: string = 'exists';\n\n    public static LikeComparisonOperator: string = 'regex';\n    public static LikeComparisonLabel: string = 'is like';\n\n    public static MatchComparisonOperator: string = 'contains';\n    public static MatchComparisonLabel: string = 'matches';\n\n    public static SalsahLink: string = 'salsah-link'; // class on an HTML <a> element that indicates a link to a Knora resource\n    public static RefMarker: string = 'ref-marker'; // class on an HTML element that refers to another element in the same document\n\n    public static GNDPrefix: string = '(DE-588)';\n    public static GNDResolver: string = 'http://d-nb.info/gnd/';\n\n    public static VIAFPrefix: string = '(VIAF)';\n    public static VIAFResolver: string = 'https://viaf.org/viaf/';\n\n}\n\n\nexport enum KnoraSchema {\n    complex = 0,\n    simple = 1\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * Knora-ui core configuration with the server definitions of:\n *  - api: URL of data service e.g. knora: http://localhost:3333\n *  - media: URL of media server service e.g. sipi: http://localhost:1024\n *  - app: URL of the app e.g. salsah: http://localhost:4200\n */\n@JsonObject('KuiCoreConfig')\nexport class KuiCoreConfig {\n\n    /**\n     * name of the app e.g. 'SALSAH'\n     * @type {string}\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * url of the app e.g. 'https://salsah.org'\n     * @type {undefined}\n     */\n    @JsonProperty('app', String)\n    public app: string = undefined;\n\n    /**\n     * url of the api e.g. 'https://api.knora.org'\n     * @type {string}\n     */\n    @JsonProperty('api', String)\n    public api: string = undefined;\n\n    /**\n     * url of media/file server e.g. 'https://iiif.sipi.io'\n     * @type {string}\n     */\n    @JsonProperty('media', String)\n    public media: string = undefined;\n\n}\n","\nimport { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\n\n/**\n * Result class used as API url response in ApiService\n */\nexport class ApiServiceResult {\n\n    private static jsonConvert: JsonConvert = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL);\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Body as JSON\n     */\n    body: any;\n\n    /**\n     * Gets the result body as instance of classObject.\n     * @param classObject\n     * @returns {any}\n     * @throws\n     */\n\n    getBody(classObject?: { new(): any }): any {\n        // console.log(this.body);\n        return ApiServiceResult.jsonConvert.deserialize(this.body, classObject);\n    }\n\n\n}\n","\n/**\n * Error class used as API response in ApiService\n */\nexport class ApiServiceError {\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Additional error info\n     */\n    errorInfo = '';\n\n}\n","/**\n * Collection of useful utility functions.\n */\nimport { KnoraConstants } from './api/knora-constants';\n\n// @dynamic\nexport class Utils {\n    /**\n     * A regex to validate Email address.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    /**\n     * A regex to validate Username.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUsername = /^[a-zA-Z0-9]+$/;\n\n    /**\n     * A regex to validate URLs.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUrl = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/i;\n\n    /**\n     * A regex to validate Passwords\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexPassword = /^(?=.*\\d)(?=.*[a-zA-Z]).{8,}$/i;\n\n    /**\n     * A regex to validate Hexadecimal values\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexHex = /^[0-9A-Fa-f]+$/;\n\n    /**\n     * A regex to validate shortname in projects\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexShortname = /^[a-zA-Z]+\\S*$/;\n\n\n    /**\n     * Lambda function eliminating duplicates in a collection to be passed to [[filter]].\n     *\n     * @param elem element of an Array that is currently being looked at.\n     * @param index current elements index.\n     * @param self reference to the whole Array.\n     * @returns {boolean} true if the same element does not already exist in the Array.\n     */\n    public static filterOutDuplicates = (elem, index: number, self) => {\n\n        // https://stackoverflow.com/questions/16747798/delete-duplicate-elements-from-an-array\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example\n\n        // returns true if the element's index equals the index of the leftmost element\n        // -> this means that there is no identical element before this index, hence it is not a duplicate\n        // for all other elements, false is returned\n        return index === self.indexOf(elem);\n\n    }\n\n    /**\n     * Given a Knora entity IRI, gets the ontology Iri.\n     *\n     * @param {string} entityIri an entity Iri.\n     * @return {string} the ontology IRI\n     */\n    public static getOntologyIriFromEntityIri(entityIri: string) {\n\n        // split class Iri on \"#\"\n        const segments: string[] = entityIri.split(KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${entityIri} is not a valid entity IRI.`);\n\n        return segments[0];\n\n    }\n\n    /**\n     * Converts a complex knora-api entity Iri to a knora-api simple entity Iri.\n     *\n     * @param {string} complexEntityIri\n     * @returns {string}\n     */\n    public static convertComplexKnoraApiEntityIritoSimple(complexEntityIri: string) {\n\n        // split entity Iri on \"#\"\n        const segments: string[] = complexEntityIri.split('v2' + KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${complexEntityIri} is not a valid entity IRI.`);\n\n        // add 'simple' to base path\n        return segments[0] + 'simple/v2' + KnoraConstants.PathSeparator + segments[1];\n\n    }\n\n\n}\n","/**\n * Precision for DateSalsah.\n */\nexport enum Precision {\n    yearPrecision,\n    monthPrecision,\n    dayPrecision\n}\n\n/**\n * Represents a Salsah date object with a precision information.\n */\nexport class DateSalsah {\n\n    private static separator = '-';\n\n    readonly precision: Precision;\n\n    constructor(\n        readonly calendar: string,\n        readonly era: string,\n        readonly year: number,\n        readonly month?: number,\n        readonly day?: number\n    ) {\n        if (this.month === undefined) {\n            // year precision\n            this.precision = Precision.yearPrecision;\n        } else if (this.day === undefined) {\n            // month precision\n            this.precision = Precision.monthPrecision;\n        } else {\n            // day precision\n            this.precision = Precision.dayPrecision;\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the date without the calendar.\n     *\n     * @returns {string}\n     */\n    getDateAsStringWithoutCalendar() {\n\n        let dateString = '(' + this.era + ') ';\n\n        switch (this.precision) {\n\n            case Precision.yearPrecision: {\n                dateString += this.year.toString();\n                break;\n            }\n\n            case Precision.monthPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month;\n                break;\n            }\n\n            case Precision.dayPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month + DateSalsah.separator + this.day;\n                break;\n            }\n\n            default: {\n                break;\n            }\n\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Returns a string representation of the date (with calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString(): string {\n\n        return this.calendar + ':' + this.getDateAsStringWithoutCalendar();\n    }\n\n}\n\n/**\n * Represents a period (with start date and end date).\n */\nexport class DateRangeSalsah {\n\n    constructor(\n        readonly start: DateSalsah,\n        readonly end: DateSalsah\n    ) {\n    }\n\n    /**\n     * Returns a string representation of the date range (with preceding calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString() {\n        return this.start.getDateAsString() + ':' + this.end.getDateAsStringWithoutCalendar();\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('StringLiteral')\nexport class StringLiteral {\n\n    @JsonProperty('value', String, false)\n    public value: string = undefined;\n\n    @JsonProperty('language', String, true)\n    public language: string = '';\n}\n","import { Injectable } from '@angular/core';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { Utils } from '../../declarations/utils';\nimport { OntologyService } from './ontology.service';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n/**\n * Represents an error occurred in OntologyCacheService.\n */\nclass OntologyCacheError extends Error {\n\n    constructor(readonly message: string) {\n        super(message);\n    }\n}\n\n\n/**\n * Represents an ontology's metadata.\n */\nexport class OntologyMetadata {\n\n    /**\n     * @hideconstructor\n     *\n     * @param {string} id Iri identifying the ontology.\n     * @param {string} label a label describing the ontology.\n     */\n    constructor(readonly id: string,\n        readonly label: string) {\n\n    }\n\n}\n\n\n/**\n * Occurrence of a property for a resource class (its cardinality).\n */\nexport enum CardinalityOccurrence {\n    minCard = 0,\n    card = 1,\n    maxCard = 2\n}\n\n\n/**\n * Cardinality of a property for the given resource class.\n */\nexport class Cardinality {\n\n    /**\n     * @param {CardinalityOccurrence} occurrence type of given occurrence.\n     * @param {number} value numerical value of given occurrence.\n     * @param {string} property the property the given occurrence applies to.\n     */\n    constructor(readonly occurrence: CardinalityOccurrence,\n        readonly value: number,\n        readonly property: string) {\n    }\n}\n/**\n * Property gui order\n */\nexport class GuiOrder {\n    /**\n     * @param  {number} value\n     * @param  {string} property\n     */\n    constructor(readonly value: number,\n        readonly property: string\n    ) {\n\n    }\n}\n\n/**\n * A resource class definition.\n */\nexport class ResourceClass {\n\n    /**\n     * @param {string} id Iri identifying the resource class.\n     * @param {string} icon path to an icon representing the resource class.\n     * @param {string} comment comment on the resource class.\n     * @param {string} label label describing the resource class.\n     * @param {Cardinality[]} cardinalities the resource class's properties.\n     * @param {GuiOrder[]} guiOrder the resource class's gui-order properties.\n     */\n    constructor(readonly id: string,\n        readonly icon: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly cardinalities: Array<Cardinality>,\n        readonly guiOrder: Array<GuiOrder>) {\n\n    }\n}\n\n\n/**\n * A map of resource class Iris to resource class definitions.\n */\nexport class ResourceClasses {\n    [index: string]: ResourceClass;\n}\n\n\n/**\n * A property definition.\n */\nexport class Property {\n\n    /**\n     * @param {string} id Iri identifying the property definition.\n     * @param {string} objectType the property's object constraint.\n     * @param {string} comment comment on the property definition.\n     * @param {string} label label describing the property definition.\n     * @param {string[]} subPropertyOf Iris of properties the given property is a subproperty of.\n     * @param {boolean} isEditable indicates whether the given property can be edited by the client.\n     * @param {boolean} isLinkProperty indicates whether the given property is a linking property.\n     * @param {boolean} isLinkValueProperty indicates whether the given property refers to a link value.\n     * @param {string} guiAttribute the gui attribute assigned to this property, if any.\n     */\n    constructor(readonly id: string,\n                readonly objectType: string,\n                readonly comment: string,\n                readonly label: string,\n                readonly subPropertyOf: Array<string>,\n                readonly isEditable: Boolean,\n                readonly isLinkProperty: Boolean,\n                readonly isLinkValueProperty: Boolean,\n                readonly guiAttribute: string[]) {\n    }\n}\n\n\n/**\n * A map of property Iris to property definitions.\n */\nexport class Properties {\n    [index: string]: Property;\n}\n\n\n/**\n * Groups resource classes by the ontology they are defined in.\n *\n * A map of ontology Iris to an array of resource class Iris.\n */\nexport class ResourceClassIrisForOntology {\n    [index: string]: Array<string>;\n}\n\n\n/**\n * Represents cached ontology information (only used by this service internally).\n * This cache is updated whenever new definitions are requested from Knora.\n *\n * Requested ontology information by a service is represented by [[OntologyInformation]].\n */\nclass OntologyCache {\n\n    /**\n     * @param {OntologyMetadata[]} ontologies An array of all existing ontologies.\n     */\n    ontologies: Array<OntologyMetadata>;\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassIrisForOntology list of all resource class Iris for a named graph.\n     */\n    resourceClassIrisForOntology: ResourceClassIrisForOntology;\n\n    /**\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     */\n    resourceClasses: ResourceClasses;\n\n    /**\n     * @param {Properties} properties property definitions.\n     */\n    properties: Properties;\n\n    constructor() {\n        this.ontologies = [];\n\n        this.resourceClassIrisForOntology = new ResourceClassIrisForOntology();\n\n        this.resourceClasses = new ResourceClasses();\n\n        this.properties = new Properties();\n    }\n}\n\n/**\n * Represents ontology information requested from this service.\n *\n * For every request, an instance of this class is returned containing the requested information.\n */\nexport class OntologyInformation {\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassesForOntology all resource class Iris for a given ontology.\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     * @param {Properties} properties property definitions.\n     */\n    constructor(\n        private resourceClassesForOntology: ResourceClassIrisForOntology,\n        private resourceClasses: ResourceClasses,\n        private properties: Properties) {\n    }\n\n    /**\n     * Sorts an array of `ResourceClass` or `Property` by label.\n     *\n     * @param a first element\n     * @param b second element\n     * @return negative -1 if the first element is considered lower than the second, 1 if the second element is considered bigger, 0 if they are equal\n     */\n    static sortFunc(a: ResourceClass | Property, b: ResourceClass | Property) {\n        // dealing with 'undefined' labels\n        if (a.label === undefined) {\n            return 1;\n        } else if (b.label === undefined) {\n            return -1;\n        }\n\n        const labelA = a.label.toLowerCase();\n        const labelB = b.label.toLowerCase();\n\n        if (labelA < labelB) {\n            return -1;\n        } else if (labelA > labelB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Merge the given [[OntologyInformation]] into the current instance,\n     * updating the existing information.\n     * This is necessary when a service like the search fetches new results\n     * that have to be added to an existing collection.\n     * The existing ontology information must not be lost.\n     *\n     * @param {OntologyInformation} ontologyInfo the given definitions that have to be integrated.\n     * @returns void\n     */\n    updateOntologyInformation(ontologyInfo: OntologyInformation): void {\n\n        // get new resourceClassIrisForOntology\n        const newResourceClassesForOntology: ResourceClassIrisForOntology = ontologyInfo.getResourceClassForOntology();\n\n        // update new resourceClassIrisForOntology\n        // tslint:disable-next-line:forin\n        for (const newResClassForOntology in newResourceClassesForOntology) {\n            this.resourceClassesForOntology[newResClassForOntology] = newResourceClassesForOntology[newResClassForOntology];\n        }\n\n        // get new resource class definitions\n        const newResourceClasses = ontologyInfo.getResourceClasses();\n\n        // update resourceClasses\n        // tslint:disable-next-line:forin\n        for (const newResClass in newResourceClasses) {\n            this.resourceClasses[newResClass] = newResourceClasses[newResClass];\n        }\n\n        // get new property definitions\n        const newProperties = ontologyInfo.getProperties();\n\n        // update properties\n        // tslint:disable-next-line:forin\n        for (const newProp in newProperties) {\n            this.properties[newProp] = newProperties[newProp];\n        }\n\n    }\n\n    /**\n     * Returns resource class definitions for ontologies.\n     *\n     * @returns ResourceClassIrisForOntology - all resource class definitions grouped by ontologies.\n     */\n    getResourceClassForOntology(): ResourceClassIrisForOntology {\n        return this.resourceClassesForOntology;\n    }\n\n    /**\n     * Returns all resource classes as an object.\n     *\n     * @returns ResourceClasses - all resource class definitions as an object.\n     */\n    getResourceClasses(): ResourceClasses {\n        return this.resourceClasses;\n    }\n\n    /**\n     * Returns all resource classes as an array.\n     *\n     * @param {boolean} sortAsc sort resource classes by label in ascending order by default\n     * @returns ResourceClass[]\n     */\n    getResourceClassesAsArray(sortAsc: boolean = true): Array<ResourceClass> {\n\n        const resClasses: Array<ResourceClass> = [];\n\n        // tslint:disable-next-line:forin\n        for (const resClassIri in this.resourceClasses) {\n            const resClass: ResourceClass = this.resourceClasses[resClassIri];\n            resClasses.push(resClass);\n        }\n\n        // resourceClasses order by label in ascending order\n        resClasses.sort(OntologyInformation.sortFunc);\n\n        // resourceClasses order by label in descending order\n        if (!sortAsc) {\n            resClasses.reverse();\n        }\n\n        return resClasses;\n\n    }\n\n    /**\n     * Returns a resource class's label.\n     *\n     * @param {string} resClass resource class to query for.\n     * @returns string - the resource class's label.\n     */\n    getLabelForResourceClass(resClass: string): string {\n\n        if (resClass !== undefined) {\n\n            const resClassDef: ResourceClass = this.resourceClasses[resClass];\n\n            if (resClassDef !== undefined && resClassDef.label !== undefined) {\n                return resClassDef.label;\n            } else {\n                console.log(`cannot get label for ${resClass}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForResourceClass without argument resClass');\n        }\n    }\n\n    /**\n     * Returns all properties as an object.\n     *\n     * @returns Properties - all properties as an object.\n     */\n    getProperties(): Properties {\n        return this.properties;\n    }\n\n    /**\n     * Returns all properties as an array.\n     *\n     * @param {boolean} sortAsc sort properties by label in ascending order by default\n     * @returns Property[] - all properties as an array.\n     */\n    getPropertiesAsArray(sortAsc: boolean = true): Array<Property> {\n\n        const properties: Array<Property> = [];\n\n        // tslint:disable-next-line:forin\n        for (const propIri in this.properties) {\n            const prop: Property = this.properties[propIri];\n            properties.push(prop);\n        }\n\n        // properties order by label in ascending order\n        properties.sort(OntologyInformation.sortFunc);\n\n        // properties order by label in descending order\n        if (!sortAsc) {\n            properties.reverse();\n        }\n\n        return properties;\n\n    }\n\n    /**\n     * Returns a property's label.\n     *\n     * @param {string} property to query for.\n     * @returns string - the property's label.\n     */\n    getLabelForProperty(property: string): string {\n\n        if (property !== undefined) {\n\n            const propDef: Property = this.properties[property];\n\n            if (propDef !== undefined && propDef.label !== undefined) {\n                return propDef.label;\n            } else {\n                console.log(`cannot get label for ${property}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForProperty without argument property');\n        }\n    }\n\n}\n\n\n/**\n * Requests ontology information from Knora and caches it.\n * Other components or services obtain ontology information through this service.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class OntologyCacheService {\n\n    /**\n     * Ontologies ingored by this service.\n     * @param {string[]} excludedOntologies\n     */\n    private excludedOntologies: Array<string> = [KnoraConstants.SalsahGuiOntology, KnoraConstants.StandoffOntology];\n\n    /**\n     * @param {string[]} excludedProperties properties that Knora is not responsible for and that have to be ignored because they cannot be resolved at the moment.\n     */\n    private excludedProperties: Array<string> = [KnoraConstants.RdfsLabel];\n\n    /**\n     * @param {string[]} nonResourceClasses class definitions that are not be treated as Knora resource classes\n     */\n    private nonResourceClasses: Array<string> = [KnoraConstants.ForbiddenResource, KnoraConstants.XMLToStandoffMapping, KnoraConstants.ListNode];\n\n    /**\n     * @param {OntologyCache} cacheOntology central instance that caches all definitions\n     */\n    private cacheOntology: OntologyCache = new OntologyCache();\n\n    constructor(private _ontologyService: OntologyService) {\n    }\n\n    /**\n     * Requests the metadata of all ontologies from Knora.\n     *\n     * @returns Observable<object> - metadata for all ontologies as JSON-LD (no prefixes, all Iris fully expanded).\n     */\n    private getOntologiesMetadataFromKnora(): Observable<object> {\n\n        return this._ontologyService.getOntologiesMetadata().pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Requests all entity definitions (resource classes and properties) for the given ontology from Knora.\n     *\n     * @param {string} ontologyIri the Iri of the requested ontology.\n     * @returns Observable<object> - metadata for all entity definitions for ontology from Knora.\n     */\n    private getAllEntityDefinitionsForOntologyFromKnora(ontologyIri: string): Observable<object> {\n\n        return this._ontologyService.getAllEntityDefinitionsForOntologies(ontologyIri).pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Writes all the ontologies' metadata returned by Knora to the cache.\n     *\n     * @param {object[]} ontologies metadata of all existing ontologies as JSON-LD.\n     * @returns a new OntologyMetadata object\n     */\n    private convertAndWriteOntologiesMetadataToCache(ontologies: object[]) {\n\n        this.cacheOntology.ontologies = ontologies.map(\n            ontology => {\n                return new OntologyMetadata(ontology['@id'], ontology[KnoraConstants.RdfsLabel]);\n            }\n        );\n    }\n\n    /**\n     * Returns all ontologies' metadata from the cache and returns them.\n     *\n     * @returns Array<OntologyMetadata> - metadata of all existing ontologies.\n     */\n    private getAllOntologiesMetadataFromCache(): Array<OntologyMetadata> {\n\n        return this.cacheOntology.ontologies;\n\n    }\n\n    /**\n     * Returns resource class Iris from the ontology response.\n     * `knora-api:Resource` will be excluded.\n     *\n     * @param {Array<object>} classDefinitions the class definitions in an ontology response.\n     * @returns string[] - resource class Iris from the given class definitions.\n     */\n    private getResourceClassIrisFromOntologyResponse(classDefinitions: Array<object>): string[] {\n        const resourceClassIris: string[] = [];\n\n        for (const classDef of classDefinitions) {\n            const classIri = classDef['@id'];\n\n            // check that class name is not listed as a non resource class and that the isResourceClass flag is present and set to true\n            if (\n                classIri !== KnoraConstants.Resource && this.nonResourceClasses.indexOf(classIri)\n                === -1 && (classDef[KnoraConstants.IsResourceClass] !== undefined && classDef[KnoraConstants.IsResourceClass] === true)) {\n                // it is not a value class, but a resource class definition\n                resourceClassIris.push(classIri);\n            }\n        }\n\n        return resourceClassIris;\n    }\n\n    /**\n     * Converts a Knora response for all entity definitions for the requested ontology\n     * into an internal representation and caches it.\n     *\n     * Knora automatically includes the property definitions referred to in the cardinalities of resource classes.\n     * If they are defined in another ontology, that ontology is requested from Knora too.\n     *\n     * @param {Object} ontology the ontology to be cached.\n     * @returns void\n     */\n    private convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology: object): void {\n\n        const graph = ontology['@graph'];\n\n        // get all class definitions\n        const classDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlClass;\n            });\n\n        // get all property definitions\n        const propertyDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlObjectProperty ||\n                    entityType === KnoraConstants.OwlDatatypeProperty ||\n                    entityType === KnoraConstants.OwlAnnotationProperty ||\n                    entityType === KnoraConstants.RdfProperty;\n            });\n\n\n        // cache all resource class Iris belonging to the current ontology\n        this.cacheOntology.resourceClassIrisForOntology[ontology['@id']] = this.getResourceClassIrisFromOntologyResponse(classDefs);\n\n        // write class and property defintions to cache\n        this.convertAndWriteEntityDefinitionsToCache(classDefs, propertyDefs);\n\n    }\n\n    /**\n     * Returns definitions for the requested ontologies from the cache.\n     *\n     * @param {string[]} ontologyIris the ontologies for which definitions should be returned.\n     * @returns Observable<OntologyInformation> - the definitions for the requested ontologies.\n     */\n    private getOntologyInformationFromCache(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const resourceClassesForOntology = new ResourceClassIrisForOntology();\n\n        // collect resource class Iris for all requested named graphs\n        let allResourceClassIris = [];\n\n        for (const ontologyIri of ontologyIris) {\n\n            if (this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined) {\n                throw new OntologyCacheError(`getResourceClassesForOntologiesFromCache: ontology not found in cache: ${ontologyIri}`);\n            }\n\n            // add information for the given ontology\n            resourceClassesForOntology[ontologyIri] = this.cacheOntology.resourceClassIrisForOntology[ontologyIri];\n\n            // add all resource class Iris of this ontology\n            allResourceClassIris = allResourceClassIris.concat(this.cacheOntology.resourceClassIrisForOntology[ontologyIri]);\n        }\n\n        // get resource class definitions for all requested ontologies\n        return this.getResourceClassDefinitions(allResourceClassIris).pipe(\n            map(\n                resClassDefs => {\n                    return new OntologyInformation(\n                        resourceClassesForOntology, resClassDefs.getResourceClasses(), resClassDefs.getProperties()\n                    );\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora ontology response into an internal representation and caches it.\n     *\n     * @param {object[]} resourceClassDefinitions the resource class definitions returned by Knora.\n     * @param {object[]} propertyClassDefinitions the property definitions returned by Knora.\n     * @returns void\n     */\n    private convertAndWriteEntityDefinitionsToCache(resourceClassDefinitions: Array<object>, propertyClassDefinitions: Array<object>): void {\n\n        // convert and cache each given resource class definition\n        for (const resClass of resourceClassDefinitions) {\n\n            const resClassIri = resClass['@id'];\n\n            // represents all cardinalities of this resource class\n            const cardinalities: Cardinality[] = [];\n            const guiOrder: GuiOrder[] = [];\n\n            if (resClass[KnoraConstants.RdfsSubclassOf] !== undefined) {\n\n                let subclassOfCollection;\n\n                // check if it is a single object or a collection\n                if (!Array.isArray(resClass[KnoraConstants.RdfsSubclassOf])) {\n                    subclassOfCollection = [resClass[KnoraConstants.RdfsSubclassOf]];\n                } else {\n                    subclassOfCollection = resClass[KnoraConstants.RdfsSubclassOf];\n                }\n\n\n\n                // get cardinalities for the properties of a resource class\n                for (const curCard of subclassOfCollection) {\n\n\n\n                    // make sure it is a cardinality (it could also be an Iri of a superclass)\n                    if (curCard instanceof Object && curCard['@type'] !== undefined && curCard['@type'] === KnoraConstants.OwlRestriction) {\n\n                        let newCard;\n\n                        // get occurrence\n                        if (curCard[KnoraConstants.OwlMinCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.minCard, curCard[KnoraConstants.OwlMinCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.card, curCard[KnoraConstants.OwlCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlMaxCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.maxCard, curCard[KnoraConstants.OwlMaxCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else {\n                            // no known occurrence found\n                            throw new TypeError(`cardinality type invalid for ${resClass['@id']} ${curCard[KnoraConstants.OwlOnProperty]}`);\n                        }\n\n                        // add cardinality\n                        cardinalities.push(newCard);\n\n                        // get gui order\n                        let newGuiOrder;\n                        if (curCard[KnoraConstants.SalsahGuiOrder] !== undefined) {\n                            newGuiOrder = new GuiOrder(curCard[KnoraConstants.SalsahGuiOrder], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                            // add gui order\n                            guiOrder.push(newGuiOrder);\n                        }\n\n\n\n                    }\n\n                }\n            }\n\n            const resClassObj = new ResourceClass(\n                resClassIri,\n                resClass[KnoraConstants.ResourceIcon],\n                resClass[KnoraConstants.RdfsComment],\n                resClass[KnoraConstants.RdfsLabel],\n                cardinalities,\n                guiOrder\n            );\n\n            // write this resource class definition to the cache object\n            this.cacheOntology.resourceClasses[resClassIri] = resClassObj;\n        }\n\n        // cache the property definitions\n        this.convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyClassDefinitions);\n    }\n\n    /**\n     * Gets information about resource classes from the cache.\n     * The answer includes the property definitions referred to by the cardinalities of the given resource classes.\n     *\n     * @param {string[]} resClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - an [[OntologyCache]] representing the requested resource classes.\n     */\n    private getResourceClassDefinitionsFromCache(resClassIris: string[]): Observable<OntologyInformation> {\n        // collect the definitions for each resource class from the cache\n\n        const resClassDefs = new ResourceClasses();\n\n        // collect the properties from the cardinalities of the given resource classes\n        const propertyIris = [];\n\n        resClassIris.forEach(\n            resClassIri => {\n                resClassDefs[resClassIri] = this.cacheOntology.resourceClasses[resClassIri];\n\n                this.cacheOntology.resourceClasses[resClassIri].cardinalities.forEach(\n                    card => {\n                        // get property definition for each cardinality\n                        propertyIris.push(card.property);\n                    }\n                );\n            });\n\n        return this.getPropertyDefinitions(propertyIris).pipe(\n            map(\n                propDefs => {\n                    return new OntologyInformation(new ResourceClassIrisForOntology(), resClassDefs, propDefs.getProperties());\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora response for ontology information about properties\n     * into an internal representation and cache it.\n     *\n     * @param {object[]} propertyDefinitionsFromKnora the property definitions returned by Knora\n     * @returns void\n     */\n    private convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyDefinitionsFromKnora: Array<object>): void {\n\n        // convert and cache each given property definition\n        for (const propDef of propertyDefinitionsFromKnora) {\n\n            const propIri = propDef['@id'];\n\n            let isEditable = false;\n            if (propDef[KnoraConstants.isEditable] !== undefined && propDef[KnoraConstants.isEditable] === true) {\n                isEditable = true;\n            }\n\n            let isLinkProperty = false;\n            if (propDef[KnoraConstants.isLinkProperty] !== undefined && propDef[KnoraConstants.isLinkProperty] === true) {\n                isLinkProperty = true;\n            }\n\n            let isLinkValueProperty = false;\n            if (propDef[KnoraConstants.isLinkValueProperty] !== undefined && propDef[KnoraConstants.isLinkValueProperty] === true) {\n                isLinkValueProperty = true;\n            }\n\n            let subPropertyOf = [];\n            if (propDef[KnoraConstants.subPropertyOf] !== undefined && Array.isArray(propDef[KnoraConstants.subPropertyOf])) {\n                subPropertyOf = propDef[KnoraConstants.subPropertyOf].map((superProp: Object) => superProp['@id']);\n            } else if (propDef[KnoraConstants.subPropertyOf] !== undefined) {\n                subPropertyOf.push(propDef[KnoraConstants.subPropertyOf]['@id']);\n            }\n\n            let objectType;\n            if (propDef[KnoraConstants.ObjectType] !== undefined) {\n                objectType = propDef[KnoraConstants.ObjectType]['@id'];\n            }\n\n            const guiAttribute = [];\n            if (propDef[KnoraConstants.SalsahGuiAttribute] !== undefined) {\n                if (Array.isArray(propDef[KnoraConstants.SalsahGuiAttribute])) {\n                    for (const attr of propDef[KnoraConstants.SalsahGuiAttribute]) {\n                        guiAttribute.push(attr);\n                    }\n                } else {\n                    guiAttribute.push(propDef[KnoraConstants.SalsahGuiAttribute]);\n                }\n            }\n\n            // cache property definition\n            this.cacheOntology.properties[propIri] = new Property(\n                propIri,\n                objectType,\n                propDef[KnoraConstants.RdfsComment],\n                propDef[KnoraConstants.RdfsLabel],\n                subPropertyOf,\n                isEditable,\n                isLinkProperty,\n                isLinkValueProperty,\n                guiAttribute\n            );\n\n        }\n\n    }\n\n    /**\n     * Returns property definitions from the cache.\n     *\n     * @param {string[]} propertyIris the property definitions to be returned.\n     * @returns OntologyInformation - requested property defintions.\n     */\n    private getPropertyDefinitionsFromCache(propertyIris: string[]): OntologyInformation {\n\n        const propertyDefs = new Properties();\n\n        propertyIris.forEach(\n            propIri => {\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return;\n                }\n\n                if (this.cacheOntology.properties[propIri] === undefined) {\n                    throw new OntologyCacheError(`getPropertyDefinitionsFromCache: property not found in cache: ${propIri}`);\n                }\n\n                propertyDefs[propIri] = this.cacheOntology.properties[propIri];\n            }\n        );\n\n        return new OntologyInformation(new ResourceClassIrisForOntology(), new ResourceClasses(), propertyDefs);\n\n    }\n\n    /**\n     * Returns metadata about all ontologies.\n     *\n     * @returns Observable<Array<OntologyMetadata>> - metadata about all ontologies.\n     */\n    public getOntologiesMetadata(): Observable<Array<OntologyMetadata>> {\n\n        if (this.cacheOntology.ontologies.length === 0) {\n            // nothing in cache yet, get metadata from Knora\n            return this.getOntologiesMetadataFromKnora().pipe(\n                map(\n                    metadata => {\n                        this.convertAndWriteOntologiesMetadataToCache(metadata['@graph'].filter((onto) => {\n                            // ignore excluded ontologies\n                            return this.excludedOntologies.indexOf(onto['@id']) === -1;\n                        }));\n                        return this.getAllOntologiesMetadataFromCache();\n                    }\n                )\n            );\n        } else {\n            // return metadata from cache\n            return of(this.getAllOntologiesMetadataFromCache());\n        }\n\n    }\n\n\n    /**\n     * Requests the requested ontologies from Knora, adding them to the cache.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be requested.\n     * @returns Observable<any[]>\n     */\n    private getAndCacheOntologies(ontologyIris: string[]): Observable<any[]> {\n\n        // array to be populated with Observables\n        const observables = [];\n\n        // do a request for each ontology\n        ontologyIris.forEach(ontologyIri => {\n            // push an Observable onto `observables`\n            observables.push(this.getAllEntityDefinitionsForOntologyFromKnora(ontologyIri).pipe(\n                map(\n                    (ontology: object) => {\n                        // write response to cache\n                        this.convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology);\n                    }\n                )\n            ));\n        });\n\n        // forkJoin returns an Observable of an array of results\n        // returned by each Observable contained in `observables`\n        // a subscription to the Observable returned by forkJoin is executed\n        // once all Observables have been completed\n        return forkJoin(observables);\n    }\n\n\n    /**\n     * Returns the entity definitions for the requested ontologies.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be queried.\n     * @returns Observable<OntologyInformation> - all ontology metadata from the cache\n     */\n    public getEntityDefinitionsForOntologies(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const ontologyIrisToQuery = ontologyIris.filter(\n            ontologyIri => {\n                // return the ontology Iris that are not cached yet\n                return this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined;\n            });\n\n        // get ontologies that are mot cached yet\n        if (ontologyIrisToQuery.length > 0) {\n\n            return this.getAndCacheOntologies(ontologyIrisToQuery).pipe(\n                mergeMap(\n                    () => {\n                        // executed once all ontologies have been cached\n                        return this.getOntologyInformationFromCache(ontologyIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getOntologyInformationFromCache(ontologyIris);\n        }\n\n    }\n\n    /**\n     * Returns the definitions for the given resource class Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * Properties contained in the cardinalities will be returned too.\n     *\n     * @param {string[]} resourceClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - the requested resource classes (including properties).\n     */\n    public getResourceClassDefinitions(resourceClassIris: string[]): Observable<OntologyInformation> {\n\n        const resClassIrisToQueryFor: string[] = resourceClassIris.filter(\n            resClassIri => {\n\n                // return the resource class Iris that are not cached yet\n                return this.cacheOntology.resourceClasses[resClassIri] === undefined;\n\n            });\n\n        if (resClassIrisToQueryFor.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing resource classes\n            const ontologyIris: string[] = resClassIrisToQueryFor.map(\n                resClassIri => {\n                    return Utils.getOntologyIriFromEntityIri(resClassIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                mergeMap(\n                    () => {\n\n                        return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n\n        }\n    }\n\n    /**\n     * Get definitions for the given property Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be returned .\n     * @returns Observable<OntologyInformation> - the requested property definitions.\n     */\n    public getPropertyDefinitions(propertyIris: string[]): Observable<OntologyInformation> {\n\n        const propertiesToQuery: string[] = propertyIris.filter(\n            propIri => {\n\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return false;\n                }\n\n                // return the property Iris that are not cached yet\n                return this.cacheOntology.properties[propIri] === undefined;\n            }\n        );\n\n        if (propertiesToQuery.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing properties\n            const ontologyIris: string[] = propertiesToQuery.map(\n                propIri => {\n                    return Utils.getOntologyIriFromEntityIri(propIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                map(\n                    results => {\n                        if (results) {\n                            return this.getPropertyDefinitionsFromCache(propertyIris);\n                        } else {\n                            throw new Error('Problem with: return this.getPropertyDefinitionsFromCache(propertyIris);');\n                        }\n                    }\n                )\n            );\n        } else {\n            return of(this.getPropertyDefinitionsFromCache(propertyIris));\n        }\n    }\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('AuthenticationResponse')\nexport class AuthenticationResponse {\n\n    @JsonProperty('token', String)\n    public token: string = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n\n@JsonObject('Project')\nexport class Project {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('shortname', String)\n    public shortname: string = undefined;\n\n    @JsonProperty('shortcode', String, true)\n    public shortcode: string = undefined;\n\n    @JsonProperty('longname', String, true)\n    public longname: string = undefined;\n\n    @JsonProperty('description', [StringLiteral], true)\n    public description: StringLiteral[] = [new StringLiteral()];\n\n    @JsonProperty('keywords', [String], true)\n    public keywords: string[] = undefined;\n\n    @JsonProperty('logo', String, true)\n    public logo: string = undefined;\n\n    @JsonProperty('institution', String, true)\n    public institution: string = undefined;\n\n    @JsonProperty('ontologies', [String])\n    public ontologies: string[] = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from '../projects/project';\n\n@JsonObject('Group')\nexport class Group {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('description', String)\n    public description: string = undefined;\n\n    @JsonProperty('project', Project, false)\n    public project: Project = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupResponse')\nexport class GroupResponse {\n\n    @JsonProperty('group', Group)\n    public group: Group = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupsResponse')\nexport class GroupsResponse {\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListInfo')\nexport class ListInfo {\n\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('projectIri', String, false)\n    public projectIri: string = undefined;\n\n    @JsonProperty('labels', [StringLiteral], true)\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral], true)\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('ListNode')\nexport class ListNode {\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('label', String, true)\n    public label: string = undefined;\n\n    @JsonProperty('children', [ListNode], true)\n    public children: ListNode[] = undefined;\n\n    @JsonProperty('level', Number, true)\n    public level: number = undefined;\n\n    @JsonProperty('position', Number, true)\n    public position: number = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\nimport { ListNode } from './list-node';\n\n@JsonObject('List')\nexport class List {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n\n    @JsonProperty('children', [ListNode], false)\n    public children: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\n\n@JsonObject('ListInfoResponse')\nexport class ListInfoResponse {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListNodeInfo')\nexport class ListNodeInfo {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListNodeInfoResponse')\nexport class ListNodeInfoResponse {\n\n    @JsonProperty('nodeinfo', ListNodeInfo, false)\n    public nodeinfo: ListNodeInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { List } from './list';\n\n@JsonObject('ListResponse')\nexport class ListResponse {\n\n    @JsonProperty('list', List, false)\n    public list: List = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListsResponse')\nexport class ListsResponse {\n\n    @JsonProperty('lists', [ListNodeInfo], false)\n    public lists: ListNodeInfo[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('OntologyInfoShort')\nexport class OntologyInfoShort {\n\n    @JsonProperty('ontologyIri', String)\n    public ontologyIri: string = undefined;\n\n    @JsonProperty('ontologyName', String)\n    public ontologyName: string = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('PermissionData')\nexport class PermissionData {\n\n    @JsonProperty('groupsPerProject', Object)\n    public groupsPerProject: any = undefined;\n\n    @JsonProperty('administrativePermissionsPerProject', Object)\n    public administrativePermissionsPerProject: any = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from '../groups/group';\nimport { PermissionData } from '../permissions/permission-data';\nimport { Project } from '../projects/project';\n\n@JsonObject('User')\nexport class User {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('email', String)\n    public email: string = undefined;\n\n    @JsonProperty('username', String)\n    public username: string = undefined;\n\n    @JsonProperty('password', String, true)\n    public password: string = undefined;\n\n    @JsonProperty('token', String, true)\n    public token: string = undefined;\n\n    @JsonProperty('givenName', String)\n    public givenName: string = undefined;\n\n    @JsonProperty('familyName', String)\n    public familyName: string = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('lang', String)\n    public lang: string = undefined;\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n    @JsonProperty('sessionId', String, true)\n    public sessionId: string = undefined;\n\n    @JsonProperty('permissions', PermissionData)\n    public permissions: PermissionData = undefined;\n\n    @JsonProperty('systemAdmin', Boolean, true)\n    public systemAdmin?: boolean = false;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from '../users/user';\n\n@JsonObject('ProjectMembersResponse')\nexport class ProjectMembersResponse {\n    @JsonProperty('members', [User])\n    public members: User[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n\n@JsonObject('ProjectResponse')\nexport class ProjectResponse {\n\n    @JsonProperty('project', Project)\n    public project: Project = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n@JsonObject('ProjectsResponse')\nexport class ProjectsResponse {\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UsersResponse')\nexport class UsersResponse {\n\n    @JsonProperty('users', [User])\n    public users: User[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UserResponse')\nexport class UserResponse {\n\n    @JsonProperty('user', User)\n    public user: User = undefined;\n}\n","import { ReadResource } from '../../../';\nimport { OntologyInformation } from '../../../../services';\nimport { KnoraConstants } from '../../knora-constants';\nimport { DateRangeSalsah, DateSalsah } from '../../shared/date';\n\n/**\n * An abstract interface representing any value object.\n */\nexport interface ReadPropertyItem {\n\n    /**\n     * The value object's Iri.\n     */\n    readonly id: string;\n\n    /**\n     * The value object's type.\n     */\n    readonly type: string;\n\n    /**\n     * The property pointing to the value object.\n     */\n    readonly propIri: string;\n\n    /**\n     * Gets the class name of the class that implements this interface.\n     *\n     * @returns {string}\n     */\n    getClassName(): string;\n\n    /**\n     * Gets the value as a string (complexity of the value possibly reduced).\n     *\n     * @returns {string}\n     */\n    getContent(): string;\n}\n\n/**\n * Abstract class representing a text value object with or without markup.\n */\nexport abstract class ReadTextValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string = KnoraConstants.TextValue;\n\n    abstract propIri: string;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a text value object without markup (mere character string).\n */\nexport class ReadTextValueAsString extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly str: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsString;\n    }\n\n    getContent() {\n        return this.str;\n    }\n}\n\n/**\n * Represents resources referred to by standoff links.\n */\nexport class ReferredResourcesByStandoffLink {\n    [index: string]: ReadResource;\n}\n\n/**\n * Represents a text value object with markup that has been turned into HTML.\n */\nexport class ReadTextValueAsHtml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly html: string, readonly referredResources: ReferredResourcesByStandoffLink) {\n        super();\n    }\n\n    /**\n     * Gets information about a resource referred to by a standoff link from a text value.\n     *\n     * @param {string} resourceIri the Iri of the referred resource.\n     * @param {OntologyInformation} ontologyInfo ontology information.\n     * @returns {string} information about the referred resource's class and its label.\n     */\n\n\n    getReferredResourceInfo(resourceIri: string, ontologyInfo: OntologyInformation) {\n        if (this.referredResources !== undefined && this.referredResources[resourceIri] !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResources[resourceIri].type);\n\n            return this.referredResources[resourceIri].label + ` (${resClassLabel})`;\n        } else {\n            return 'no information found about referred resource (target of standoff link)';\n        }\n    }\n\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsHtml;\n    }\n\n    getContent() {\n        return this.html;\n    }\n\n}\n\n/**\n * Represents a text value object with markup as XML.\n */\nexport class ReadTextValueAsXml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly xml: string, readonly mappingIri: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsXml;\n    }\n\n    getContent() {\n        return this.xml;\n    }\n\n}\n\n\n/**\n * Represents a date value object.\n */\nexport class ReadDateValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly calendar: string,\n        readonly startYear: number,\n        readonly endYear: number,\n        readonly startEra: string,\n        readonly endEra: string,\n        readonly startMonth?: number,\n        readonly endMonth?: number,\n        readonly startDay?: number,\n        readonly endDay?: number) {\n    }\n\n    readonly type = KnoraConstants.DateValue;\n\n    private separator = '/';\n\n    getDateSalsah(): DateSalsah | DateRangeSalsah {\n        if (this.startYear === this.endYear && this.startMonth === this.endMonth && this.startDay === this.endDay && this.startEra === this.endEra) {\n            // precise date\n            return new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay);\n        } else {\n            // date period\n            return new DateRangeSalsah(new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay), new DateSalsah(this.calendar, this.endEra, this.endYear, this.endMonth, this.endDay));\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadDateValue;\n    }\n\n    getContent() {\n        return this.getDateSalsah().getDateAsString();\n    }\n}\n\n/**\n * Represents a link value object (reification).\n */\nexport class ReadLinkValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly referredResourceIri: string, readonly referredResource?: ReadResource) {\n\n    }\n\n    readonly type = KnoraConstants.LinkValue;\n\n    getReferredResourceInfo(ontologyInfo: OntologyInformation) {\n        if (this.referredResource !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResource.type);\n\n            return this.referredResource.label + ` (${resClassLabel})`;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadLinkValue;\n    }\n\n    getContent() {\n        if (this.referredResource !== undefined) {\n            return this.referredResource.label;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n}\n\n/**\n * Represents an integer value object.\n */\nexport class ReadIntegerValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly integer: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntegerValue;\n    }\n\n    getContent() {\n        return this.integer.toString();\n    }\n\n}\n\n/**\n * Represents a decimal value object.\n */\nexport class ReadDecimalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly decimal: number) {\n\n    }\n\n    readonly type = KnoraConstants.DecimalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDecimalValue;\n    }\n\n    getContent() {\n        return this.decimal.toString();\n    }\n}\n\n/**\n * Represents a still image value object.\n */\nexport class ReadStillImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly imageFilename: string,\n        readonly imageServerIIIFBaseURL: string,\n        readonly imagePath: string,\n        readonly dimX: number,\n        readonly dimY: number) {\n\n        // if the image is a jpeg, it is a preview image\n        this.isPreview = imageFilename.endsWith('.jpg');\n\n    }\n\n    readonly type = KnoraConstants.StillImageFileValue;\n\n    readonly isPreview: boolean;\n\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.imagePath;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.imageServerIIIFBaseURL + '/' + this.imageFilename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadStillImageFileValue;\n    }\n\n    getContent() {\n        return this.imagePath;\n    }\n}\n\n/**\n * Represents a moving image value object.\n */\nexport class ReadMovingImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly filename: string,\n        readonly mediaServerIIIFBaseURL: string,\n        readonly path: string,\n        readonly dimX: number,\n        readonly dimY: number,\n        readonly duration: number,\n        readonly fps?: number,\n        readonly aspectRatio?: string) {\n\n    }\n\n    readonly type = KnoraConstants.MovingImageFileValue;\n\n    // preview doesn't include the video file itself\n    readonly isPreview: boolean;\n\n    /*\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.path;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.mediaServerIIIFBaseURL + '/' + this.filename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n    */\n\n    getClassName(): string {\n        return KnoraConstants.ReadMovingImageFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a text representation value object\n */\nexport class ReadTextFileValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly textFilename: string, readonly textFileURL: string) {\n\n    }\n\n    readonly type = KnoraConstants.TextFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextFileValue;\n    }\n\n    getContent() {\n        return this.textFileURL;\n    }\n\n}\n\n/**\n * Represents a color value object.\n */\nexport class ReadColorValue implements ReadPropertyItem {\n\n    constructor(readonly id: string,\n        readonly propIri,\n        readonly colorHex: string) {\n    }\n\n    readonly type = KnoraConstants.ColorValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadColorValue;\n    }\n\n    getContent() {\n        return this.colorHex;\n    }\n}\n\n/**\n * Represents a point in a 2D-coordinate system (for geometry values).\n */\nexport class Point2D {\n    constructor(public x: number, public y: number) {\n    }\n}\n\n/**\n * Represents a geometry value parsed from JSON.\n */\nexport class RegionGeometry {\n    constructor(public status: string,\n        public lineColor: string,\n        public lineWidth: number,\n        public points: Point2D[],\n        public type: string,\n        public radius?: Point2D\n    ) {\n    }\n}\n\n/**\n * Represents a geometry value object.\n */\nexport class ReadGeomValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly geometryString: string) {\n\n        const geometryJSON = JSON.parse(geometryString);\n\n        const points: Point2D[] = [];\n        for (const point of geometryJSON.points) {\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        let radius;\n        if (geometryJSON.radius) {\n            radius = new Point2D(geometryJSON.radius.x, geometryJSON.radius.y);\n        }\n\n        this.geometry = new RegionGeometry(\n            geometryJSON.status,\n            geometryJSON.lineColor,\n            geometryJSON.lineWidth,\n            points,\n            geometryJSON.type,\n            radius\n        );\n\n    }\n\n    readonly geometry: RegionGeometry;\n\n    readonly type = KnoraConstants.GeomValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadGeomValue;\n    }\n\n    getContent() {\n        return this.geometryString;\n    }\n}\n\n/**\n * Represents a URI value object.\n */\nexport class ReadUriValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly uri: string) {\n\n    }\n\n    readonly type = KnoraConstants.UriValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadUriValue;\n    }\n\n    getContent() {\n        return this.uri;\n    }\n\n}\n\n/**\n * Represents a Boolean value object.\n */\nexport class ReadBooleanValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly bool: boolean) {\n\n    }\n\n    readonly type = KnoraConstants.BooleanValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadBooleanValue;\n    }\n\n    getContent() {\n        return this.bool.toString();\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadIntervalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly intervalStart: number, readonly intervalEnd: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntervalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntervalValue;\n    }\n\n    getContent() {\n        return this.intervalStart.toString() + '-' + this.intervalEnd;\n    }\n\n}\n\n/**\n * Represents a list value object.\n */\nexport class ReadListValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly listNodeIri: string) {\n\n    }\n\n    readonly type = KnoraConstants.ListValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadListValue;\n    }\n\n    getContent() {\n        return this.listNodeIri;\n    }\n\n}\n","import { ReadProperties, StillImageRepresentation } from '../../../';\n\n/**\n * Represents a resource and its properties.\n */\nexport class ReadResource {\n\n    /**\n     *\n     * @param {string} id the resource's Iri.\n     * @param {string} type the resource's type (class).\n     * @param {string} label the resource's rdfs:label.\n     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).\n     * @param {ReadProperties} properties the resources's properties.\n     */\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        // TODO: we should use a more generic object here; or what's about incomingSequences?\n        public incomingRegions: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation\n        public incomingStillImageRepresentations: Array<ReadResource>,\n        public incomingLinks: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like media or fileRepresentation\n        public stillImageRepresentationsToDisplay: StillImageRepresentation[],\n        // TODO: the properties should be a list: Array<ReadProperties> or not?\n        public readonly properties?: ReadProperties) {\n    }\n\n}\n\n/**\n * This is a temporary class, to test a new resource setup.\n * When it works, we will merge it with the ReadResource object\n */\nexport class Resource {\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        public incomingAnnotations: Array<Resource>,\n        public incomingFileRepresentations: Array<Resource>,\n        public incomingLinks: Array<ReadResource>,\n        public fileRepresentationsToDisplay: Array<ReadResource>,\n        public readonly properties?: ReadProperties) {\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceError } from '../declarations/api-service-error';\nimport { ApiServiceResult } from '../declarations/api-service-result';\nimport { from } from 'rxjs';\nimport { KuiCoreConfigToken } from '../core.module';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport abstract class ApiService {\n\n    // if is loading, set it true;\n    // it can be used in components\n    // for progress loader element\n    loading = false;\n\n    protected constructor(public http: HttpClient,\n                          @Inject(KuiCoreConfigToken) public config) {\n\n        // console.log('ApiService constructor: config', config);\n    }\n\n    /**\n     * GET\n     *\n     * @param {string} path the URL for the GET request.\n     * @param {HttpParams} params the parameters for the GET request.\n     * @returns Observable of any\n     */\n    httpGet(path: string, params?: HttpParams): Observable<any> {\n\n        this.loading = true;\n\n        return this.http.get(this.config.api + path, {observe: 'response', params: params}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * Processes JSON-LD returned by Knora.\n     * Expands Iris and creates an empty context object.\n     *\n     * @param {ApiServiceResult} resourceResponse\n     */\n    protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n        const resPromises = jsonld.promises;\n        // compact JSON-LD using an empty context: expands all Iris\n        const resPromise = resPromises.compact(resourceResponse.body, {});\n\n        // convert promise to Observable and return it\n        // https://www.learnrxjs.io/operators/creation/frompromise.html\n        return from(resPromise);\n\n    }\n\n    /**\n     * POST\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPost(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.post(this.config.api + path, body, {observe: 'response'}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * PUT\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPut(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.put(this.config.api + path, body, {observe: 'response'}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n    /**\n     * DELETE\n     *\n     * @param {string} path\n     * @returns Observable of any\n     */\n    httpDelete(path: string): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.delete(this.config.api + path, {observe: 'response'}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param {HttpErrorResponse} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        // console.error(error);\n        const serviceError = new ApiServiceError();\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n\n    /**\n     * handle json error in case of type error in json response (json2typescript)\n     *\n     * @param {any} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n        if (error instanceof ApiServiceError) return throwError(error);\n\n        const serviceError = new ApiServiceError();\n        serviceError.status = -1;\n        serviceError.statusText = 'Invalid JSON';\n        serviceError.errorInfo = error;\n        serviceError.url = '';\n        return throwError(serviceError);\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { NewOntology } from '../../declarations/api/v2/ontology/new-ontology';\nimport { ApiService } from '../api.service';\n\n/**\n * Requests ontology information from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------\n\n    /**\n     * DEPRECATED: You should use getAllOntologies()\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getOntologiesMetadata(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getAllOntologies(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the ontologies of a specific project\n     *\n     * @param projectIri\n     * @returns Observable<ApiServiceResult> - the metadata of project ontologies.\n     */\n    getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // GET ontology\n    // ------------------------------------------------------------------------\n\n    /**\n     * Requests all entity definitions for the given ontologies from Knora's ontologies route.\n     *\n     * @param {string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.\n     * @returns Observable<ApiServiceResult> - the requested ontology.\n     */\n    getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n    }\n\n    /**\n     * Requests information about the given resource classes from Knora's ontologies route.\n     *\n     * @param {string[]} resourceClassIris the Iris of the resource classes to be queried.\n     * @returns Observable<ApiServiceResult> - the requested resource class definitions.\n     */\n    getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n        if (resourceClassIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n        }\n\n        let resClassUriEnc = '';\n\n        resourceClassIris.forEach(function (resClassIri) {\n            resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n    }\n\n    /**\n     * Requests properties from Knora's ontologies route.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be queried.\n     * @returns Observable<ApiServiceResult> - the requested properties.\n     */\n    getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n        if (propertyIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n        }\n\n        let propertiesUriEnc = '';\n\n        propertyIris.forEach(function (resClassIri) {\n            propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new ontology.\n     *\n     * @param {NewOntology} data Data contains: projectIri, name, label\n     * @returns Observable<ApiServiceResult>\n     */\n    createOntology(data: NewOntology): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies';\n\n        const ontology = {\n            'knora-api:ontologyName': data.name,\n            'knora-api:attachedToProject': {\n                '@id': data.projectIri,\n            },\n            'rdfs:label': data.label,\n            '@context': {\n                'rdfs': KnoraConstants.RdfsSchema,\n                'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n            }\n        };\n\n        return this.httpPost(path, ontology).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { ReadResource } from './read-resource';\nimport { OntologyInformation } from '../../../../services/v2/ontology-cache.service';\n\n/**\n * Represents a sequence of resources.\n */\nexport class ReadResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `ReadResource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<ReadResource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor(public readonly resources: Array<ReadResource>, public readonly numberOfResources: number) {\n    }\n\n}\n","/**\n * Represents the result of a count query.\n */\nexport class CountQueryResult {\n\n    /**\n     *\n     * @param numberOfResults total number of results for a query.\n     */\n    constructor(public readonly numberOfResults: number) {\n\n    }\n}\n","import { ReadStillImageFileValue } from '../../../';\nimport { ImageRegion } from './image-region';\n\n/**\n * Represents an image including its regions.\n */\n\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param {ReadStillImageFileValue} stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param {ImageRegion[]} regions the regions belonging to the image.\n     */\n    constructor(readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: ImageRegion[]) {\n\n    }\n\n}\n","import { ReadGeomValue, ReadResource } from '../../../';\nimport { KnoraConstants } from '../../knora-constants';\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\n\nexport class ImageRegion {\n\n    /**\n     *\n     * @param {ReadResource} regionResource a resource of type Region\n     */\n    constructor(readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns {ReadGeomValue[]}\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, Group, GroupResponse, GroupsResponse } from '../../declarations/';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about group from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupsService extends ApiService {\n\n    private path: string = '/admin/groups';\n\n    /**\n     * Return a list of all groups.\n     *\n     * @returns Observable<Group[]>\n     */\n    getAllGroups(): Observable<Group[]> {\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a group object (filter by IRI).\n     *\n     * @param {string} iri\n     * @returns Observable<Group>\n     */\n    getGroupByIri(iri: string): Observable<Group> {\n        this.path += '/' + encodeURIComponent(iri);\n\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupResponse).group),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n    ApiServiceResult,\n    List,\n    ListCreatePayload,\n    ListInfo,\n    ListInfoResponse,\n    ListInfoUpdatePayload,\n    ListNodeInfo,\n    ListNodeInfoResponse,\n    ListResponse,\n    ListsResponse\n} from '../../declarations';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about lists from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all lists.\n     *\n     * @param {string} [projectIri]\n     * @returns Observable<ListNodeInfo[]>\n     */\n    getLists(projectIri?: string): Observable<ListNodeInfo[]> {\n        if (projectIri) {\n            this.path += '?projectIri=' + encodeURIComponent(projectIri);\n        }\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list object.\n     *\n     * @param {string} listIri\n     * @returns Observable<List>\n     */\n    getList(listIri: string): Observable<List> {\n        return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list info object.\n     *\n     * @param {string} listIri\n     * @returns Observable<ListInfo>\n     */\n    getListInfo(listIri: string): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(listIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list node info object.\n     *\n     * @param {string} nodeIri\n     * @returns Observable<ListNodeInfo>\n     */\n    getListNodeInfo(nodeIri: string): Observable<ListNodeInfo> {\n        this.path += '/nodes/' + encodeURIComponent(nodeIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeInfoResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new list.\n     *\n     * @param {ListCreatePayload} payload\n     * @returns Observable<List>\n     */\n    createList(payload: ListCreatePayload): Observable<List> {\n        return this.httpPost(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit list data.\n     *\n     * @param {ListInfoUpdatePayload} payload\n     * @returns Observable<ListInfo>\n     */\n    updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(payload.listIri);\n        return this.httpPut(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { ApiServiceResult, Project, ProjectMembersResponse, ProjectResponse, ProjectsResponse, User } from '../../declarations/';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about projects from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all projects.\n     *\n     * @returns Observable<Project[]>\n     */\n    getAllProjects(): Observable<Project[]> {\n        return this.httpGet('/admin/projects').pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    getProjectByIri(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortname(shortname: string): Observable<Project> {\n        const url = '/admin/projects/shortname/' + shortname;\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortcode(shortcode: string): Observable<Project> {\n        const url = '/admin/projects/shortcode/' + shortcode;\n        return this.getProject(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<Project>\n     */\n    protected getProject(url: string): Observable<Project> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is project id (iri).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByIri(iri: string): Observable<User[]> {\n        const url = '/admin/projects/iri/' + encodeURIComponent(iri) + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortname.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortname(shortname: string): Observable<User[]> {\n        const url = '/admin/projects/shortname/' + shortname + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortcode.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n        const url = '/admin/projects/shortcode/' + shortcode + '/members';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project member retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<User[]>\n     */\n     private getProjectMembers(url: string): Observable<User[]> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new project.\n     *\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    createProject(data: any): Observable<Project> {\n        const url: string = '/admin/projects';\n        return this.httpPost(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit project data.\n     *\n     * @param {string} iri identifier of the project\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    updateProject(iri: string, data: any): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate project (if it was deleted).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    activateProject(iri: string): Observable<Project> {\n        const data: any = {\n            status: true\n        };\n\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete (set inactive) project.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    deleteProject(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpDelete(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../api.service';\nimport {\n    ApiServiceResult,\n    Group,\n    GroupsResponse,\n    User,\n    UserResponse,\n    UsersResponse\n} from '../../declarations/';\n\n/**\n * This service uses the Knora admin API and handles all user data.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all users.\n     *\n     * @returns Observable<User[]>\n     */\n    getAllUsers(): Observable<User[]> {\n        return this.httpGet('/admin/users').pipe(\n            map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by username, email or by iri.\n     * @ignore\n     *\n     * @param  {string} identifier username, email or by iri\n     * @param  {String} identifierType\n     * @returns Observable<User>\n     */\n    private getUser(identifier: string, identifierType: String): Observable<User> {\n        const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by IRI\n     *\n     * @param  {string} iri\n     * @returns Observable<User>\n     */\n    getUserByIri(iri: string): Observable<User> {\n        return this.getUser(iri, 'iri');\n    }\n\n    /**\n     * Get user by email\n     *\n     * @param  {string} email\n     * @returns Observable<User>\n     */\n    getUserByEmail(email: string): Observable<User> {\n        return this.getUser(email, 'email');\n    }\n\n    /**\n     * Get user by username.\n     *\n     * @param  {string} username\n     * @returns Observable<User>\n     */\n    getUserByUsername(username: string): Observable<User> {\n        return this.getUser(username, 'username');\n    }\n\n    /**\n     * Get all groups, where the user is member of\n     *\n     * @param  {string} userIri\n     * @returns Observable<Group[]>\n     */\n    getUsersGroupMemberships(userIri: string): Observable<Group[]> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new user.\n     *\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    createUser(data: any): Observable<User> {\n        const path = '/admin/users';\n        return this.httpPost(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Remove user from project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Delete user from the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    addUserToGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    /**\n     * remove user from project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    removeUserFromGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n\n    /**\n     * Add user to the admin system.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    addUserToSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': true\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n\n    }\n\n    /**\n     * Remove user from the admin system.\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    removeUserFromSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': false\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n    }\n\n    /**\n     * Update user system admin membership\n     * @ignore\n     *\n     * @param {string} userIri\n     * @param {any} data\n     *\n     * @returns Observable<User>\n     */\n    private updateUserSystemAdmin(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    activateUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';\n\n        const data: any = {\n            status: true\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Update own password.\n     *\n     * @param {string} userIri\n     * @param {string} oldPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: oldPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update password of another user (not own).\n     *\n     * @param {string} userIri\n     * @param {string} requesterPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: requesterPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update basic user information: given name, family name\n     * @param userIri\n     * @param data\n     * @returns Observable<User>\n     */\n    updateBasicUserInformation(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete / deactivate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    deleteUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  private subject = new Subject<any>();\n\n  setLanguage(lang: string) {\n    this.subject.next({ var: lang });\n  }\n  getLanguage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KuiCoreConfig } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusMsgService {\n\n  constructor(private _http: HttpClient,\n    @Inject(KuiCoreConfigToken) public config) {\n  }\n\n  /**\n  * this method get the status messages from the statusMsg.json file\n  * which are defined here: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  * and here: http://www.w3schools.com/tags/ref_httpmessages.asp\n  *\n  */\n  getStatusMsg(): Observable<any> {\n\n    return this._http.get(this.config.app + '/assets/i18n/statusMsg.json')\n      .pipe(map(\n        (res: any) => {\n          return res;\n        },\n        err => {\n          console.error(err);\n        }\n      )\n      );\n\n  }\n}\n","import {\n    CountQueryResult,\n    KnoraConstants,\n    ReadBooleanValue,\n    ReadColorValue,\n    ReadDateValue,\n    ReadDecimalValue,\n    ReadGeomValue,\n    ReadIntegerValue,\n    ReadIntervalValue,\n    ReadLinkValue,\n    ReadListValue,\n    ReadProperties,\n    ReadPropertyItem,\n    ReadResource,\n    ReadResourcesSequence,\n    ReadStillImageFileValue,\n    ReadTextFileValue,\n    ReadTextValueAsHtml,\n    ReadTextValueAsString,\n    ReadTextValueAsXml,\n    ReadUriValue,\n    ReferredResourcesByStandoffLink,\n    Utils\n} from '../../declarations';\n\n/**\n * Contains methods to convert JSON-LD representing resources and properties to classes.\n * These methods works only for instances of resources and properties, not for ontologies (data model).\n */\nexport module ConvertJSONLD {\n\n    /**\n     * Function to be passed to a filter used on an array of property names\n     * sorting out all non value property names.\n     *\n     * Gets all property names that refer to value objects.\n     *\n     * @param propName the name of a property to be checked.\n     * @returns boolean - indicating if the name refers to a value property.\n     */\n    const getPropertyNames = (propName) => {\n        return propName !== '@id'\n            && propName !== '@type'\n            && propName !== KnoraConstants.RdfsLabel\n            && propName !== KnoraConstants.attachedToProject\n            && propName !== KnoraConstants.attachedToUser\n            && propName !== KnoraConstants.creationDate\n            && propName !== KnoraConstants.lastModificationDate\n            && propName !== KnoraConstants.hasPermissions\n            && propName !== KnoraConstants.userHasPermission\n            && propName !== KnoraConstants.ArkUrl\n            && propName !== KnoraConstants.versionArkUrl;\n    };\n\n\n    /**\n     * Constructs a [[ReadResource]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an a resource and its properties serialized as JSON-LD.\n     * @returns ReadResource\n     */\n    function constructReadResource(resourceJSONLD: object): ReadResource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new ReadResource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            properties\n        );\n    }\n\n    /**\n     * Constructs a [[ReadPropertyItem]] from JSON-LD,\n     * taking into account the property's value type.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {Object} propValue the value serialized as JSON-LD.\n     * @param {string} propIri the Iri of the property.\n     * @param {ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.\n     * @returns a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.\n     */\n    function createValueSpecificProp(\n        propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n        // convert a JSON-LD property value to a `ReadPropertyItem`\n\n        let valueSpecificProp: ReadPropertyItem;\n\n        // check for the property's value type\n        switch (propValue['@type']) {\n            case KnoraConstants.TextValue:\n                // a text value might be given as plain string, html or xml.\n                let textValue: ReadPropertyItem;\n\n                if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                    textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n                } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                    const referredResources: ReferredResourcesByStandoffLink = {};\n\n                    // check for standoff links and include referred resources, if any\n                    // when the user interacts with a standoff link, further information about the referred resource can be shown\n                    for (const standoffLink of standoffLinkValues) {\n                        const referredRes: ReadResource = standoffLink.referredResource;\n                        referredResources[referredRes.id] = referredRes;\n                    }\n\n                    textValue = new ReadTextValueAsHtml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                    );\n                } else if (\n                    propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                    textValue = new ReadTextValueAsXml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                    );\n                } else {\n                    // expected text value members not defined\n                    console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n                }\n\n                valueSpecificProp = textValue;\n                break;\n\n            case KnoraConstants.DateValue:\n                const dateValue = new ReadDateValue(propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.dateValueHasCalendar],\n                    propValue[KnoraConstants.dateValueHasStartYear],\n                    propValue[KnoraConstants.dateValueHasEndYear],\n                    propValue[KnoraConstants.dateValueHasStartEra],\n                    propValue[KnoraConstants.dateValueHasEndEra],\n                    propValue[KnoraConstants.dateValueHasStartMonth],\n                    propValue[KnoraConstants.dateValueHasEndMonth],\n                    propValue[KnoraConstants.dateValueHasStartDay],\n                    propValue[KnoraConstants.dateValueHasEndDay]);\n\n                valueSpecificProp = dateValue;\n                break;\n\n            case KnoraConstants.LinkValue:\n\n                let linkValue: ReadLinkValue;\n\n                // check if the referred resource is given as an object or just as an IRI\n                if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                    // linkValueHasTarget contains the object\n\n                    const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n                } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                    // linkValueHasTargetIri contains the resource's Iri\n\n                    const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n                } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // linkValueHasSource contains the object\n\n                    const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n                } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                    // linkValueHasSourceIri contains the resource's Iri\n\n                    const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n                }\n\n                valueSpecificProp = linkValue;\n                break;\n\n            case KnoraConstants.IntValue:\n\n                const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n                valueSpecificProp = intValue;\n\n                break;\n\n            case KnoraConstants.DecimalValue:\n\n                // a decimal value is represented as a string in order to preserve its precision\n                const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n                const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n                valueSpecificProp = decimalValue;\n\n                break;\n\n            // TODO: handle movingImageFileValue and the others here...\n            case KnoraConstants.StillImageFileValue:\n\n                const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.stillImageFileValueHasDimX],\n                    propValue[KnoraConstants.stillImageFileValueHasDimY]\n                );\n\n                valueSpecificProp = stillImageFileValue;\n\n                break;\n\n            case KnoraConstants.TextFileValue:\n\n                const textFileValue = new ReadTextFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = textFileValue;\n\n                break;\n\n            case KnoraConstants.ColorValue:\n\n                const readColorValue: ReadColorValue = new ReadColorValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.colorValueAsColor]\n                );\n\n                valueSpecificProp = readColorValue;\n\n                break;\n\n            case KnoraConstants.GeomValue:\n\n                const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.geometryValueAsGeometry]\n                );\n\n                valueSpecificProp = readGeomValue;\n\n                break;\n\n            case KnoraConstants.UriValue:\n\n                const uriValue: ReadUriValue = new ReadUriValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.uriValueAsUri]['@value']\n                );\n\n                valueSpecificProp = uriValue;\n\n                break;\n\n            case KnoraConstants.BooleanValue:\n\n                const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.booleanValueAsBoolean]\n                );\n\n                valueSpecificProp = boolValue;\n\n                break;\n\n\n            case KnoraConstants.IntervalValue:\n\n                // represented as strings to preserve precision\n                const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n                const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n                const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                    propValue['@id'],\n                    propIri,\n                    intStart,\n                    intEnd\n                );\n\n                valueSpecificProp = intervalValue;\n\n                break;\n\n            case KnoraConstants.ListValue:\n\n                const listValue: ReadListValue = new ReadListValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.listValueAsListNode]['@id']\n                );\n\n                valueSpecificProp = listValue;\n\n                break;\n\n            default:\n                // unsupported value type\n                console.error('ERROR: value type not implemented yet: ' + propValue['@type'] + '(' + propValue['@id'] + ')');\n                break;\n        }\n\n        return valueSpecificProp;\n\n    }\n\n\n    /**\n     * Construct a [[ReadProperties]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an object describing the resource and its properties.\n     * @returns ReadProperties\n     */\n    function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n        // JSON-LD representing standoff link values\n        // text values may contain standoff links\n        const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n        // to be populated with standoff link values\n        const standoffLinkValues: ReadLinkValue[] = [];\n\n        // convert each standoff link value JSON-LD object to a ReadLinkValue\n        // in order populate the collection with all the standoff link values\n        if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n            for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n                const standoffVal: ReadLinkValue = createValueSpecificProp(\n                    standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n                ) as ReadLinkValue;\n\n                standoffLinkValues.push(standoffVal);\n            }\n        } else if (standoffLinkValuesJSONLD !== undefined) {\n            const standoffVal = createValueSpecificProp(\n                standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n\n        let propNames = Object.keys(resourceJSONLD);\n\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const properties: ReadProperties = {};\n\n        // iterate over all the given property names\n        for (const propName of propNames) {\n\n            const propValues: Array<ReadPropertyItem> = [];\n\n            // either an array of values or just one value is given\n            if (Array.isArray(resourceJSONLD[propName])) {\n                // array of values\n\n                // for each property name, an array of property values is given, iterate over it\n                for (const propValue of resourceJSONLD[propName]) {\n\n                    // convert a JSON-LD property value to a `ReadPropertyItem`\n                    const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                    // if it is undefined, the value could not be constructed correctly\n                    // add the property value to the array of property values\n                    if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n                }\n            } else {\n                // only one value\n\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n            }\n\n            // add the property to the properties object\n            properties[propName] = propValues;\n\n        }\n\n        return properties;\n    }\n\n    /**\n     * Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.\n     * @returns ReadResourcesSequence - sequence of read resources\n     */\n    export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n        const resources: Array<ReadResource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ReadResourcesSequence(resources, numberOfResources);\n\n    }\n\n    /**\n     * Collects all the types (classes) of referred resources from a given resource (from its linking properties).\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD JSON-LD describing one resource.\n     * @return string[] - an Array of resource class Iris (including duplicates).\n     */\n    function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n        let propNames = Object.keys(resourceJSONLD);\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const referredResourceClasses = [];\n\n        for (const prop of propNames) {\n\n            // several values given for this property\n            if (Array.isArray(resourceJSONLD[prop])) {\n\n                for (const referredRes of resourceJSONLD[prop]) {\n\n                    // if the property is a LinkValue and it contains an embedded resource, get its type\n                    if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                        // target resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                    } else if (\n                        referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                        // source resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                    }\n\n                }\n            } else {\n                // only one value given for this property\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                    !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                    !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n                }\n            }\n\n        }\n\n        return referredResourceClasses;\n\n    }\n\n    /**\n     * Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.\n     * @returns string[] - the resource class Iris (without duplicates).\n     */\n    export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n        let resourceClasses: Array<string> = [];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n\n            for (const resourceJSONLD of resourcesGraph) {\n                // get class of the current resource\n                resourceClasses.push(resourceJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n            }\n\n        } else {\n            // only one resource\n\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                return [];\n            } else {\n                resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n            }\n        }\n\n        // filter out duplicates\n        return resourceClasses.filter(Utils.filterOutDuplicates);\n\n    }\n\n    /**\n     * Turns a JSON-LD response to a count query into a `CountQueryResult`.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param countQueryJSONLD\n     * @returns {CountQueryResult}\n     */\n    export function createCountQueryResult(countQueryJSONLD: object) {\n        return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ApiServiceError, ApiServiceResult, KuiCoreConfig, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n/**\n * Requests representation of resources from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject(KuiCoreConfigToken) public config,\n                private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns Observable<ApiServiceResult>\n     */\n    getResource(iri): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource as a `ReadResourceSequence`.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        // TODO: handle case of an ApiServiceError\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n    // TODO: post, put, delete\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceResult, CountQueryResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\nexport interface FulltextSearchParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n\n    limitToStandoffClass?: string;\n}\n\nexport interface SearchByLabelParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n}\n\n/**\n * Performs searches (fulltext or extended) and search count queries into Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor(public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Assign fulltext search params to http params.\n     *\n     * @param {FulltextSearchParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processFulltextSearchParams(params: FulltextSearchParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToStandoffClass !== undefined) {\n            searchParams = searchParams.set('limitToStandoffClass', params.limitToStandoffClass);\n        }\n\n        return searchParams;\n\n    }\n    /**\n     * Assign search by label search params to http params.\n     *\n     * @param {SearchByLabelParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processSearchByLabelParams(params: SearchByLabelParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        return searchParams;\n\n    }\n\n    /**\n     * Converts a JSON-LD object to a `ReadResorceSequence`.\n     * To be passed as a function pointer (arrow notation required).\n     *\n     * @param {Object} resourceResponse\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ReadResourceSequence\n        const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ReadResourceSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search.\n     * TODO: mark as deprecated, use of `doFullTextSearchReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearch(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ReadResourcesSequence> {\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res: Observable<any> = this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search count query.\n     * TODO: mark as deprecated, use of `doFullTextSearchCountQueryCountQueryResult` recommended\n     *\n     * @param searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearchCountQuery(searchTerm: string, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<CountQueryResult>\n     */\n    doFullTextSearchCountQueryCountQueryResult(searchTerm: string, params?: FulltextSearchParams): Observable<CountQueryResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        return this.httpPost('/v2/searchextended', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search count query.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param {string} gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label.\n     * TODO: mark as deprecated, use of `searchByLabelReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabel(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        // httpGet() expects only one argument, not 2\n        return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label and turns the results in a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabelReadResourceSequence(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ReadResourcesSequence> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { ReadResourcesSequence } from '../../declarations';\n\n/**\n * Requests incoming information (regions, links, stillImageRepresentations) from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IncomingService extends SearchService {\n\n    /**\n    * Returns all incoming regions for a particular resource.\n    *\n    * @param {string} resourceIRI the Iri of the resource whose Incoming regions should be returned.\n    * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n    * @returns {Observable<any>}\n    */\n    getIncomingRegions(resourceIRI: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n        // console.log('sparqlQueryStr ', sparqlQueryStr);\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n    /**\n     * Returns all the StillImageRepresentations for the given resource, if any.\n     * StillImageRepresentations link to the given resource via knora-base:isPartOf.\n     *\n     * @param {string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n\n    }\n\n\n    /**\n     * Returns all incoming links for the given resource Iri but incoming regions and still image representations.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinksForResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n/**\n * Represents the parameters of an extended search.\n */\nexport class ExtendedSearchParams {\n\n    /**\n     *\n     * @param generateGravsearch a function that generates a Gravsearch query.\n     *\n     *                           The function takes the offset\n     *                           as a parameter and returns a Gravsearch query string.\n     *                           Returns false if not set correctly (init state).\n     */\n    constructor(public generateGravsearch: (offset: number) => string | boolean) {\n\n    }\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\n/**\n * Temporarily stores the parameters of an extended search.\n */\nexport class SearchParamsService {\n\n    private _currentSearchParams;\n\n    constructor() {\n        // init with a dummy function that returns false\n        // if the application is reloaded, this will be returned\n        this._currentSearchParams = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => false));\n    }\n\n    /**\n     * Updates the parameters of an extended search.\n     *\n     * @param {ExtendedSearchParams} searchParams\n     * @returns void\n     */\n    changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n        this._currentSearchParams.next(searchParams);\n    }\n\n    /**\n     * Gets the search params of an extended search.\n     *\n     * @returns ExtendedSearchParams - search parameters\n     */\n    getSearchParams(): ExtendedSearchParams {\n        return this._currentSearchParams.getValue();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExtendedSearchParams, SearchParamsService } from './search-params.service';\nimport { KnoraConstants, KnoraSchema } from '../../declarations';\nimport { PropertyWithValue } from '../../declarations/api/operators';\n\n/**\n * Create GravSearch queries from provided parameters.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GravsearchGenerationService {\n\n    /**\n     * @ignore\n     *\n     * Map of complex knora-api value types to simple ones.\n     * Use computed property name: http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer.\n     */\n    public static typeConversionComplexToSimple = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.xsdInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.xsdDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.xsdBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.xsdString,\n        'http://api.knora.org/ontology/knora-api/v2#DateValue': KnoraConstants.dateSimple,\n        'http://api.knora.org/ontology/knora-api/v2#IntervalValue': KnoraConstants.intervalSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeomValue': KnoraConstants.geomSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ColorValue': KnoraConstants.colorSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeonameValue': KnoraConstants.geonameSimple,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.xsdUri,\n        'http://api.knora.org/ontology/knora-api/v2#StillImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#FileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DDDFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#AudioFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DocumentFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#TextFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listNodeSimple\n    };\n\n    public static complexTypeToProp = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.integerValueAsInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.decimalValueAsDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.booleanValueAsBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.valueAsString,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.uriValueAsUri,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listValueAsListNode\n    };\n\n    constructor(private _searchParamsService: SearchParamsService) { }\n\n    /**\n     * Generates a Gravsearch query from the provided arguments.\n     *\n     * @param {PropertyWithValue[]} properties the properties specified by the user.\n     * @param {string} [mainResourceClassOption] the class of the main resource, if specified.\n     * @param {number} offset the offset to be used (nth page of results).\n     * @returns string - a KnarQL query string.\n     */\n    createGravsearchQuery(properties: PropertyWithValue[], mainResourceClassOption?: string, offset: number = 0): string {\n\n        // class restriction for the resource searched for\n        let mainResourceClass = '';\n\n        // if given, create the class restriction for the main resource\n        if (mainResourceClassOption !== undefined) {\n            mainResourceClass = `?mainRes a <${mainResourceClassOption}> .`;\n        }\n\n        // criteria for the order by statement\n        const orderByCriteria = [];\n\n        // statements to be returned in query results\n        const returnStatements = [];\n\n        // loop over given properties and create statements and filters from them\n        const props: string[] = properties.map(\n            (propWithVal: PropertyWithValue, index: number) => {\n\n                // represents the object of a statement\n                let propValue;\n                if (!propWithVal.property.isLinkProperty || propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Exists') {\n                    // it is not a linking property, create a variable for the value (to be used by a subsequent FILTER)\n                    // OR the comparison operator Exists is used in which case we do not need to specify the object any further\n                    propValue = `?propVal${index}`;\n                } else {\n                    // it is a linking property and the comparison operator is not Exists, use its IRI\n                    propValue = propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex);\n                }\n\n                // generate statement\n                let statement: string = `?mainRes <${propWithVal.property.id}> ${propValue} .`;\n\n                // check if it is a linking property that has to be wrapped in a FILTER NOT EXISTS (comparison operator NOT_EQUALS) to negate it\n                if (propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                    // do not include statement in results, because the query checks for the absence of this statement\n                    statement = `FILTER NOT EXISTS {\n${statement}\n\n\n}`;\n                } else {\n                    // TODO: check if statement should be returned returned in results (Boolean flag from checkbox)\n                    returnStatements.push(statement);\n                    statement = `\n${statement}\n\n\n`;\n                }\n\n                // generate restricting expression (e.g., a FILTER) if comparison operator is not Exists\n                let restriction: string = '';\n                // only create a FILTER if the comparison operator is not EXISTS and it is not a linking property\n                if (!propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() !== 'Exists') {\n                    // generate variable for value literal\n                    const propValueLiteral = `${propValue}Literal`;\n\n                    if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Like') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use regex function for LIKE\n                        restriction += `FILTER regex(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}, \"i\")`;\n                    } else if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Match') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use contains function for MATCH\n                        restriction += `FILTER <${KnoraConstants.matchFunction}>(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.DateValue) {\n                        // handle date property\n                        restriction = `FILTER(knora-api:toSimpleDate(${propValue}) ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.ListValue) {\n                        // handle list node\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}` + '\\n';\n                        // check for comparison operator \"not equals\"\n                        if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                            restriction = `FILTER NOT EXISTS {\n                                ${restriction}\n                            }`;\n                        }\n                    } else {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // generate filter expression\n                        restriction += `FILTER(${propValueLiteral} ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    }\n                }\n\n                // check if current value is a sort criterion\n                if (propWithVal.isSortCriterion) orderByCriteria.push(propValue);\n\n                return `${statement}\n${restriction}\n`;\n\n            });\n\n        let orderByStatement = '';\n\n        if (orderByCriteria.length > 0) {\n            orderByStatement = `\nORDER BY ${orderByCriteria.join(' ')}\n`;\n        }\n\n        // template of the Gravsearch query with dynamic components\n        const gravsearchTemplate = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/v2#>\nCONSTRUCT {\n\n?mainRes knora-api:isMainResource true .\n\n${returnStatements.join('\\n')}\n\n} WHERE {\n\n?mainRes a knora-api:Resource .\n\n${mainResourceClass}\n\n${props.join('')}\n\n}\n${orderByStatement}`;\n\n        // offset component of the Gravsearch query\n        const offsetTemplate = `\nOFFSET ${offset}\n`;\n\n        // function that generates the same KnarQL query with the given offset\n        const generateGravsearchQueryWithCustomOffset = (localOffset: number): string => {\n            const offsetCustomTemplate = `\nOFFSET ${localOffset}\n`;\n\n            return gravsearchTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another KnarQL query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(new ExtendedSearchParams(generateGravsearchQueryWithCustomOffset));\n        }\n\n\n        return gravsearchTemplate + offsetTemplate;\n\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KuiCoreConfig, RdfDataObject, ResetTriplestoreContentResponse } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor(private http: HttpClient, @Inject(KuiCoreConfigToken) public config) { }\n\n  /**\n     * Resets the content of the triplestore.\n     *\n     * @param rdfDataObjects\n     * @returns Observable<string>\n     */\n  resetTriplestoreContent(rdfDataObjects: RdfDataObject[]): Observable<string> {\n\n    return this.http.post<ResetTriplestoreContentResponse>(this.config.api + '/admin/store/ResetTriplestoreContent', rdfDataObjects)\n      .pipe(\n        map(\n          (data) => {\n            const result: ResetTriplestoreContentResponse = data;\n            // console.log('StoreService - resetTriplestoreContent: ', result);\n            return result.message;\n          },\n          (error: HttpErrorResponse) => {\n            if (error.error instanceof Error) {\n              console.log('StoreService - resetTriplestoreContent - Client-side error occurred.', error);\n            } else {\n              console.log('StoreService - resetTriplestoreContent - Server-side error occurred.', error);\n            }\n            throw error;\n          }\n        ));\n\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicOntologyService extends ApiService {\n\n  /**\n     * returns our list of a basic ontology\n     *\n     * @returns {Observable<any>}\n     */\n  // getBasicOntology(): Observable<any> {\n  //     let url = environment.url;\n  //     return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  // }\n  getBasicOntology(): Observable<any> {\n    const url = this.config.app;\n    return this.httpGet(url + '/data/base-data/basic-ontology.json');\n    // return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceTypesService extends ApiService {\n\n  /**\n     * Get all resource types defined by the vocabulary.\n     *\n     * @param {string} iri Vocabulary iri\n     * @returns Observable<any>\n     */\n  getResourceTypesByVoc(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes?vocabulary=' + encodeURIComponent(iri));\n  }\n\n  /**\n   * Get a specific resource type.\n   *\n   * @param {string} iri resource type iri\n   * @returns Observable<any>\n   */\n  getResourceType(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes/' + encodeURIComponent(iri));\n  }\n\n\n  // putResourceType(iri)\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiServiceError, ApiServiceResult } from '../../declarations';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject(KuiCoreConfigToken) public config) {\n        super(http, config);\n    }\n\n    /**\n     * Gets a hierarchical list from Knora.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListFromKnora(rootNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/lists/' + encodeURIComponent(rootNodeIri));\n    }\n\n    /**\n     * Returns a list as expanded JSON-LD.\n     *\n     * @param {string} rootNodeIri the root node of the list.\n     * @return {Observable<object>} the expanded JSON-LD.\n     */\n    getList(rootNodeIri: string): Observable<object> {\n        const listJSONLD = this.getListFromKnora(rootNodeIri);\n\n        return listJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n\n    /**\n     * Gets a list node from Knora.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListNodeFromKnora(listNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/node/' + encodeURIComponent(listNodeIri));\n    }\n\n    /**\n     * Returns a list node as expanded JSON-LD.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<object> {\n\n        const listNodeJSONLD = this.getListNodeFromKnora(listNodeIri);\n\n        return listNodeJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ListService } from './list.service';\n\n/**\n * Represents a list node v2.\n */\nexport class ListNodeV2 {\n\n    readonly children: ListNodeV2[];\n\n    readonly isRootNode: boolean;\n\n    constructor(readonly id: string, readonly label: string, readonly position?: number, readonly hasRootNode?: string) {\n\n        // if hasRootNode is not given, this node is the root node.\n        this.isRootNode = (hasRootNode === undefined);\n\n        this.children = [];\n    }\n}\n\nclass ListCache {\n\n    [index: string]: ListNodeV2;\n\n}\n\nclass ListNodeIriToListNodeV2 {\n\n    [index: string]: ListNodeV2;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListCacheService {\n\n    private listCache = new ListCache();\n\n    private listNodeIriToListNodeV2 = new ListNodeIriToListNodeV2();\n\n    constructor(private _listService: ListService) {\n    }\n\n    private hasRootNode(listJSONLD) {\n        let hasRoot;\n\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode'] !== undefined) {\n            hasRoot = listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode']['@id'];\n        }\n\n        return hasRoot;\n    }\n\n    /**\n     * Converts a JSON-LD represention of a ListNodeV2 to  a `ListNodeV2`.\n     * Recursively converts child nodes.\n     *\n     * @param {object} listJSONLD the JSON-LD representation of a list node v2.\n     * @return {ListNodeV2}\n     */\n    private convertJSONLDToListNode: (listJSONLD: object) => ListNodeV2 = (listJSONLD: object) => {\n\n        const listNodeIri = listJSONLD['@id'];\n\n        const hasRootNode = this.hasRootNode(listJSONLD);\n\n        const listNode = new ListNodeV2(\n            listNodeIri,\n            listJSONLD['http://www.w3.org/2000/01/rdf-schema#label'],\n            listJSONLD['http://api.knora.org/ontology/knora-api/v2#listNodePosition'],\n            hasRootNode\n        );\n\n        // check if there are child nodes\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'] !== undefined) {\n\n            if (Array.isArray(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'])) {\n                // array of child nodes\n                for (const subListNode of listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']) {\n                    listNode.children.push(this.convertJSONLDToListNode(subListNode));\n                }\n            } else {\n                // single child node\n                listNode.children.push(this.convertJSONLDToListNode(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']));\n            }\n\n        }\n\n        this.listNodeIriToListNodeV2[listNodeIri] = listNode;\n\n        return listNode;\n    };\n\n    /**\n     * Gets a list from the cache or requests it from Knora and caches it.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ListNodeV2>}\n     */\n    getList(rootNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list is already in cache\n        if (this.listCache[rootNodeIri] !== undefined) {\n\n            // return list from cache\n            return of(this.listCache[rootNodeIri]);\n\n        } else {\n            // get list from Knora and cache it\n\n            const listJSONLD = this._listService.getList(rootNodeIri);\n\n            const listV2: Observable<ListNodeV2> = listJSONLD.pipe(\n                map(\n                    this.convertJSONLDToListNode\n                )\n            );\n\n            return listV2.pipe(\n                map(\n                    (list: ListNodeV2) => {\n                        // write list to cache and return it\n                        this.listCache[rootNodeIri] = list;\n                        return list;\n                    }\n                )\n            );\n        }\n    }\n\n    /**\n     * Gets a list node from the cache or requests the whole list from Knora and caches it.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list node is already in cache\n        if (this.listNodeIriToListNodeV2[listNodeIri] !== undefined) {\n\n            // list node is already cached\n            return of(this.listNodeIriToListNodeV2[listNodeIri]);\n\n        } else {\n\n            const listNode = this._listService.getListNode(listNodeIri);\n\n            return listNode.pipe(\n                mergeMap(\n                    (listNodeJSONLD: object) => {\n                        const hasRootNode = this.hasRootNode(listNodeJSONLD);\n\n                        if (hasRootNode !== undefined) {\n                            // get the whole list\n                            return this.getList(hasRootNode).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        } else {\n                            // this is the root node, get the whole list\n                            return this.getList(listNodeIri).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        }\n                    }\n                )\n            );\n        }\n    }\n}\n","import { KnoraConstants, KnoraSchema } from './knora-constants';\nimport { GravsearchGenerationService, Property } from '../../services';\n\n\n/**\n * An abstract interface representing a comparison operator.\n * This interface is implemented for the supported comparison operators.\n */\nexport interface ComparisonOperator {\n\n    // type of comparison operator\n    type: string;\n\n    // the label of the comparison operator to be presented to the user.\n    label: string;\n\n    // returns the class name when called on an instance\n    getClassName(): string;\n}\n\nexport class Equals implements ComparisonOperator {\n\n    type = KnoraConstants.EqualsComparisonOperator;\n    label = KnoraConstants.EqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Equals';\n    }\n}\n\n\nexport class NotEquals implements ComparisonOperator {\n\n    type = KnoraConstants.NotEqualsComparisonOperator;\n    label = KnoraConstants.NotEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'NotEquals';\n    }\n}\n\nexport class GreaterThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanEqualsComparisonOperator;\n    label = KnoraConstants.GreaterThanEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThanEquals';\n    }\n}\n\nexport class GreaterThan implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanComparisonOperator;\n    label = KnoraConstants.GreaterThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThan';\n    }\n}\n\nexport class LessThan implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanComparisonOperator;\n    label = KnoraConstants.LessThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThan';\n    }\n}\n\nexport class LessThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanEqualsComparisonOperator;\n    label = KnoraConstants.LessThanQualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThanEquals';\n    }\n}\n\n\nexport class Exists implements ComparisonOperator {\n\n    type = KnoraConstants.ExistsComparisonOperator;\n    label = KnoraConstants.ExistsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Exists';\n    }\n}\n\nexport class Like implements ComparisonOperator {\n\n    type = KnoraConstants.LikeComparisonOperator;\n    label = KnoraConstants.LikeComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Like';\n    }\n\n}\n\nexport class Match implements ComparisonOperator {\n\n    type = KnoraConstants.MatchComparisonOperator;\n    label = KnoraConstants.MatchComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Match';\n    }\n\n}\n\n/**\n * Combination of a comparison operator and a value literal or an IRI.\n * In case the comparison operator is 'Exists', no value is given.\n */\nexport class ComparisonOperatorAndValue {\n\n    constructor(readonly comparisonOperator: ComparisonOperator, readonly value?: Value) {\n    }\n}\n\n/**\n * An abstract interface representing a value: an IRI or a literal.\n */\nexport interface Value {\n\n    /**\n     * Turns the value into a SPARQL string representation.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string} SPARQL representation of the value.\n     */\n    toSparql(schema: KnoraSchema): string;\n\n}\n\n/**\n * Represents a property's value as a literal with the indication of its type.\n */\nexport class ValueLiteral implements Value {\n\n    /**\n     * Constructs a [ValueLiteral].\n     *\n     * @param {string} value the literal representation of the value.\n     * @param {string} type the type of the value (making use of xsd).\n     */\n    constructor(\n        public readonly value: string,\n        public readonly type: string) {\n    }\n\n\n    /**\n     * Creates a type annotated value literal to be used in a SPARQL query.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n\n        let literalType: string;\n\n        // check if a Knora schema conversion is necessary, e.g., knora-api:dateValue (complex) to knora-api:date (simple).\n        // xsd types will remain unchanged\n        if (schema === KnoraSchema.simple && GravsearchGenerationService.typeConversionComplexToSimple[this.type] !== undefined) {\n            // convert to simple schema\n            literalType = GravsearchGenerationService.typeConversionComplexToSimple[this.type];\n        } else {\n            // do not convert\n            literalType = this.type;\n        }\n        return `\"${this.value}\"^^<${literalType}>`;\n    }\n\n}\n\n/**\n * Represents an IRI.\n */\nexport class IRI implements Value {\n\n    /**\n     * Constructs an [IRI].\n     *\n     * @param {string} iri the IRI of a resource instance.\n     */\n    constructor(readonly iri: string) {\n    }\n\n    /**\n     * Creates a SPARQL representation of the IRI.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n        // this is an instance Iri and does not have to be converted.\n        return `<${this.iri}>`;\n    }\n\n}\n\n/**\n * An abstract interface that represents a value.\n * This interface has to be implemented for all value types (value component classes).\n */\nexport interface PropertyValue {\n\n    /**\n     * Type of the value.\n     */\n    type: string;\n\n    /**\n     * Returns the value.\n     *\n     * @returns {Value}.\n     */\n    getValue(): Value;\n\n}\n\n/**\n * Represents a property, the specified comparison operator, and value.\n */\nexport class PropertyWithValue {\n\n    /**\n     * Constructs a [PropertyWithValue].\n     *\n     * @param {Property} property the specified property.\n     * @param {ComparisonOperatorAndValue} valueLiteral the specified comparison operator and value.\n     * @param isSortCriterion indicates if the property is used as a sort criterion.\n     */\n    constructor(\n        readonly property: Property,\n        readonly valueLiteral: ComparisonOperatorAndValue,\n        readonly isSortCriterion: Boolean) {\n    }\n\n}\n\n/**\n * a list, which is used in the mat-autocomplete form field\n * contains objects with id and name. the id is usual the iri\n */\nexport interface AutocompleteItem {\n    iri: string;\n    name: string;\n    label?: string;\n}\n\n"]}