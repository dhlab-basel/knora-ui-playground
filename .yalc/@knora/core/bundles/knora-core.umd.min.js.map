{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@knora/core/lib/declarations/api/knora-constants.ts","ng://@knora/core/lib/core.module.ts","ng://@knora/core/lib/declarations/core.config.ts","ng://@knora/core/lib/declarations/api-service-result.ts","ng://@knora/core/lib/declarations/api-service-error.ts","ng://@knora/core/lib/declarations/utils.ts","ng://@knora/core/lib/declarations/api/shared/date.ts","ng://@knora/core/lib/declarations/api/shared/strings.ts","ng://@knora/core/lib/services/v2/ontology-cache.service.ts","ng://@knora/core/lib/declarations/api/admin/authentication/authentication-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project.ts","ng://@knora/core/lib/declarations/api/admin/groups/group.ts","ng://@knora/core/lib/declarations/api/admin/groups/group-response.ts","ng://@knora/core/lib/declarations/api/admin/groups/groups-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node.ts","ng://@knora/core/lib/declarations/api/admin/lists/list.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/lists-response.ts","ng://@knora/core/lib/declarations/api/admin/ontologies/ontology-info-short.ts","ng://@knora/core/lib/declarations/api/admin/permissions/permission-data.ts","ng://@knora/core/lib/declarations/api/admin/users/user.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-members-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/projects-response.ts","ng://@knora/core/lib/declarations/api/admin/users/users-response.ts","ng://@knora/core/lib/declarations/api/admin/users/user-response.ts","ng://@knora/core/lib/declarations/api/v2/properties/read-property-item.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resource.ts","ng://@knora/core/lib/services/api.service.ts","ng://@knora/core/lib/services/v2/ontology.service.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resources-sequence.ts","ng://@knora/core/lib/declarations/api/v2/count-query/count-query-result.ts","ng://@knora/core/lib/declarations/api/v2/still-image/still-image-representation.ts","ng://@knora/core/lib/declarations/api/v2/still-image/image-region.ts","ng://@knora/core/lib/services/admin/groups.service.ts","ng://@knora/core/lib/services/admin/lists.service.ts","ng://@knora/core/lib/services/admin/projects.service.ts","ng://@knora/core/lib/services/admin/users.service.ts","ng://@knora/core/lib/services/admin/language.service.ts","ng://@knora/core/lib/services/admin/status-msg.service.ts","ng://@knora/core/lib/services/v2/convert-jsonld.ts","ng://@knora/core/lib/services/v2/resource.service.ts","ng://@knora/core/lib/services/v2/search.service.ts","ng://@knora/core/lib/services/v2/incoming.service.ts","ng://@knora/core/lib/services/v2/search-params.service.ts","ng://@knora/core/lib/services/v2/grav-search.service.ts","ng://@knora/core/lib/services/v2/store.service.ts","ng://@knora/core/lib/services/v2/basic-ontology.service.ts","ng://@knora/core/lib/services/v2/resource-types.service.ts","ng://@knora/core/lib/services/v2/list.service.ts","ng://@knora/core/lib/services/v2/list-cache.service.ts","ng://@knora/core/lib/declarations/api/operators.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","KnoraSchema","KuiCoreConfigToken","InjectionToken","KuiCoreModule","forRoot","config","ngModule","KuiCoreModule_1","providers","provide","useValue","NgModule","imports","CommonModule","HttpClientModule","declarations","exports","KuiCoreConfig","name","undefined","app","api","media","ontologyIRI","tslib_1.__decorate","JsonProperty","String","JsonObject","ApiServiceResult","status","statusText","url","getBody","classObject","jsonConvert","deserialize","body","JsonConvert","OperationMode","ENABLE","ValueCheckingMode","ALLOW_NULL","ApiServiceError","errorInfo","KnoraConstants","KnoraVersion","KnoraApi","PathSeparator","KnoraOntologyPath","KnoraBase","KnoraAdmin","DefaultSharedOntologyIRI","SystemProjectIRI","SystemAdminGroupIRI","ProjectAdminGroupIRI","ProjectMemberGroupIRI","KnoraApiV2WithValueObjectPath","KnoraApiV2SimplePath","SalsahGuiOntology","SalsahGuiOrder","SalsahGuiAttribute","StandoffOntology","Resource","TextValue","IntValue","BooleanValue","UriValue","DecimalValue","DateValue","ColorValue","GeomValue","ListValue","IntervalValue","LinkValue","GeonameValue","FileValue","AudioFileValue","DDDFileValue","DocumentFileValue","StillImageFileValue","MovingImageFileValue","TextFileValue","IsResourceClass","IsValueClass","ForbiddenResource","XMLToStandoffMapping","ListNode","ArkUrl","versionArkUrl","ObjectType","ResourceIcon","isEditable","isLinkProperty","isLinkValueProperty","hasGeometry","schemaName","schemaNumberOfItems","schemaItemListElement","RdfProperty","RdfsSchema","RdfsLabel","RdfsComment","RdfsSubclassOf","subPropertyOf","owl","OwlClass","OwlObjectProperty","OwlDatatypeProperty","OwlAnnotationProperty","OwlOnProperty","OwlMaxCardinality","OwlMinCardinality","OwlCardinality","OwlRestriction","creationDate","lastModificationDate","hasPermissions","userHasPermission","attachedToProject","attachedToUser","Region","ReadTextValueAsHtml","ReadTextValueAsString","ReadTextValueAsXml","ReadDateValue","ReadLinkValue","ReadIntegerValue","ReadDecimalValue","ReadStillImageFileValue","ReadMovingImageFileValue","ReadAudioFileValue","ReadTextFileValue","ReadGeomValue","ReadColorValue","ReadUriValue","ReadBooleanValue","ReadIntervalValue","ReadListValue","valueAsString","textValueAsHtml","textValueAsXml","textValueHasMapping","hasStandoffLinkToValue","dateValueHasStartYear","dateValueHasEndYear","dateValueHasStartEra","dateValueHasEndEra","dateValueHasStartMonth","dateValueHasEndMonth","dateValueHasStartDay","dateValueHasEndDay","dateValueHasCalendar","linkValueHasTarget","linkValueHasSource","linkValueHasSourceIri","linkValueHasTargetIri","integerValueAsInteger","decimalValueAsDecimal","fileValueAsUrl","fileValueIsPreview","fileValueHasFilename","hasStillImageFileValue","stillImageFileValueHasDimX","stillImageFileValueHasDimY","stillImageFileValueHasIIIFBaseUrl","colorValueAsColor","geometryValueAsGeometry","uriValueAsUri","booleanValueAsBoolean","intervalValueHasStart","intervalValueHasEnd","listValueAsListNode","Xsd","xsdString","xsdBoolean","xsdInteger","xsdDecimal","xsdUri","resourceSimple","dateSimple","intervalSimple","geomSimple","colorSimple","geonameSimple","fileSimple","listNodeSimple","matchFunction","EqualsComparisonOperator","EqualsComparisonLabel","NotEqualsComparisonOperator","NotEqualsComparisonLabel","GreaterThanComparisonOperator","GreaterThanComparisonLabel","GreaterThanEqualsComparisonOperator","GreaterThanEqualsComparisonLabel","LessThanComparisonOperator","LessThanComparisonLabel","LessThanEqualsComparisonOperator","LessThanQualsComparisonLabel","ExistsComparisonOperator","ExistsComparisonLabel","LikeComparisonOperator","LikeComparisonLabel","MatchComparisonOperator","MatchComparisonLabel","SalsahLink","RefMarker","GNDPrefix","GNDResolver","VIAFPrefix","VIAFResolver","Precision","Utils","getOntologyIriFromEntityIri","entityIri","segments","split","console","error","convertComplexKnoraApiEntityIritoSimple","complexEntityIri","RegexEmail","RegexUsername","RegexUrl","RegexPassword","RegexHex","RegexShortname","filterOutDuplicates","elem","index","self","indexOf","StringLiteral","language","CardinalityOccurrence","DateSalsah","calendar","era","year","month","day","precision","yearPrecision","monthPrecision","dayPrecision","getDateAsStringWithoutCalendar","dateString","toString","separator","getDateAsString","DateRangeSalsah","start","end","AuthenticationResponse","token","Project","id","shortname","shortcode","longname","description","keywords","logo","institution","ontologies","selfjoin","Boolean","Group","project","GroupResponse","group","GroupsResponse","groups","ListInfo","projectIri","isRootNode","labels","comments","hasRootNode","children","position","ListNode_1","Number","List","listinfo","ListInfoResponse","ListNodeInfo","ListNodeInfoResponse","nodeinfo","ListResponse","list","ListNodeResponse","ListsResponse","lists","OntologyInfoShort","ontologyIri","ontologyName","PermissionData","groupsPerProject","administrativePermissionsPerProject","User","email","username","password","givenName","familyName","lang","projects","sessionId","permissions","systemAdmin","ProjectMembersResponse","members","ProjectResponse","ProjectsResponse","UsersResponse","users","UserResponse","user","ReadTextValue","type","_super","propIri","str","_this","tslib_1.__extends","getClassName","getContent","ReferredResourcesByStandoffLink","html","referredResources","getReferredResourceInfo","resourceIri","ontologyInfo","resClassLabel","getLabelForResourceClass","label","xml","mappingIri","startYear","endYear","startEra","endEra","startMonth","endMonth","startDay","endDay","getDateSalsah","referredResourceIri","referredResource","integer","decimal","imageFilename","imageServerIIIFBaseURL","imagePath","dimX","dimY","isPreview","endsWith","makeIIIFUrl","reduceFactor","percentage","Math","floor","filename","mediaServerIIIFBaseURL","path","duration","fps","aspectRatio","textFilename","textFileURL","colorHex","Point2D","x","y","RegionGeometry","lineColor","lineWidth","points","radius","geometryString","geometryJSON","JSON","parse","_b","tslib_1.__values","_c","point","push","geometry","uri","bool","intervalStart","intervalEnd","listNodeIri","ReadResource","incomingRegions","incomingStillImageRepresentations","incomingLinks","stillImageRepresentationsToDisplay","properties","incomingAnnotations","incomingFileRepresentations","fileRepresentationsToDisplay","jsonld","require","semver","ApiService","http","loading","httpGet","params","get","observe","pipe","map","response","result","header","server","headers","compareVersion","catchError","handleRequestError","processJSONLD","resourceResponse","resPromise","promises","compact","from","httpPost","post","httpPut","put","httpDelete","delete","serviceError","message","throwError","handleJsonError","expected","existing","diff","warn","Injectable","providedIn","tslib_1.__param","Inject","HttpClient","OntologyService","getOntologiesMetadata","getAllOntologies","getProjectOntologies","encodeURIComponent","getAllEntityDefinitionsForOntologies","getResourceClasses","resourceClassIris","Observable","observer","resClassUriEnc","forEach","resClassIri","getProperties","propertyIris","propertiesUriEnc","createOntology","data","ontology","knora-api:ontologyName","knora-api:attachedToProject","@id","rdfs:label","@context","rdfs","knora-api","createResourceClass","resourceClass","onto_iri","@type","knora-api:lastModificationDate","last_onto_date","@graph","onto_name","rdfs:comment","rdfs:subClassOf","subClassOf","rdf","xsd","createProperty","graph","data_1","data_1_1","prop","prop_obj","rdfs:subPropertyOf","salsah-gui:guiElement","guiElement","property","salsah-gui","setCardinality","cardinality","class_iri","owl:onProperty","prop_iri","OntologyCacheError","Error","OntologyMetadata","Cardinality","occurrence","GuiOrder","ResourceClass","icon","comment","cardinalities","guiOrder","ResourceClasses","Property","objectType","guiAttribute","Properties","ResourceClassIrisForOntology","OntologyCache","resourceClassIrisForOntology","resourceClasses","OntologyInformation","resourceClassesForOntology","sortFunc","a","labelA","toLowerCase","labelB","updateOntologyInformation","newResourceClassesForOntology","getResourceClassForOntology","newResClassForOntology","newResourceClasses","newResClass","newProperties","newProp","getResourceClassesAsArray","sortAsc","resClasses","resClass","sort","reverse","resClassDef","log","getPropertiesAsArray","getLabelForProperty","propDef","OntologyCacheService","_ontologyService","excludedOntologies","excludedProperties","nonResourceClasses","cacheOntology","getOntologiesMetadataFromKnora","mergeMap","ontRes","ontPromise","getAllEntityDefinitionsForOntologyFromKnora","convertAndWriteOntologiesMetadataToCache","getAllOntologiesMetadataFromCache","getResourceClassIrisFromOntologyResponse","classDefinitions","classDefinitions_1","classDefinitions_1_1","classDef","classIri","convertAndWriteAllEntityDefinitionsForOntologyToCache","classDefs","filter","entity","propertyDefs","entityType","convertAndWriteEntityDefinitionsToCache","getOntologyInformationFromCache","ontologyIris","allResourceClassIris","ontologyIris_1","ontologyIris_1_1","concat","getResourceClassDefinitions","resClassDefs","resourceClassDefinitions","propertyClassDefinitions","resourceClassDefinitions_1","resourceClassDefinitions_1_1","subclassOfCollection","isArray","subclassOfCollection_1","subclassOfCollection_1_1","curCard","newCard","minCard","card","TypeError","maxCard","newGuiOrder","resClassObj","convertAndWriteKnoraPropertyDefinitionsToOntologyCache","getResourceClassDefinitionsFromCache","resClassIris","getPropertyDefinitions","propDefs","propertyDefinitionsFromKnora","propertyDefinitionsFromKnora_1","propertyDefinitionsFromKnora_1_1","superProp","_d","attr","getPropertyDefinitionsFromCache","onto","of","getAndCacheOntologies","observables","forkJoin","getEntityDefinitionsForOntologies","ontologyIrisToQuery","resClassIrisToQueryFor","propertiesToQuery","results","ReadResourcesSequence","resources","numberOfResources","ontologyInformation","CountQueryResult","numberOfResults","StillImageRepresentation","stillImageFileValue","regions","ImageRegion","regionResource","getGeometries","GroupsService","apply","getAllGroups","getGroupByIri","iri","ListsService","getLists","newPath","getList","listIri","getListInfo","getListNodeInfo","nodeIri","createList","payload","createListItem","updateListInfo","ProjectsService","getAllProjects","getProjectByIri","getProject","getProjectByShortname","getProjectByShortcode","getProjectMembersByIri","getProjectMembers","getProjectMembersByShortname","getProjectMembersByShortcode","createProject","updateProject","activateProject","deleteProject","UsersService","getAllUsers","getUser","identifier","identifierType","getUserByIri","getUserByEmail","getUserByUsername","getUsersGroupMemberships","userIri","createUser","addUserToProject","removeUserFromProject","addUserToProjectAdmin","removeUserFromProjectAdmin","addUserToGroup","groupIri","removeUserFromGroup","addUserToSystemAdmin","updateUserSystemAdmin","removeUserFromSystemAdmin","activateUser","updateOwnPassword","oldPassword","newPassword","requesterPassword","updateUsersPassword","updateBasicUserInformation","deleteUser","LanguageService","subject","Subject","setLanguage","var","getLanguage","asObservable","StatusMsgService","_http","getStatusMsg","res","err","ConvertJSONLD","getPropertyNames","propName","constructReadResource","resourceJSONLD","standoffLinkValuesJSONLD","standoffLinkValues","standoffLinkValuesJSONLD_1","standoffLinkValuesJSONLD_1_1","standoffLinkJSONLD","standoffVal","createValueSpecificProp","propNames","keys","propNames_1","propNames_1_1","propValues","_e","propValue","valueSpecificProp","constructReadProperties","textValue","standoffLinkValues_1","standoffLinkValues_1_1","referredRes","stringify","linkValue","incomingResource","incomingResourceIri","decVal","parseFloat","intStart","intEnd","getReferredResourceClasses","referredResourceClasses","propNames_2","propNames_2_1","createReadResourcesSequenceFromJsonLD","resourcesResponseJSONLD","resourcesGraph","resourcesGraph_1","resourcesGraph_1_1","resource","getResourceClassesFromJsonLD","resourcesGraph_2","resourcesGraph_2_1","createCountQueryResult","countQueryJSONLD","ResourceService","_ontologyCacheService","getResource","getReadResource","resSeq","ontoInfo","SearchService","convertJSONLDToReadResourceSequence","processFulltextSearchParams","httpParams","searchParams","limitToProject","set","limitToResourceClass","limitToStandoffClass","processSearchByLabelParams","doFulltextSearch","searchTerm","offset","HttpParams","doFullTextSearchReadResourceSequence","doFulltextSearchCountQuery","doFullTextSearchCountQueryCountQueryResult","doExtendedSearch","gravsearchQuery","doExtendedSearchReadResourceSequence","doExtendedSearchCountQuery","doExtendedSearchCountQueryCountQueryResult","searchByLabel","searchByLabelReadResourceSequence","IncomingService","getIncomingRegions","resourceIRI","sparqlQueryStr","getStillImageRepresentationsForCompoundResource","getIncomingLinksForResource","ExtendedSearchParams","generateGravsearch","SearchParamsService","_currentSearchParams","BehaviorSubject","changeSearchParamsMsg","getSearchParams","getValue","GravsearchGenerationService","_searchParamsService","createGravsearchQuery","mainResourceClassOption","mainResourceClass","orderByCriteria","returnStatements","props","propWithVal","valueLiteral","comparisonOperator","toSparql","complex","statement","restriction","propValueLiteral","GravsearchGenerationService_1","complexTypeToProp","isSortCriterion","orderByStatement","join","gravsearchTemplate","offsetTemplate","localOffset","typeConversionComplexToSimple","http://api.knora.org/ontology/knora-api/v2#IntValue","http://api.knora.org/ontology/knora-api/v2#DecimalValue","http://api.knora.org/ontology/knora-api/v2#BooleanValue","http://api.knora.org/ontology/knora-api/v2#TextValue","http://api.knora.org/ontology/knora-api/v2#DateValue","http://api.knora.org/ontology/knora-api/v2#IntervalValue","http://api.knora.org/ontology/knora-api/v2#GeomValue","http://api.knora.org/ontology/knora-api/v2#ColorValue","http://api.knora.org/ontology/knora-api/v2#GeonameValue","http://api.knora.org/ontology/knora-api/v2#UriValue","http://api.knora.org/ontology/knora-api/v2#StillImageFileValue","http://api.knora.org/ontology/knora-api/v2#FileValue","http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue","http://api.knora.org/ontology/knora-api/v2#DDDFileValue","http://api.knora.org/ontology/knora-api/v2#AudioFileValue","http://api.knora.org/ontology/knora-api/v2#DocumentFileValue","http://api.knora.org/ontology/knora-api/v2#TextFileValue","http://api.knora.org/ontology/knora-api/v2#ListValue","StoreService","resetTriplestoreContent","rdfDataObjects","BasicOntologyService","getBasicOntology","ResourceTypesService","getResourceTypesByVoc","getResourceType","ListService","getListFromKnora","rootNodeIri","getListNodeFromKnora","getListNode","ListNodeV2","ListCache","ListNodeIriToListNodeV2","ListCacheService","_listService","listCache","listNodeIriToListNodeV2","convertJSONLDToListNode","listJSONLD","listNode","subListNode","hasRoot","listNodeJSONLD","completeList","Equals","NotEquals","GreaterThanEquals","GreaterThan","LessThan","LessThanEquals","Exists","Like","Match","ComparisonOperatorAndValue","ValueLiteral","schema","literalType","simple","IRI","PropertyWithValue"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class KnoraConstants {\n\n    // The following version of Knora is needed to work properly with this module\n    public static KnoraVersion: string = '8.0.0';\n\n    public static KnoraApi: string = 'http://api.knora.org/ontology/knora-api';\n    public static PathSeparator: string = '#';\n\n    public static KnoraOntologyPath: string = 'http://www.knora.org/ontology';\n    public static KnoraBase: string = KnoraConstants.KnoraOntologyPath + '/knora-base';\n    public static KnoraAdmin: string = KnoraConstants.KnoraOntologyPath + '/knora-admin';\n\n    public static DefaultSharedOntologyIRI: string = KnoraConstants.KnoraAdmin + '#DefaultSharedOntologiesProject';\n    public static SystemProjectIRI: string = KnoraConstants.KnoraAdmin + '#SystemProject';\n    public static SystemAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#SystemAdmin';\n    public static ProjectAdminGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectAdmin';\n    public static ProjectMemberGroupIRI: string = KnoraConstants.KnoraAdmin + '#ProjectMember';\n\n    public static KnoraApiV2WithValueObjectPath: string = KnoraConstants.KnoraApi + '/v2' + KnoraConstants.PathSeparator;\n    public static KnoraApiV2SimplePath: string = KnoraConstants.KnoraApi + '/simple/v2' + KnoraConstants.PathSeparator;\n\n    public static SalsahGuiOntology: string = 'http://api.knora.org/ontology/salsah-gui/v2';\n\n    public static SalsahGuiOrder: string = KnoraConstants.SalsahGuiOntology + '#guiOrder';\n    public static SalsahGuiAttribute: string = KnoraConstants.SalsahGuiOntology + '#guiAttribute';\n\n\n    public static StandoffOntology: string = 'http://api.knora.org/ontology/standoff/v2';\n\n    public static Resource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Resource';\n    public static TextValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextValue';\n    public static IntValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntValue';\n    public static BooleanValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'BooleanValue';\n    public static UriValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'UriValue';\n    public static DecimalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DecimalValue';\n    public static DateValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DateValue';\n    public static ColorValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ColorValue';\n    public static GeomValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeomValue';\n    public static ListValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListValue';\n    public static IntervalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntervalValue';\n    public static LinkValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'LinkValue';\n    public static GeonameValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeonameValue';\n    public static FileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'FileValue';\n    public static AudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'AudioFileValue';\n    public static DDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DDDFileValue';\n    public static DocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DocumentFileValue';\n    public static StillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'StillImageFileValue';\n    public static MovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'MovingImageFileValue';\n    public static TextFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextFileValue';\n    public static IsResourceClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isResourceClass';\n    public static IsValueClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isValueClass';\n    public static ForbiddenResource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ForbiddenResource';\n    public static XMLToStandoffMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'XMLToStandoffMapping';\n    public static ListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListNode';\n\n    public static ArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'arkUrl';\n    public static versionArkUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'versionArkUrl';\n    public static ObjectType = KnoraConstants.KnoraApiV2WithValueObjectPath + 'objectType';\n\n    public static ResourceIcon: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'resourceIcon';\n    public static isEditable: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isEditable';\n    public static isLinkProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkProperty';\n    public static isLinkValueProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkValueProperty';\n    public static hasGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasGeometry';\n\n    public static schemaName: string = 'http://schema.org/name';\n    public static schemaNumberOfItems: string = 'http://schema.org/numberOfItems';\n    public static schemaItemListElement: string = 'http://schema.org/itemListElement';\n\n\n    public static RdfProperty: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property';\n    public static RdfsSchema: string = 'http://www.w3.org/2000/01/rdf-schema' + KnoraConstants.PathSeparator;\n    public static RdfsLabel: string = KnoraConstants.RdfsSchema + 'label';\n    public static RdfsComment: string = KnoraConstants.RdfsSchema + 'comment';\n    public static RdfsSubclassOf: string = KnoraConstants.RdfsSchema + 'subClassOf';\n    public static subPropertyOf: string = KnoraConstants.RdfsSchema + 'subPropertyOf';\n\n    public static owl: string = 'http://www.w3.org/2002/07/owl';\n\n    public static OwlClass: string = KnoraConstants.owl + '#Class';\n    public static OwlObjectProperty: string = KnoraConstants.owl + '#ObjectProperty';\n    public static OwlDatatypeProperty: string = KnoraConstants.owl + '#DatatypeProperty';\n    public static OwlAnnotationProperty: string = KnoraConstants.owl + '#AnnotationProperty';\n    public static OwlOnProperty: string = KnoraConstants.owl + '#onProperty';\n    public static OwlMaxCardinality: string = KnoraConstants.owl + '#maxCardinality';\n    public static OwlMinCardinality: string = KnoraConstants.owl + '#minCardinality';\n    public static OwlCardinality: string = KnoraConstants.owl + '#cardinality';\n    public static OwlRestriction: string = KnoraConstants.owl + '#Restriction';\n\n    public static creationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'creationDate';\n    public static lastModificationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'lastModificationDate';\n    public static hasPermissions: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasPermissions';\n    public static userHasPermission: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'userHasPermission';\n    public static attachedToProject: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToProject';\n    public static attachedToUser: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToUser';\n\n    public static Region: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Region';\n\n    public static ReadTextValueAsHtml: string = 'ReadTextValueAsHtml';\n    public static ReadTextValueAsString: string = 'ReadTextValueAsString';\n    public static ReadTextValueAsXml: string = 'ReadTextValueAsXml';\n    public static ReadDateValue: string = 'ReadDateValue';\n    public static ReadLinkValue: string = 'ReadLinkValue';\n    public static ReadIntegerValue: string = 'ReadIntegerValue';\n    public static ReadDecimalValue: string = 'ReadDecimalValue';\n    public static ReadStillImageFileValue: string = 'ReadStillImageFileValue';\n    public static ReadMovingImageFileValue: string = 'ReadMovingImageFileValue';\n    public static ReadAudioFileValue: string = 'ReadAudioFileValue';\n    public static ReadTextFileValue: string = 'ReadTextFileValue';\n    public static ReadGeomValue: string = 'ReadGeomValue';\n    public static ReadColorValue: string = 'ReadColorValue';\n    public static ReadUriValue: string = 'ReadUriValue';\n    public static ReadBooleanValue: string = 'ReadBooleanValue';\n    public static ReadIntervalValue: string = 'ReadIntervalValue';\n    public static ReadListValue: string = 'ReadListValue';\n\n    public static valueAsString: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'valueAsString';\n\n    public static textValueAsHtml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsHtml';\n    public static textValueAsXml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsXml';\n    public static textValueHasMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueHasMapping';\n\n    public static hasStandoffLinkToValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStandoffLinkToValue';\n\n    public static dateValueHasStartYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartYear';\n    public static dateValueHasEndYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndYear';\n    public static dateValueHasStartEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartEra';\n    public static dateValueHasEndEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndEra';\n    public static dateValueHasStartMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartMonth';\n    public static dateValueHasEndMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndMonth';\n    public static dateValueHasStartDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartDay';\n    public static dateValueHasEndDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndDay';\n    public static dateValueHasCalendar: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasCalendar';\n\n    public static linkValueHasTarget: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTarget';\n    public static linkValueHasSource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSource';\n    public static linkValueHasSourceIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSourceIri';\n    public static linkValueHasTargetIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTargetIri';\n\n    public static integerValueAsInteger: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intValueAsInt';\n\n    public static decimalValueAsDecimal: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'decimalValueAsDecimal';\n\n    public static fileValueAsUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueAsUrl';\n    public static fileValueIsPreview: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueIsPreview';\n    public static fileValueHasFilename: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueHasFilename';\n\n    public static hasStillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStillImageFileValue';\n\n    public static stillImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimX';\n    public static stillImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimY';\n    public static stillImageFileValueHasIIIFBaseUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasIIIFBaseUrl';\n\n    public static colorValueAsColor: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'colorValueAsColor';\n    public static geometryValueAsGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'geometryValueAsGeometry';\n    public static uriValueAsUri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'uriValueAsUri';\n    public static booleanValueAsBoolean: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'booleanValueAsBoolean';\n\n    public static intervalValueHasStart: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasStart';\n    public static intervalValueHasEnd: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasEnd';\n\n    public static listValueAsListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNode';\n\n    public static Xsd: string = 'http://www.w3.org/2001/XMLSchema#';\n\n    public static xsdString: string = KnoraConstants.Xsd + 'string';\n    public static xsdBoolean: string = KnoraConstants.Xsd + 'boolean';\n    public static xsdInteger: string = KnoraConstants.Xsd + 'integer';\n    public static xsdDecimal: string = KnoraConstants.Xsd + 'decimal';\n    public static xsdUri: string = KnoraConstants.Xsd + 'anyURI';\n\n    public static resourceSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Resource';\n    public static dateSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Date';\n    public static intervalSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Interval';\n    public static geomSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geom';\n    public static colorSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Color';\n    public static geonameSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geoname';\n    public static fileSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'File';\n    public static listNodeSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'ListNode';\n\n    public static matchFunction: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'match';\n\n    public static EqualsComparisonOperator: string = '=';\n    public static EqualsComparisonLabel: string = 'is equal to';\n\n    public static NotEqualsComparisonOperator: string = '!=';\n    public static NotEqualsComparisonLabel: string = 'is not equal to';\n\n    public static GreaterThanComparisonOperator: string = '>';\n    public static GreaterThanComparisonLabel: string = 'is greater than';\n\n    public static GreaterThanEqualsComparisonOperator: string = '>=';\n    public static GreaterThanEqualsComparisonLabel: string = 'is greater than equals to';\n\n    public static LessThanComparisonOperator: string = '<';\n    public static LessThanComparisonLabel: string = 'is less than';\n\n    public static LessThanEqualsComparisonOperator: string = '<=';\n    public static LessThanQualsComparisonLabel: string = 'is less than equals to';\n\n    public static ExistsComparisonOperator: string = 'E';\n    public static ExistsComparisonLabel: string = 'exists';\n\n    public static LikeComparisonOperator: string = 'regex';\n    public static LikeComparisonLabel: string = 'is like';\n\n    public static MatchComparisonOperator: string = 'contains';\n    public static MatchComparisonLabel: string = 'matches';\n\n    public static SalsahLink: string = 'salsah-link'; // class on an HTML <a> element that indicates a link to a Knora resource\n    public static RefMarker: string = 'ref-marker'; // class on an HTML element that refers to another element in the same document\n\n    public static GNDPrefix: string = '(DE-588)';\n    public static GNDResolver: string = 'http://d-nb.info/gnd/';\n\n    public static VIAFPrefix: string = '(VIAF)';\n    public static VIAFResolver: string = 'https://viaf.org/viaf/';\n\n}\n\n\nexport enum KnoraSchema {\n    complex = 0,\n    simple = 1\n}\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { KuiCoreConfig } from './declarations';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nexport const KuiCoreConfigToken = new InjectionToken<KuiCoreConfig>('KuiCoreConfigToken (knora.core.config)');\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: [],\n    exports: [\n        HttpClientModule\n    ]\n})\nexport class KuiCoreModule {\n    /**\n     *\n     * @param {KuiCoreConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: KuiCoreConfig): ModuleWithProviders {\n        // get the app environment configuration here\n        // console.log('KuiCoreModule - forRoot - config: ', config);\n        return {\n            ngModule: KuiCoreModule,\n            providers: [\n                {provide: KuiCoreConfigToken, useValue: config}\n            ]\n        };\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * Knora-ui core configuration with the server definitions of:\n *  - api: URL of data service e.g. knora: http://localhost:3333\n *  - media: URL of media server service e.g. sipi: http://localhost:1024\n *  - app: URL of the app e.g. salsah: http://localhost:4200\n */\n@JsonObject('KuiCoreConfig')\nexport class KuiCoreConfig {\n\n    /**\n     * name of the app e.g. 'SALSAH'\n     * @type {string}\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * url of the app e.g. 'https://salsah.org'\n     * @type {undefined}\n     */\n    @JsonProperty('app', String)\n    public app: string = undefined;\n\n    /**\n     * url of the api e.g. 'https://api.knora.org'\n     * @type {string}\n     */\n    @JsonProperty('api', String)\n    public api: string = undefined;\n\n    /**\n     * url of media/file server e.g. 'https://iiif.sipi.io'\n     * @type {string}\n     */\n    @JsonProperty('media', String)\n    public media: string = undefined;\n\n    /**\n     * url of the ontology e.g. 'http://api.02.unibas.dasch.swiss'\n     * @type {string}\n     */\n    @JsonProperty('ontologyIRI', String)\n    public ontologyIRI: string = undefined;\n\n}\n","\nimport { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\n\n/**\n * Result class used as API url response in ApiService\n */\nexport class ApiServiceResult {\n\n    private static jsonConvert: JsonConvert = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL);\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Body as JSON\n     */\n    body: any;\n\n    /**\n     * Gets the result body as instance of classObject.\n     * @param classObject\n     * @returns {any}\n     * @throws\n     */\n\n    getBody(classObject?: { new(): any }): any {\n        // console.log(this.body);\n        return ApiServiceResult.jsonConvert.deserialize(this.body, classObject);\n    }\n\n\n}\n","\n/**\n * Error class used as API response in ApiService\n */\nexport class ApiServiceError {\n\n\n    /**\n     * Header contains the Knora / Server version\n     */\n    header?: any;\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Additional error info\n     */\n    errorInfo = '';\n\n}\n","/**\n * Collection of useful utility functions.\n */\nimport { KnoraConstants } from './api/knora-constants';\n\n// @dynamic\nexport class Utils {\n    /**\n     * A regex to validate Email address.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    /**\n     * A regex to validate Username.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUsername = /^[a-zA-Z0-9]+$/;\n\n    /**\n     * A regex to validate URLs.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUrl = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/i;\n\n    /**\n     * A regex to validate Passwords\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexPassword = /^(?=.*\\d)(?=.*[a-zA-Z]).{8,}$/i;\n\n    /**\n     * A regex to validate Hexadecimal values\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexHex = /^[0-9A-Fa-f]+$/;\n\n    /**\n     * A regex to validate shortname in projects\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexShortname = /^[a-zA-Z]+\\S*$/;\n\n\n    /**\n     * Lambda function eliminating duplicates in a collection to be passed to [[filter]].\n     *\n     * @param elem element of an Array that is currently being looked at.\n     * @param index current elements index.\n     * @param self reference to the whole Array.\n     * @returns {boolean} true if the same element does not already exist in the Array.\n     */\n    public static filterOutDuplicates = (elem, index: number, self) => {\n\n        // https://stackoverflow.com/questions/16747798/delete-duplicate-elements-from-an-array\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example\n\n        // returns true if the element's index equals the index of the leftmost element\n        // -> this means that there is no identical element before this index, hence it is not a duplicate\n        // for all other elements, false is returned\n        return index === self.indexOf(elem);\n\n    }\n\n    /**\n     * Given a Knora entity IRI, gets the ontology Iri.\n     *\n     * @param {string} entityIri an entity Iri.\n     * @return {string} the ontology IRI\n     */\n    public static getOntologyIriFromEntityIri(entityIri: string) {\n\n        // split class Iri on \"#\"\n        const segments: string[] = entityIri.split(KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${entityIri} is not a valid entity IRI.`);\n\n        return segments[0];\n\n    }\n\n    /**\n     * Converts a complex knora-api entity Iri to a knora-api simple entity Iri.\n     *\n     * @param {string} complexEntityIri\n     * @returns {string}\n     */\n    public static convertComplexKnoraApiEntityIritoSimple(complexEntityIri: string) {\n\n        // split entity Iri on \"#\"\n        const segments: string[] = complexEntityIri.split('v2' + KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${complexEntityIri} is not a valid entity IRI.`);\n\n        // add 'simple' to base path\n        return segments[0] + 'simple/v2' + KnoraConstants.PathSeparator + segments[1];\n\n    }\n\n\n}\n","/**\n * Precision for DateSalsah.\n */\nexport enum Precision {\n    yearPrecision,\n    monthPrecision,\n    dayPrecision\n}\n\n/**\n * Represents a Salsah date object with a precision information.\n */\nexport class DateSalsah {\n\n    private static separator = '-';\n\n    readonly precision: Precision;\n\n    constructor(\n        readonly calendar: string,\n        readonly era: string,\n        readonly year: number,\n        readonly month?: number,\n        readonly day?: number\n    ) {\n        if (this.month === undefined) {\n            // year precision\n            this.precision = Precision.yearPrecision;\n        } else if (this.day === undefined) {\n            // month precision\n            this.precision = Precision.monthPrecision;\n        } else {\n            // day precision\n            this.precision = Precision.dayPrecision;\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the date without the calendar.\n     *\n     * @returns {string}\n     */\n    getDateAsStringWithoutCalendar() {\n\n        let dateString = '(' + this.era + ') ';\n\n        switch (this.precision) {\n\n            case Precision.yearPrecision: {\n                dateString += this.year.toString();\n                break;\n            }\n\n            case Precision.monthPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month;\n                break;\n            }\n\n            case Precision.dayPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month + DateSalsah.separator + this.day;\n                break;\n            }\n\n            default: {\n                break;\n            }\n\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Returns a string representation of the date (with calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString(): string {\n\n        return this.calendar + ':' + this.getDateAsStringWithoutCalendar();\n    }\n\n}\n\n/**\n * Represents a period (with start date and end date).\n */\nexport class DateRangeSalsah {\n\n    constructor(\n        readonly start: DateSalsah,\n        readonly end: DateSalsah\n    ) {\n    }\n\n    /**\n     * Returns a string representation of the date range (with preceding calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString() {\n        return this.start.getDateAsString() + ':' + this.end.getDateAsStringWithoutCalendar();\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('StringLiteral')\nexport class StringLiteral {\n\n    @JsonProperty('value', String, false)\n    public value: string = undefined;\n\n    @JsonProperty('language', String, true)\n    public language: string = '';\n}\n","import { Injectable } from '@angular/core';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { Utils } from '../../declarations/utils';\nimport { OntologyService } from './ontology.service';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n/**\n * Represents an error occurred in OntologyCacheService.\n */\nclass OntologyCacheError extends Error {\n\n    constructor(readonly message: string) {\n        super(message);\n    }\n}\n\n\n/**\n * Represents an ontology's metadata.\n */\nexport class OntologyMetadata {\n\n    /**\n     * @hideconstructor\n     *\n     * @param {string} id Iri identifying the ontology.\n     * @param {string} label a label describing the ontology.\n     */\n    constructor(readonly id: string,\n        readonly label: string) {\n\n    }\n\n}\n\n\n/**\n * Occurrence of a property for a resource class (its cardinality).\n */\nexport enum CardinalityOccurrence {\n    minCard = 0,\n    card = 1,\n    maxCard = 2\n}\n\n\n/**\n * Cardinality of a property for the given resource class.\n */\nexport class Cardinality {\n\n    /**\n     * @param {CardinalityOccurrence} occurrence type of given occurrence.\n     * @param {number} value numerical value of given occurrence.\n     * @param {string} property the property the given occurrence applies to.\n     */\n    constructor(readonly occurrence: CardinalityOccurrence,\n        readonly value: number,\n        readonly property: string) {\n    }\n}\n/**\n * Property gui order\n */\nexport class GuiOrder {\n    /**\n     * @param  {number} value\n     * @param  {string} property\n     */\n    constructor(readonly value: number,\n        readonly property: string\n    ) {\n\n    }\n}\n\n/**\n * A resource class definition.\n */\nexport class ResourceClass {\n\n    /**\n     * @param {string} id Iri identifying the resource class.\n     * @param {string} icon path to an icon representing the resource class.\n     * @param {string} comment comment on the resource class.\n     * @param {string} label label describing the resource class.\n     * @param {Cardinality[]} cardinalities the resource class's properties.\n     * @param {GuiOrder[]} guiOrder the resource class's gui-order properties.\n     */\n    constructor(readonly id: string,\n        readonly icon: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly cardinalities: Array<Cardinality>,\n        readonly guiOrder: Array<GuiOrder>) {\n\n    }\n}\n\n\n/**\n * A map of resource class Iris to resource class definitions.\n */\nexport class ResourceClasses {\n    [index: string]: ResourceClass;\n}\n\n\n/**\n * A property definition.\n */\nexport class Property {\n\n    /**\n     * @param {string} id Iri identifying the property definition.\n     * @param {string} objectType the property's object constraint.\n     * @param {string} comment comment on the property definition.\n     * @param {string} label label describing the property definition.\n     * @param {string[]} subPropertyOf Iris of properties the given property is a subproperty of.\n     * @param {boolean} isEditable indicates whether the given property can be edited by the client.\n     * @param {boolean} isLinkProperty indicates whether the given property is a linking property.\n     * @param {boolean} isLinkValueProperty indicates whether the given property refers to a link value.\n     * @param {string} guiAttribute the gui attribute assigned to this property, if any.\n     */\n    constructor(readonly id: string,\n                readonly objectType: string,\n                readonly comment: string,\n                readonly label: string,\n                readonly subPropertyOf: Array<string>,\n                readonly isEditable: Boolean,\n                readonly isLinkProperty: Boolean,\n                readonly isLinkValueProperty: Boolean,\n                readonly guiAttribute: string[]) {\n    }\n}\n\n\n/**\n * A map of property Iris to property definitions.\n */\nexport class Properties {\n    [index: string]: Property;\n}\n\n\n/**\n * Groups resource classes by the ontology they are defined in.\n *\n * A map of ontology Iris to an array of resource class Iris.\n */\nexport class ResourceClassIrisForOntology {\n    [index: string]: Array<string>;\n}\n\n\n/**\n * Represents cached ontology information (only used by this service internally).\n * This cache is updated whenever new definitions are requested from Knora.\n *\n * Requested ontology information by a service is represented by [[OntologyInformation]].\n */\nclass OntologyCache {\n\n    /**\n     * @param {OntologyMetadata[]} ontologies An array of all existing ontologies.\n     */\n    ontologies: Array<OntologyMetadata>;\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassIrisForOntology list of all resource class Iris for a named graph.\n     */\n    resourceClassIrisForOntology: ResourceClassIrisForOntology;\n\n    /**\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     */\n    resourceClasses: ResourceClasses;\n\n    /**\n     * @param {Properties} properties property definitions.\n     */\n    properties: Properties;\n\n    constructor() {\n        this.ontologies = [];\n\n        this.resourceClassIrisForOntology = new ResourceClassIrisForOntology();\n\n        this.resourceClasses = new ResourceClasses();\n\n        this.properties = new Properties();\n    }\n}\n\n/**\n * Represents ontology information requested from this service.\n *\n * For every request, an instance of this class is returned containing the requested information.\n */\nexport class OntologyInformation {\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassesForOntology all resource class Iris for a given ontology.\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     * @param {Properties} properties property definitions.\n     */\n    constructor(\n        private resourceClassesForOntology: ResourceClassIrisForOntology,\n        private resourceClasses: ResourceClasses,\n        private properties: Properties) {\n    }\n\n    /**\n     * Sorts an array of `ResourceClass` or `Property` by label.\n     *\n     * @param a first element\n     * @param b second element\n     * @return negative -1 if the first element is considered lower than the second, 1 if the second element is considered bigger, 0 if they are equal\n     */\n    static sortFunc(a: ResourceClass | Property, b: ResourceClass | Property) {\n        // dealing with 'undefined' labels\n        if (a.label === undefined) {\n            return 1;\n        } else if (b.label === undefined) {\n            return -1;\n        }\n\n        const labelA = a.label.toLowerCase();\n        const labelB = b.label.toLowerCase();\n\n        if (labelA < labelB) {\n            return -1;\n        } else if (labelA > labelB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Merge the given [[OntologyInformation]] into the current instance,\n     * updating the existing information.\n     * This is necessary when a service like the search fetches new results\n     * that have to be added to an existing collection.\n     * The existing ontology information must not be lost.\n     *\n     * @param {OntologyInformation} ontologyInfo the given definitions that have to be integrated.\n     * @returns void\n     */\n    updateOntologyInformation(ontologyInfo: OntologyInformation): void {\n\n        // get new resourceClassIrisForOntology\n        const newResourceClassesForOntology: ResourceClassIrisForOntology = ontologyInfo.getResourceClassForOntology();\n\n        // update new resourceClassIrisForOntology\n        // tslint:disable-next-line:forin\n        for (const newResClassForOntology in newResourceClassesForOntology) {\n            this.resourceClassesForOntology[newResClassForOntology] = newResourceClassesForOntology[newResClassForOntology];\n        }\n\n        // get new resource class definitions\n        const newResourceClasses = ontologyInfo.getResourceClasses();\n\n        // update resourceClasses\n        // tslint:disable-next-line:forin\n        for (const newResClass in newResourceClasses) {\n            this.resourceClasses[newResClass] = newResourceClasses[newResClass];\n        }\n\n        // get new property definitions\n        const newProperties = ontologyInfo.getProperties();\n\n        // update properties\n        // tslint:disable-next-line:forin\n        for (const newProp in newProperties) {\n            this.properties[newProp] = newProperties[newProp];\n        }\n\n    }\n\n    /**\n     * Returns resource class definitions for ontologies.\n     *\n     * @returns ResourceClassIrisForOntology - all resource class definitions grouped by ontologies.\n     */\n    getResourceClassForOntology(): ResourceClassIrisForOntology {\n        return this.resourceClassesForOntology;\n    }\n\n    /**\n     * Returns all resource classes as an object.\n     *\n     * @returns ResourceClasses - all resource class definitions as an object.\n     */\n    getResourceClasses(): ResourceClasses {\n        return this.resourceClasses;\n    }\n\n    /**\n     * Returns all resource classes as an array.\n     *\n     * @param {boolean} sortAsc sort resource classes by label in ascending order by default\n     * @returns ResourceClass[]\n     */\n    getResourceClassesAsArray(sortAsc: boolean = true): Array<ResourceClass> {\n\n        const resClasses: Array<ResourceClass> = [];\n\n        // tslint:disable-next-line:forin\n        for (const resClassIri in this.resourceClasses) {\n            const resClass: ResourceClass = this.resourceClasses[resClassIri];\n            resClasses.push(resClass);\n        }\n\n        // resourceClasses order by label in ascending order\n        resClasses.sort(OntologyInformation.sortFunc);\n\n        // resourceClasses order by label in descending order\n        if (!sortAsc) {\n            resClasses.reverse();\n        }\n\n        return resClasses;\n\n    }\n\n    /**\n     * Returns a resource class's label.\n     *\n     * @param {string} resClass resource class to query for.\n     * @returns string - the resource class's label.\n     */\n    getLabelForResourceClass(resClass: string): string {\n\n        if (resClass !== undefined) {\n\n            const resClassDef: ResourceClass = this.resourceClasses[resClass];\n\n            if (resClassDef !== undefined && resClassDef.label !== undefined) {\n                return resClassDef.label;\n            } else {\n                console.log(`cannot get label for ${resClass}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForResourceClass without argument resClass');\n        }\n    }\n\n    /**\n     * Returns all properties as an object.\n     *\n     * @returns Properties - all properties as an object.\n     */\n    getProperties(): Properties {\n        return this.properties;\n    }\n\n    /**\n     * Returns all properties as an array.\n     *\n     * @param {boolean} sortAsc sort properties by label in ascending order by default\n     * @returns Property[] - all properties as an array.\n     */\n    getPropertiesAsArray(sortAsc: boolean = true): Array<Property> {\n\n        const properties: Array<Property> = [];\n\n        // tslint:disable-next-line:forin\n        for (const propIri in this.properties) {\n            const prop: Property = this.properties[propIri];\n            properties.push(prop);\n        }\n\n        // properties order by label in ascending order\n        properties.sort(OntologyInformation.sortFunc);\n\n        // properties order by label in descending order\n        if (!sortAsc) {\n            properties.reverse();\n        }\n\n        return properties;\n\n    }\n\n    /**\n     * Returns a property's label.\n     *\n     * @param {string} property to query for.\n     * @returns string - the property's label.\n     */\n    getLabelForProperty(property: string): string {\n\n        if (property !== undefined) {\n\n            const propDef: Property = this.properties[property];\n\n            if (propDef !== undefined && propDef.label !== undefined) {\n                return propDef.label;\n            } else {\n                console.log(`cannot get label for ${property}`);\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForProperty without argument property');\n        }\n    }\n\n}\n\n\n/**\n * Requests ontology information from Knora and caches it.\n * Other components or services obtain ontology information through this service.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class OntologyCacheService {\n\n    /**\n     * Ontologies ingored by this service.\n     * @param {string[]} excludedOntologies\n     */\n    private excludedOntologies: Array<string> = [KnoraConstants.SalsahGuiOntology, KnoraConstants.StandoffOntology];\n\n    /**\n     * @param {string[]} excludedProperties properties that Knora is not responsible for and that have to be ignored because they cannot be resolved at the moment.\n     */\n    private excludedProperties: Array<string> = [KnoraConstants.RdfsLabel];\n\n    /**\n     * @param {string[]} nonResourceClasses class definitions that are not be treated as Knora resource classes\n     */\n    private nonResourceClasses: Array<string> = [KnoraConstants.ForbiddenResource, KnoraConstants.XMLToStandoffMapping, KnoraConstants.ListNode];\n\n    /**\n     * @param {OntologyCache} cacheOntology central instance that caches all definitions\n     */\n    private cacheOntology: OntologyCache = new OntologyCache();\n\n    constructor(private _ontologyService: OntologyService) {\n    }\n\n    /**\n     * Requests the metadata of all ontologies from Knora.\n     *\n     * @returns Observable<object> - metadata for all ontologies as JSON-LD (no prefixes, all Iris fully expanded).\n     */\n    private getOntologiesMetadataFromKnora(): Observable<object> {\n\n        return this._ontologyService.getOntologiesMetadata().pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Requests all entity definitions (resource classes and properties) for the given ontology from Knora.\n     *\n     * @param {string} ontologyIri the Iri of the requested ontology.\n     * @returns Observable<object> - metadata for all entity definitions for ontology from Knora.\n     */\n    private getAllEntityDefinitionsForOntologyFromKnora(ontologyIri: string): Observable<object> {\n\n        return this._ontologyService.getAllEntityDefinitionsForOntologies(ontologyIri).pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Writes all the ontologies' metadata returned by Knora to the cache.\n     *\n     * @param {object[]} ontologies metadata of all existing ontologies as JSON-LD.\n     * @returns a new OntologyMetadata object\n     */\n    private convertAndWriteOntologiesMetadataToCache(ontologies: object[]) {\n\n        this.cacheOntology.ontologies = ontologies.map(\n            ontology => {\n                return new OntologyMetadata(ontology['@id'], ontology[KnoraConstants.RdfsLabel]);\n            }\n        );\n    }\n\n    /**\n     * Returns all ontologies' metadata from the cache and returns them.\n     *\n     * @returns Array<OntologyMetadata> - metadata of all existing ontologies.\n     */\n    private getAllOntologiesMetadataFromCache(): Array<OntologyMetadata> {\n\n        return this.cacheOntology.ontologies;\n\n    }\n\n    /**\n     * Returns resource class Iris from the ontology response.\n     * `knora-api:Resource` will be excluded.\n     *\n     * @param {Array<object>} classDefinitions the class definitions in an ontology response.\n     * @returns string[] - resource class Iris from the given class definitions.\n     */\n    private getResourceClassIrisFromOntologyResponse(classDefinitions: Array<object>): string[] {\n        const resourceClassIris: string[] = [];\n\n        for (const classDef of classDefinitions) {\n            const classIri = classDef['@id'];\n\n            // check that class name is not listed as a non resource class and that the isResourceClass flag is present and set to true\n            if (\n                classIri !== KnoraConstants.Resource && this.nonResourceClasses.indexOf(classIri)\n                === -1 && (classDef[KnoraConstants.IsResourceClass] !== undefined && classDef[KnoraConstants.IsResourceClass] === true)) {\n                // it is not a value class, but a resource class definition\n                resourceClassIris.push(classIri);\n            }\n        }\n\n        return resourceClassIris;\n    }\n\n    /**\n     * Converts a Knora response for all entity definitions for the requested ontology\n     * into an internal representation and caches it.\n     *\n     * Knora automatically includes the property definitions referred to in the cardinalities of resource classes.\n     * If they are defined in another ontology, that ontology is requested from Knora too.\n     *\n     * @param {Object} ontology the ontology to be cached.\n     * @returns void\n     */\n    private convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology: object): void {\n\n        const graph = ontology['@graph'];\n\n        // get all class definitions\n        const classDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlClass;\n            });\n\n        // get all property definitions\n        const propertyDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlObjectProperty ||\n                    entityType === KnoraConstants.OwlDatatypeProperty ||\n                    entityType === KnoraConstants.OwlAnnotationProperty ||\n                    entityType === KnoraConstants.RdfProperty;\n            });\n\n\n        // cache all resource class Iris belonging to the current ontology\n        this.cacheOntology.resourceClassIrisForOntology[ontology['@id']] = this.getResourceClassIrisFromOntologyResponse(classDefs);\n\n        // write class and property defintions to cache\n        this.convertAndWriteEntityDefinitionsToCache(classDefs, propertyDefs);\n\n    }\n\n    /**\n     * Returns definitions for the requested ontologies from the cache.\n     *\n     * @param {string[]} ontologyIris the ontologies for which definitions should be returned.\n     * @returns Observable<OntologyInformation> - the definitions for the requested ontologies.\n     */\n    private getOntologyInformationFromCache(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const resourceClassesForOntology = new ResourceClassIrisForOntology();\n\n        // collect resource class Iris for all requested named graphs\n        let allResourceClassIris = [];\n\n        for (const ontologyIri of ontologyIris) {\n\n            if (this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined) {\n                throw new OntologyCacheError(`getResourceClassesForOntologiesFromCache: ontology not found in cache: ${ontologyIri}`);\n            }\n\n            // add information for the given ontology\n            resourceClassesForOntology[ontologyIri] = this.cacheOntology.resourceClassIrisForOntology[ontologyIri];\n\n            // add all resource class Iris of this ontology\n            allResourceClassIris = allResourceClassIris.concat(this.cacheOntology.resourceClassIrisForOntology[ontologyIri]);\n        }\n\n        // get resource class definitions for all requested ontologies\n        return this.getResourceClassDefinitions(allResourceClassIris).pipe(\n            map(\n                resClassDefs => {\n                    return new OntologyInformation(\n                        resourceClassesForOntology, resClassDefs.getResourceClasses(), resClassDefs.getProperties()\n                    );\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora ontology response into an internal representation and caches it.\n     *\n     * @param {object[]} resourceClassDefinitions the resource class definitions returned by Knora.\n     * @param {object[]} propertyClassDefinitions the property definitions returned by Knora.\n     * @returns void\n     */\n    private convertAndWriteEntityDefinitionsToCache(resourceClassDefinitions: Array<object>, propertyClassDefinitions: Array<object>): void {\n\n        // convert and cache each given resource class definition\n        for (const resClass of resourceClassDefinitions) {\n\n            const resClassIri = resClass['@id'];\n\n            // represents all cardinalities of this resource class\n            const cardinalities: Cardinality[] = [];\n            const guiOrder: GuiOrder[] = [];\n\n            if (resClass[KnoraConstants.RdfsSubclassOf] !== undefined) {\n\n                let subclassOfCollection;\n\n                // check if it is a single object or a collection\n                if (!Array.isArray(resClass[KnoraConstants.RdfsSubclassOf])) {\n                    subclassOfCollection = [resClass[KnoraConstants.RdfsSubclassOf]];\n                } else {\n                    subclassOfCollection = resClass[KnoraConstants.RdfsSubclassOf];\n                }\n\n\n\n                // get cardinalities for the properties of a resource class\n                for (const curCard of subclassOfCollection) {\n\n\n\n                    // make sure it is a cardinality (it could also be an Iri of a superclass)\n                    if (curCard instanceof Object && curCard['@type'] !== undefined && curCard['@type'] === KnoraConstants.OwlRestriction) {\n\n                        let newCard;\n\n                        // get occurrence\n                        if (curCard[KnoraConstants.OwlMinCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.minCard, curCard[KnoraConstants.OwlMinCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.card, curCard[KnoraConstants.OwlCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlMaxCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.maxCard, curCard[KnoraConstants.OwlMaxCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else {\n                            // no known occurrence found\n                            throw new TypeError(`cardinality type invalid for ${resClass['@id']} ${curCard[KnoraConstants.OwlOnProperty]}`);\n                        }\n\n                        // add cardinality\n                        cardinalities.push(newCard);\n\n                        // get gui order\n                        let newGuiOrder;\n                        if (curCard[KnoraConstants.SalsahGuiOrder] !== undefined) {\n                            newGuiOrder = new GuiOrder(curCard[KnoraConstants.SalsahGuiOrder], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                            // add gui order\n                            guiOrder.push(newGuiOrder);\n                        }\n\n\n\n                    }\n\n                }\n            }\n\n            const resClassObj = new ResourceClass(\n                resClassIri,\n                resClass[KnoraConstants.ResourceIcon],\n                resClass[KnoraConstants.RdfsComment],\n                resClass[KnoraConstants.RdfsLabel],\n                cardinalities,\n                guiOrder\n            );\n\n            // write this resource class definition to the cache object\n            this.cacheOntology.resourceClasses[resClassIri] = resClassObj;\n        }\n\n        // cache the property definitions\n        this.convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyClassDefinitions);\n    }\n\n    /**\n     * Gets information about resource classes from the cache.\n     * The answer includes the property definitions referred to by the cardinalities of the given resource classes.\n     *\n     * @param {string[]} resClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - an [[OntologyCache]] representing the requested resource classes.\n     */\n    private getResourceClassDefinitionsFromCache(resClassIris: string[]): Observable<OntologyInformation> {\n        // collect the definitions for each resource class from the cache\n\n        const resClassDefs = new ResourceClasses();\n\n        // collect the properties from the cardinalities of the given resource classes\n        const propertyIris = [];\n\n        resClassIris.forEach(\n            resClassIri => {\n                resClassDefs[resClassIri] = this.cacheOntology.resourceClasses[resClassIri];\n\n                this.cacheOntology.resourceClasses[resClassIri].cardinalities.forEach(\n                    card => {\n                        // get property definition for each cardinality\n                        propertyIris.push(card.property);\n                    }\n                );\n            });\n\n        return this.getPropertyDefinitions(propertyIris).pipe(\n            map(\n                propDefs => {\n                    return new OntologyInformation(new ResourceClassIrisForOntology(), resClassDefs, propDefs.getProperties());\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora response for ontology information about properties\n     * into an internal representation and cache it.\n     *\n     * @param {object[]} propertyDefinitionsFromKnora the property definitions returned by Knora\n     * @returns void\n     */\n    private convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyDefinitionsFromKnora: Array<object>): void {\n\n        // convert and cache each given property definition\n        for (const propDef of propertyDefinitionsFromKnora) {\n\n            const propIri = propDef['@id'];\n\n            let isEditable = false;\n            if (propDef[KnoraConstants.isEditable] !== undefined && propDef[KnoraConstants.isEditable] === true) {\n                isEditable = true;\n            }\n\n            let isLinkProperty = false;\n            if (propDef[KnoraConstants.isLinkProperty] !== undefined && propDef[KnoraConstants.isLinkProperty] === true) {\n                isLinkProperty = true;\n            }\n\n            let isLinkValueProperty = false;\n            if (propDef[KnoraConstants.isLinkValueProperty] !== undefined && propDef[KnoraConstants.isLinkValueProperty] === true) {\n                isLinkValueProperty = true;\n            }\n\n            let subPropertyOf = [];\n            if (propDef[KnoraConstants.subPropertyOf] !== undefined && Array.isArray(propDef[KnoraConstants.subPropertyOf])) {\n                subPropertyOf = propDef[KnoraConstants.subPropertyOf].map((superProp: Object) => superProp['@id']);\n            } else if (propDef[KnoraConstants.subPropertyOf] !== undefined) {\n                subPropertyOf.push(propDef[KnoraConstants.subPropertyOf]['@id']);\n            }\n\n            let objectType;\n            if (propDef[KnoraConstants.ObjectType] !== undefined) {\n                objectType = propDef[KnoraConstants.ObjectType]['@id'];\n            }\n\n            const guiAttribute = [];\n            if (propDef[KnoraConstants.SalsahGuiAttribute] !== undefined) {\n                if (Array.isArray(propDef[KnoraConstants.SalsahGuiAttribute])) {\n                    for (const attr of propDef[KnoraConstants.SalsahGuiAttribute]) {\n                        guiAttribute.push(attr);\n                    }\n                } else {\n                    guiAttribute.push(propDef[KnoraConstants.SalsahGuiAttribute]);\n                }\n            }\n\n            // cache property definition\n            this.cacheOntology.properties[propIri] = new Property(\n                propIri,\n                objectType,\n                propDef[KnoraConstants.RdfsComment],\n                propDef[KnoraConstants.RdfsLabel],\n                subPropertyOf,\n                isEditable,\n                isLinkProperty,\n                isLinkValueProperty,\n                guiAttribute\n            );\n\n        }\n\n    }\n\n    /**\n     * Returns property definitions from the cache.\n     *\n     * @param {string[]} propertyIris the property definitions to be returned.\n     * @returns OntologyInformation - requested property defintions.\n     */\n    private getPropertyDefinitionsFromCache(propertyIris: string[]): OntologyInformation {\n\n        const propertyDefs = new Properties();\n\n        propertyIris.forEach(\n            propIri => {\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return;\n                }\n\n                if (this.cacheOntology.properties[propIri] === undefined) {\n                    throw new OntologyCacheError(`getPropertyDefinitionsFromCache: property not found in cache: ${propIri}`);\n                }\n\n                propertyDefs[propIri] = this.cacheOntology.properties[propIri];\n            }\n        );\n\n        return new OntologyInformation(new ResourceClassIrisForOntology(), new ResourceClasses(), propertyDefs);\n\n    }\n\n    /**\n     * Returns metadata about all ontologies.\n     *\n     * @returns Observable<Array<OntologyMetadata>> - metadata about all ontologies.\n     */\n    public getOntologiesMetadata(): Observable<Array<OntologyMetadata>> {\n\n        if (this.cacheOntology.ontologies.length === 0) {\n            // nothing in cache yet, get metadata from Knora\n            return this.getOntologiesMetadataFromKnora().pipe(\n                map(\n                    metadata => {\n                        this.convertAndWriteOntologiesMetadataToCache(metadata['@graph'].filter((onto) => {\n                            // ignore excluded ontologies\n                            return this.excludedOntologies.indexOf(onto['@id']) === -1;\n                        }));\n                        return this.getAllOntologiesMetadataFromCache();\n                    }\n                )\n            );\n        } else {\n            // return metadata from cache\n            return of(this.getAllOntologiesMetadataFromCache());\n        }\n\n    }\n\n\n    /**\n     * Requests the requested ontologies from Knora, adding them to the cache.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be requested.\n     * @returns Observable<any[]>\n     */\n    private getAndCacheOntologies(ontologyIris: string[]): Observable<any[]> {\n\n        // array to be populated with Observables\n        const observables = [];\n\n        // do a request for each ontology\n        ontologyIris.forEach(ontologyIri => {\n            // push an Observable onto `observables`\n            observables.push(this.getAllEntityDefinitionsForOntologyFromKnora(ontologyIri).pipe(\n                map(\n                    (ontology: object) => {\n                        // write response to cache\n                        this.convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology);\n                    }\n                )\n            ));\n        });\n\n        // forkJoin returns an Observable of an array of results\n        // returned by each Observable contained in `observables`\n        // a subscription to the Observable returned by forkJoin is executed\n        // once all Observables have been completed\n        return forkJoin(observables);\n    }\n\n\n    /**\n     * Returns the entity definitions for the requested ontologies.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be queried.\n     * @returns Observable<OntologyInformation> - all ontology metadata from the cache\n     */\n    public getEntityDefinitionsForOntologies(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const ontologyIrisToQuery = ontologyIris.filter(\n            ontologyIri => {\n                // return the ontology Iris that are not cached yet\n                return this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined;\n            });\n\n        // get ontologies that are mot cached yet\n        if (ontologyIrisToQuery.length > 0) {\n\n            return this.getAndCacheOntologies(ontologyIrisToQuery).pipe(\n                mergeMap(\n                    () => {\n                        // executed once all ontologies have been cached\n                        return this.getOntologyInformationFromCache(ontologyIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getOntologyInformationFromCache(ontologyIris);\n        }\n\n    }\n\n    /**\n     * Returns the definitions for the given resource class Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * Properties contained in the cardinalities will be returned too.\n     *\n     * @param {string[]} resourceClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - the requested resource classes (including properties).\n     */\n    public getResourceClassDefinitions(resourceClassIris: string[]): Observable<OntologyInformation> {\n\n        const resClassIrisToQueryFor: string[] = resourceClassIris.filter(\n            resClassIri => {\n\n                // return the resource class Iris that are not cached yet\n                return this.cacheOntology.resourceClasses[resClassIri] === undefined;\n\n            });\n\n        if (resClassIrisToQueryFor.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing resource classes\n            const ontologyIris: string[] = resClassIrisToQueryFor.map(\n                resClassIri => {\n                    return Utils.getOntologyIriFromEntityIri(resClassIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                mergeMap(\n                    () => {\n\n                        return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n\n        }\n    }\n\n    /**\n     * Get definitions for the given property Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be returned .\n     * @returns Observable<OntologyInformation> - the requested property definitions.\n     */\n    public getPropertyDefinitions(propertyIris: string[]): Observable<OntologyInformation> {\n\n        const propertiesToQuery: string[] = propertyIris.filter(\n            propIri => {\n\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return false;\n                }\n\n                // return the property Iris that are not cached yet\n                return this.cacheOntology.properties[propIri] === undefined;\n            }\n        );\n\n        if (propertiesToQuery.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing properties\n            const ontologyIris: string[] = propertiesToQuery.map(\n                propIri => {\n                    return Utils.getOntologyIriFromEntityIri(propIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                map(\n                    results => {\n                        if (results) {\n                            return this.getPropertyDefinitionsFromCache(propertyIris);\n                        } else {\n                            throw new Error('Problem with: return this.getPropertyDefinitionsFromCache(propertyIris);');\n                        }\n                    }\n                )\n            );\n        } else {\n            return of(this.getPropertyDefinitionsFromCache(propertyIris));\n        }\n    }\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('AuthenticationResponse')\nexport class AuthenticationResponse {\n\n    @JsonProperty('token', String)\n    public token: string = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n\n@JsonObject('Project')\nexport class Project {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('shortname', String)\n    public shortname: string = undefined;\n\n    @JsonProperty('shortcode', String, true)\n    public shortcode: string = undefined;\n\n    @JsonProperty('longname', String, true)\n    public longname: string = undefined;\n\n    @JsonProperty('description', [StringLiteral], true)\n    public description: StringLiteral[] = [new StringLiteral()];\n\n    @JsonProperty('keywords', [String], true)\n    public keywords: string[] = undefined;\n\n    @JsonProperty('logo', String, true)\n    public logo: string = undefined;\n\n    @JsonProperty('institution', String, true)\n    public institution: string = undefined;\n\n    @JsonProperty('ontologies', [String])\n    public ontologies: string[] = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from '../projects/project';\n\n@JsonObject('Group')\nexport class Group {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('description', String)\n    public description: string = undefined;\n\n    @JsonProperty('project', Project, false)\n    public project: Project = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupResponse')\nexport class GroupResponse {\n\n    @JsonProperty('group', Group)\n    public group: Group = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupsResponse')\nexport class GroupsResponse {\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListInfo')\nexport class ListInfo {\n\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral], true)\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral], true)\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListNode')\nexport class ListNode {\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('hasRootNode', String, true)\n    public hasRootNode: string = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n\n    @JsonProperty('children', [ListNode], true)\n    public children: ListNode[] = undefined;\n\n    @JsonProperty('position', Number, true)\n    public position: number = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\nimport { ListNode } from './list-node';\n\n@JsonObject('List')\nexport class List {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n\n    @JsonProperty('children', [ListNode], false)\n    public children: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\n\n@JsonObject('ListInfoResponse')\nexport class ListInfoResponse {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n/**\n * @deprecated You should use ListNode instead\n */\n@JsonObject('ListNodeInfo')\nexport class ListNodeInfo {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n/**\n * @deprecated You should use ListNodeResponse instead\n */\n@JsonObject('ListNodeInfoResponse')\nexport class ListNodeInfoResponse {\n\n    @JsonProperty('nodeinfo', ListNode, false)\n    public nodeinfo: ListNode = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { List } from './list';\n\n@JsonObject('ListResponse')\nexport class ListResponse {\n\n    @JsonProperty('list', List, false)\n    public list: List = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n@JsonObject('ListNodeResponse')\nexport class ListNodeResponse {\n\n    @JsonProperty('nodeinfo', ListNode, false)\n    public nodeinfo: ListNode = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNode } from './list-node';\n\n@JsonObject('ListsResponse')\nexport class ListsResponse {\n\n    @JsonProperty('lists', [ListNode], false)\n    public lists: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('OntologyInfoShort')\nexport class OntologyInfoShort {\n\n    @JsonProperty('ontologyIri', String)\n    public ontologyIri: string = undefined;\n\n    @JsonProperty('ontologyName', String)\n    public ontologyName: string = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('PermissionData')\nexport class PermissionData {\n\n    @JsonProperty('groupsPerProject', Object)\n    public groupsPerProject: any = undefined;\n\n    @JsonProperty('administrativePermissionsPerProject', Object)\n    public administrativePermissionsPerProject: any = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from '../groups/group';\nimport { PermissionData } from '../permissions/permission-data';\nimport { Project } from '../projects/project';\n\n@JsonObject('User')\nexport class User {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('email', String)\n    public email: string = undefined;\n\n    @JsonProperty('username', String)\n    public username: string = undefined;\n\n    @JsonProperty('password', String, true)\n    public password: string = undefined;\n\n    @JsonProperty('token', String, true)\n    public token: string = undefined;\n\n    @JsonProperty('givenName', String)\n    public givenName: string = undefined;\n\n    @JsonProperty('familyName', String)\n    public familyName: string = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('lang', String)\n    public lang: string = undefined;\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n    @JsonProperty('sessionId', String, true)\n    public sessionId: string = undefined;\n\n    @JsonProperty('permissions', PermissionData)\n    public permissions: PermissionData = undefined;\n\n    @JsonProperty('systemAdmin', Boolean, true)\n    public systemAdmin?: boolean = false;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from '../users/user';\n\n@JsonObject('ProjectMembersResponse')\nexport class ProjectMembersResponse {\n    @JsonProperty('members', [User])\n    public members: User[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n\n@JsonObject('ProjectResponse')\nexport class ProjectResponse {\n\n    @JsonProperty('project', Project)\n    public project: Project = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n@JsonObject('ProjectsResponse')\nexport class ProjectsResponse {\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UsersResponse')\nexport class UsersResponse {\n\n    @JsonProperty('users', [User])\n    public users: User[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UserResponse')\nexport class UserResponse {\n\n    @JsonProperty('user', User)\n    public user: User = undefined;\n}\n","import { ReadResource } from '../resources/read-resource';\nimport { OntologyInformation } from '../../../../services';\nimport { KnoraConstants } from '../../knora-constants';\nimport { DateRangeSalsah, DateSalsah } from '../../shared/date';\n\n/**\n * An abstract interface representing any value object.\n */\nexport interface ReadPropertyItem {\n\n    /**\n     * The value object's Iri.\n     */\n    readonly id: string;\n\n    /**\n     * The value object's type.\n     */\n    readonly type: string;\n\n    /**\n     * The property pointing to the value object.\n     */\n    readonly propIri: string;\n\n    /**\n     * Gets the class name of the class that implements this interface.\n     *\n     * @returns {string}\n     */\n    getClassName(): string;\n\n    /**\n     * Gets the value as a string (complexity of the value possibly reduced).\n     *\n     * @returns {string}\n     */\n    getContent(): string;\n}\n\n/**\n * Abstract class representing a text value object with or without markup.\n */\nexport abstract class ReadTextValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string = KnoraConstants.TextValue;\n\n    abstract propIri: string;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a text value object without markup (mere character string).\n */\nexport class ReadTextValueAsString extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly str: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsString;\n    }\n\n    getContent() {\n        return this.str;\n    }\n}\n\n/**\n * Represents resources referred to by standoff links.\n */\nexport class ReferredResourcesByStandoffLink {\n    [index: string]: ReadResource;\n}\n\n/**\n * Represents a text value object with markup that has been turned into HTML.\n */\nexport class ReadTextValueAsHtml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly html: string, readonly referredResources: ReferredResourcesByStandoffLink) {\n        super();\n    }\n\n    /**\n     * Gets information about a resource referred to by a standoff link from a text value.\n     *\n     * @param {string} resourceIri the Iri of the referred resource.\n     * @param {OntologyInformation} ontologyInfo ontology information.\n     * @returns {string} information about the referred resource's class and its label.\n     */\n\n\n    getReferredResourceInfo(resourceIri: string, ontologyInfo: OntologyInformation) {\n        if (this.referredResources !== undefined && this.referredResources[resourceIri] !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResources[resourceIri].type);\n\n            return this.referredResources[resourceIri].label + ` (${resClassLabel})`;\n        } else {\n            return 'no information found about referred resource (target of standoff link)';\n        }\n    }\n\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsHtml;\n    }\n\n    getContent() {\n        return this.html;\n    }\n\n}\n\n/**\n * Represents a text value object with markup as XML.\n */\nexport class ReadTextValueAsXml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly xml: string, readonly mappingIri: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsXml;\n    }\n\n    getContent() {\n        return this.xml;\n    }\n\n}\n\n\n/**\n * Represents a date value object.\n */\nexport class ReadDateValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly calendar: string,\n        readonly startYear: number,\n        readonly endYear: number,\n        readonly startEra: string,\n        readonly endEra: string,\n        readonly startMonth?: number,\n        readonly endMonth?: number,\n        readonly startDay?: number,\n        readonly endDay?: number) {\n    }\n\n    readonly type = KnoraConstants.DateValue;\n\n    private separator = '/';\n\n    getDateSalsah(): DateSalsah | DateRangeSalsah {\n        if (this.startYear === this.endYear && this.startMonth === this.endMonth && this.startDay === this.endDay && this.startEra === this.endEra) {\n            // precise date\n            return new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay);\n        } else {\n            // date period\n            return new DateRangeSalsah(new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay), new DateSalsah(this.calendar, this.endEra, this.endYear, this.endMonth, this.endDay));\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadDateValue;\n    }\n\n    getContent() {\n        return this.getDateSalsah().getDateAsString();\n    }\n}\n\n/**\n * Represents a link value object (reification).\n */\nexport class ReadLinkValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly referredResourceIri: string, readonly referredResource?: ReadResource) {\n\n    }\n\n    readonly type = KnoraConstants.LinkValue;\n\n    getReferredResourceInfo(ontologyInfo: OntologyInformation) {\n        if (this.referredResource !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResource.type);\n\n            return this.referredResource.label + ` (${resClassLabel})`;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadLinkValue;\n    }\n\n    getContent() {\n        if (this.referredResource !== undefined) {\n            return this.referredResource.label;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n}\n\n/**\n * Represents an integer value object.\n */\nexport class ReadIntegerValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly integer: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntegerValue;\n    }\n\n    getContent() {\n        return this.integer.toString();\n    }\n\n}\n\n/**\n * Represents a decimal value object.\n */\nexport class ReadDecimalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly decimal: number) {\n\n    }\n\n    readonly type = KnoraConstants.DecimalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDecimalValue;\n    }\n\n    getContent() {\n        return this.decimal.toString();\n    }\n}\n\n/**\n * Represents a still image value object.\n */\nexport class ReadStillImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly imageFilename: string,\n        readonly imageServerIIIFBaseURL: string,\n        readonly imagePath: string,\n        readonly dimX: number,\n        readonly dimY: number) {\n\n        // if the image is a jpeg, it is a preview image\n        this.isPreview = imageFilename.endsWith('.jpg');\n\n    }\n\n    readonly type = KnoraConstants.StillImageFileValue;\n\n    readonly isPreview: boolean;\n\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.imagePath;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.imageServerIIIFBaseURL + '/' + this.imageFilename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadStillImageFileValue;\n    }\n\n    getContent() {\n        return this.imagePath;\n    }\n}\n\n/**\n * Represents a moving image value object.\n */\nexport class ReadMovingImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly filename: string,\n        readonly mediaServerIIIFBaseURL: string,\n        readonly path: string,\n        readonly dimX: number,\n        readonly dimY: number,\n        readonly duration: number,\n        readonly fps?: number,\n        readonly aspectRatio?: string) {\n\n    }\n\n    readonly type = KnoraConstants.MovingImageFileValue;\n\n    // preview doesn't include the video file itself\n    readonly isPreview: boolean;\n\n    /*\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.path;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.mediaServerIIIFBaseURL + '/' + this.filename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n    */\n\n    getClassName(): string {\n        return KnoraConstants.ReadMovingImageFileValue;\n    }\n\n    getContent() {\n        return this.path;\n    }\n}\n\n/**\n * Represents a text representation value object\n */\nexport class ReadTextFileValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly textFilename: string, readonly textFileURL: string) {\n\n    }\n\n    readonly type = KnoraConstants.TextFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextFileValue;\n    }\n\n    getContent() {\n        return this.textFileURL;\n    }\n\n}\n\n/**\n * Represents a color value object.\n */\nexport class ReadColorValue implements ReadPropertyItem {\n\n    constructor(readonly id: string,\n        readonly propIri,\n        readonly colorHex: string) {\n    }\n\n    readonly type = KnoraConstants.ColorValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadColorValue;\n    }\n\n    getContent() {\n        return this.colorHex;\n    }\n}\n\n/**\n * Represents a point in a 2D-coordinate system (for geometry values).\n */\nexport class Point2D {\n    constructor(public x: number, public y: number) {\n    }\n}\n\n/**\n * Represents a geometry value parsed from JSON.\n */\nexport class RegionGeometry {\n    constructor(public status: string,\n        public lineColor: string,\n        public lineWidth: number,\n        public points: Point2D[],\n        public type: string,\n        public radius?: Point2D\n    ) {\n    }\n}\n\n/**\n * Represents a geometry value object.\n */\nexport class ReadGeomValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly geometryString: string) {\n\n        const geometryJSON = JSON.parse(geometryString);\n\n        const points: Point2D[] = [];\n        for (const point of geometryJSON.points) {\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        let radius;\n        if (geometryJSON.radius) {\n            radius = new Point2D(geometryJSON.radius.x, geometryJSON.radius.y);\n        }\n\n        this.geometry = new RegionGeometry(\n            geometryJSON.status,\n            geometryJSON.lineColor,\n            geometryJSON.lineWidth,\n            points,\n            geometryJSON.type,\n            radius\n        );\n\n    }\n\n    readonly geometry: RegionGeometry;\n\n    readonly type = KnoraConstants.GeomValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadGeomValue;\n    }\n\n    getContent() {\n        return this.geometryString;\n    }\n}\n\n/**\n * Represents a URI value object.\n */\nexport class ReadUriValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly uri: string) {\n\n    }\n\n    readonly type = KnoraConstants.UriValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadUriValue;\n    }\n\n    getContent() {\n        return this.uri;\n    }\n\n}\n\n/**\n * Represents a Boolean value object.\n */\nexport class ReadBooleanValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly bool: boolean) {\n\n    }\n\n    readonly type = KnoraConstants.BooleanValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadBooleanValue;\n    }\n\n    getContent() {\n        return this.bool.toString();\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadIntervalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly intervalStart: number, readonly intervalEnd: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntervalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntervalValue;\n    }\n\n    getContent() {\n        return this.intervalStart.toString() + '-' + this.intervalEnd;\n    }\n\n}\n\n/**\n * Represents a list value object.\n */\nexport class ReadListValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly listNodeIri: string) {\n\n    }\n\n    readonly type = KnoraConstants.ListValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadListValue;\n    }\n\n    getContent() {\n        return this.listNodeIri;\n    }\n\n}\n","import { ReadProperties, StillImageRepresentation } from '../../../';\n\n/**\n * Represents a resource and its properties.\n */\nexport class ReadResource {\n\n    /**\n     *\n     * @param {string} id the resource's Iri.\n     * @param {string} type the resource's type (class).\n     * @param {string} label the resource's rdfs:label.\n     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).\n     * @param {ReadProperties} properties the resources's properties.\n     */\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        // TODO: we should use a more generic object here; or what's about incomingSequences?\n        public incomingRegions: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like incomingMedia or incomingFileRepresentation\n        public incomingStillImageRepresentations: Array<ReadResource>,\n        public incomingLinks: Array<ReadResource>,\n        // TODO: we should use a more generic object here, something like media or fileRepresentation\n        public stillImageRepresentationsToDisplay: StillImageRepresentation[],\n        // TODO: the properties should be a list: Array<ReadProperties> or not?\n        public readonly properties?: ReadProperties) {\n    }\n\n}\n\n/**\n * This is a temporary class, to test a new resource setup.\n * When it works, we will merge it with the ReadResource object\n */\nexport class Resource {\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        public incomingAnnotations: Array<Resource>,\n        public incomingFileRepresentations: Array<Resource>,\n        public incomingLinks: Array<ReadResource>,\n        public fileRepresentationsToDisplay: Array<ReadResource>,\n        public readonly properties?: ReadProperties) {\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceError } from '../declarations/api-service-error';\nimport { ApiServiceResult } from '../declarations/api-service-result';\nimport { from } from 'rxjs';\nimport { KuiCoreConfigToken } from '../core.module';\nimport { KnoraConstants } from '../declarations/api/knora-constants';\n\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\nconst semver = require('semver');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport abstract class ApiService {\n\n    // if is loading, set it true;\n    // it can be used in components\n    // for progress loader element\n    loading = false;\n\n    protected constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config) {\n\n        // console.log('ApiService constructor: config', config);\n    }\n\n    /**\n     * GET\n     *\n     * @param {string} path the URL for the GET request.\n     * @param {HttpParams} params the parameters for the GET request.\n     * @returns Observable of any\n     */\n    httpGet(path: string, params?: HttpParams): Observable<any> {\n\n        this.loading = true;\n\n        return this.http.get(this.config.api + path, { observe: 'response', params: params }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(response.headers.get('Server'));\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * Processes JSON-LD returned by Knora.\n     * Expands Iris and creates an empty context object.\n     *\n     * @param {ApiServiceResult} resourceResponse\n     */\n    protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n        const resPromises = jsonld.promises;\n        // compact JSON-LD using an empty context: expands all Iris\n        const resPromise = resPromises.compact(resourceResponse.body, {});\n\n        // convert promise to Observable and return it\n        // https://www.learnrxjs.io/operators/creation/frompromise.html\n        return from(resPromise);\n\n    }\n\n    /**\n     * POST\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPost(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.post(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * PUT\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPut(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.put(this.config.api + path, body, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n    /**\n     * DELETE\n     *\n     * @param {string} path\n     * @returns Observable of any\n     */\n    httpDelete(path: string): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.delete(this.config.api + path, { observe: 'response' }).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.header = { 'server': response.headers.get('Server') };\n                this.compareVersion(result.header.server);\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param {HttpErrorResponse} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        // console.error(error);\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n\n    /**\n     * handle json error in case of type error in json response (json2typescript)\n     *\n     * @param {any} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n        if (error instanceof ApiServiceError) return throwError(error);\n\n        const serviceError = new ApiServiceError();\n        serviceError.header = { 'server': error.headers.get('Server') };\n        serviceError.status = -1;\n        serviceError.statusText = 'Invalid JSON';\n        serviceError.errorInfo = error;\n        serviceError.url = '';\n        return throwError(serviceError);\n\n    }\n\n    protected compareVersion(server: string): void {\n\n        // expected knora api version\n        const expected: string = KnoraConstants.KnoraVersion;\n\n        // existing knora api version\n        if (server) {\n            const versions: string[] = server.split(' ');\n            const existing: string = versions[0].split('/')[1];\n\n            // compare the two versions: expected vs existing\n            if (semver.diff(existing, expected) === 'major') {\n                console.warn('The version of the @knora/core module works with Knora v' + expected + ', but you are using it with Knora v' + existing);\n            }\n        } else {\n            // console.warn('No server information from headers response');\n        }\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { NewOntology } from '../../declarations/api/v2/ontology/new-ontology';\nimport { ApiService } from '../api.service';\nimport { NewResourceClass } from '../../declarations/api/v2/ontology/new-resource-class';\nimport { NewProperty } from '../../declarations/api/v2/ontology/new-property';\n\n/**\n * Requests ontology information from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------\n\n    /**\n     * DEPRECATED: You should use getAllOntologies()\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getOntologiesMetadata(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getAllOntologies(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the ontologies of a specific project\n     *\n     * @param projectIri\n     * @returns Observable<ApiServiceResult> - the metadata of project ontologies.\n     */\n    getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // GET ontology\n    // ------------------------------------------------------------------------\n\n    /**\n     * Requests all entity definitions for the given ontologies from Knora's ontologies route.\n     *\n     * @param {string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.\n     * @returns Observable<ApiServiceResult> - the requested ontology.\n     */\n    getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n    }\n\n    /**\n     * Requests information about the given resource classes from Knora's ontologies route.\n     *\n     * @param {string[]} resourceClassIris the Iris of the resource classes to be queried.\n     * @returns Observable<ApiServiceResult> - the requested resource class definitions.\n     */\n    getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n        if (resourceClassIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n        }\n\n        let resClassUriEnc = '';\n\n        resourceClassIris.forEach(function (resClassIri) {\n            resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n    }\n\n    /**\n     * Requests properties from Knora's ontologies route.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be queried.\n     * @returns Observable<ApiServiceResult> - the requested properties.\n     */\n    getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n        if (propertyIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n        }\n\n        let propertiesUriEnc = '';\n\n        propertyIris.forEach(function (resClassIri) {\n            propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new ontology.\n     *\n     * @param {NewOntology} data Data contains: projectIri, name, label\n     * @returns Observable<ApiServiceResult> incl. ontolog iri and knora-api:lastModificationDate\n     */\n    createOntology(data: NewOntology): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies';\n\n        const ontology = {\n            'knora-api:ontologyName': data.name,\n            'knora-api:attachedToProject': {\n                '@id': data.projectIri,\n            },\n            'rdfs:label': data.label,\n            '@context': {\n                'rdfs': KnoraConstants.RdfsSchema,\n                'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n            }\n        };\n\n        return this.httpPost(path, ontology).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    createResourceClass(data: NewResourceClass): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/classes';\n\n        // TODO: add the following values to parameter\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        const resourceClass = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [{\n                '@id': onto_name + ':' + data.name,\n                '@type': 'owl:Class',\n                'rdfs:label': data.labels,\n                'rdfs:comment': data.comments,\n                'rdfs:subClassOf': {\n                    '@id': data.subClassOf\n                }\n            }],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n\n        };\n\n        return this.httpPost(path, resourceClass).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    createProperty(data: NewProperty[]): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/properties';\n\n        // TODO: add the following values to parameter\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        const graph = [];\n\n        for (const prop of data) {\n            const prop_obj = {\n                '@id': onto_name + ':' + prop.name,\n                '@type': 'owl:ObjectProperty',\n                'rdfs:label': prop.labels,\n                'rdfs:comment': prop.comments,\n                'rdfs:subPropertyOf': prop.subPropertyOf,\n                'salsah-gui:guiElement': {\n                    '@id': prop.guiElement\n                }\n            };\n            graph.push(prop_obj);\n        }\n\n        const property = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [\n                graph\n            ],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'salsah-gui': 'http://api.knora.org/ontology/salsah-gui/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n        };\n\n\n        return this.httpPost(path, property).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    setCardinality(data: any): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies/cardinalities';\n\n        // TODO: add the following values to parameter\n        let class_iri: string;\n        let prop_iri: string;\n\n        let onto_iri: string;\n        let onto_name: string;\n        let last_onto_date: string;\n\n        // TODO: find a way with typescript for the following python construct\n        /*\n        let switcher = {\n            '1': ('owl:cardinality', 1),\n            '0-1': ('owl:maxCardinality', 1),\n            '0-n': ('owl:minCardinality', 0),\n            '1-n': ('owl:minCardinality', 1)\n        };\n\n        let occurrence: any = switcher.get(data.occurrence);\n        */\n\n        const cardinality = {\n            '@id': onto_iri,\n            '@type': 'owl:Ontology',\n            'knora-api:lastModificationDate': last_onto_date,\n            '@graph': [{\n                '@id': class_iri,\n                '@type': 'owl:Class',\n                'rdfs:subClassOf': {\n                    '@type': 'owl:Restriction',\n                    // occurrence[0]: occurrence[1],\n                    'owl:onProperty': {\n                        '@id': prop_iri\n                    }\n                }\n            }],\n            '@context': {\n                'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n                'knora-api': 'http://api.knora.org/ontology/knora-api/v2#',\n                'owl': 'http://www.w3.org/2002/07/owl#',\n                'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',\n                'xsd': 'http://www.w3.org/2001/XMLSchema#',\n                onto_name: onto_iri + '#'\n            }\n        };\n\n        return this.httpPost(path, cardinality).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { ReadResource } from './read-resource';\nimport { OntologyInformation } from '../../../../services/v2/ontology-cache.service';\n\n/**\n * Represents a sequence of resources.\n */\nexport class ReadResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `ReadResource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<ReadResource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor (public readonly resources: Array<ReadResource>, public readonly numberOfResources: number) {\n    }\n\n}\n","/**\n * Represents the result of a count query.\n */\nexport class CountQueryResult {\n\n    /**\n     *\n     * @param numberOfResults total number of results for a query.\n     */\n    constructor(public readonly numberOfResults: number) {\n\n    }\n}\n","import { ReadStillImageFileValue } from '../properties/read-property-item';\nimport { ImageRegion } from './image-region';\n\n/**\n * Represents an image including its regions.\n */\n\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param {ReadStillImageFileValue} stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param {ImageRegion[]} regions the regions belonging to the image.\n     */\n    constructor(readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: ImageRegion[]) {\n\n    }\n\n}\n","import { ReadGeomValue } from '../properties/read-property-item';\nimport { ReadResource } from '../resources/read-resource';\nimport { KnoraConstants } from '../../knora-constants';\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\n\nexport class ImageRegion {\n\n    /**\n     *\n     * @param {ReadResource} regionResource a resource of type Region\n     */\n    constructor(readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns {ReadGeomValue[]}\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, Group, GroupResponse, GroupsResponse } from '../../declarations/';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about group from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupsService extends ApiService {\n\n    private path: string = '/admin/groups';\n\n    /**\n     * Return a list of all groups.\n     *\n     * @returns Observable<Group[]>\n     */\n    getAllGroups(): Observable<Group[]> {\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a group object (filter by IRI).\n     *\n     * @param {string} iri\n     * @returns Observable<Group>\n     */\n    getGroupByIri(iri: string): Observable<Group> {\n        this.path += '/' + encodeURIComponent(iri);\n\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupResponse).group),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, List, ListCreatePayload, ListInfo, ListInfoResponse, ListInfoUpdatePayload, ListNode, ListNodeResponse, ListNodeUpdatePayload, ListResponse, ListsResponse } from '../../declarations';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about lists from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all lists.\n     *\n     * @param {string} [projectIri]\n     * @returns Observable<ListNode[]>\n     */\n    getLists(projectIri?: string): Observable<ListNode[]> {\n        let newPath = this.path;\n        if (projectIri) {\n            newPath += '?projectIri=' + encodeURIComponent(projectIri);\n        }\n        return this.httpGet(newPath).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list object.\n     *\n     * @param {string} listIri\n     * @returns Observable<List>\n     */\n    getList(listIri: string): Observable<List> {\n        return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list info object.\n     *\n     * @param {string} listIri\n     * @returns Observable<ListInfo>\n     */\n    getListInfo(listIri: string): Observable<ListInfo> {\n        return this.httpGet(this.path + '/infos/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list node info object.\n     *\n     * @param {string} nodeIri\n     * @returns Observable<ListNode>\n     */\n    getListNodeInfo(nodeIri: string): Observable<ListNode> {\n        return this.httpGet(this.path + '/nodes/' + encodeURIComponent(nodeIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new list.\n     *\n     * @param {ListCreatePayload} payload\n     * @returns Observable<List>\n     */\n    createList(payload: ListCreatePayload): Observable<List> {\n        return this.httpPost(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Create new list node.\n     *\n     * @param {string} listIri\n     * @param {ListNodeUpdatePayload} payload\n     * @returns Observable<ListNode>\n     */\n    createListItem(listIri: string, payload: ListNodeUpdatePayload): Observable<ListNode> {\n        return this.httpPost(this.path + '/' + encodeURIComponent(listIri), payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit list data.\n     *\n     * @param {ListInfoUpdatePayload} payload\n     * @returns Observable<ListInfo>\n     */\n    updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n        return this.httpPut(this.path + '/infos/' + encodeURIComponent(payload.listIri), payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { ApiServiceResult, Project, ProjectMembersResponse, ProjectResponse, ProjectsResponse, User } from '../../declarations/';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about projects from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all projects.\n     *\n     * @returns Observable<Project[]>\n     */\n    getAllProjects(): Observable<Project[]> {\n        return this.httpGet('/admin/projects').pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    getProjectByIri(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortname(shortname: string): Observable<Project> {\n        const url = '/admin/projects/shortname/' + shortname;\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortcode(shortcode: string): Observable<Project> {\n        const url = '/admin/projects/shortcode/' + shortcode;\n        return this.getProject(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<Project>\n     */\n    protected getProject(url: string): Observable<Project> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is project id (iri).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByIri(iri: string): Observable<User[]> {\n        const url = '/admin/projects/iri/' + encodeURIComponent(iri) + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortname.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortname(shortname: string): Observable<User[]> {\n        const url = '/admin/projects/shortname/' + shortname + '/members' ;\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortcode.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n        const url = '/admin/projects/shortcode/' + shortcode + '/members';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project member retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<User[]>\n     */\n     private getProjectMembers(url: string): Observable<User[]> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new project.\n     *\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    createProject(data: any): Observable<Project> {\n        const url: string = '/admin/projects';\n        return this.httpPost(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit project data.\n     *\n     * @param {string} iri identifier of the project\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    updateProject(iri: string, data: any): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate project (if it was deleted).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    activateProject(iri: string): Observable<Project> {\n        const data: any = {\n            status: true\n        };\n\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete (set inactive) project.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    deleteProject(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/iri/' + encodeURIComponent(iri);\n\n        return this.httpDelete(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../api.service';\nimport {\n    ApiServiceResult,\n    Group,\n    GroupsResponse,\n    User,\n    UserResponse,\n    UsersResponse\n} from '../../declarations/';\n\n/**\n * This service uses the Knora admin API and handles all user data.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all users.\n     *\n     * @returns Observable<User[]>\n     */\n    getAllUsers(): Observable<User[]> {\n        return this.httpGet('/admin/users').pipe(\n            map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by username, email or by iri.\n     * @ignore\n     *\n     * @param  {string} identifier username, email or by iri\n     * @param  {String} identifierType\n     * @returns Observable<User>\n     */\n    getUser(identifier: string, identifierType: String): Observable<User> {\n        const path = '/admin/users/' + identifierType + '/' + encodeURIComponent(identifier);\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by IRI\n     *\n     * @param  {string} iri\n     * @returns Observable<User>\n     */\n    getUserByIri(iri: string): Observable<User> {\n        return this.getUser(iri, 'iri');\n    }\n\n    /**\n     * Get user by email\n     *\n     * @param  {string} email\n     * @returns Observable<User>\n     */\n    getUserByEmail(email: string): Observable<User> {\n        return this.getUser(email, 'email');\n    }\n\n    /**\n     * Get user by username.\n     *\n     * @param  {string} username\n     * @returns Observable<User>\n     */\n    getUserByUsername(username: string): Observable<User> {\n        return this.getUser(username, 'username');\n    }\n\n    /**\n     * Get all groups, where the user is member of\n     *\n     * @param  {string} userIri\n     * @returns Observable<Group[]>\n     */\n    getUsersGroupMemberships(userIri: string): Observable<Group[]> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships';\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new user.\n     *\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    createUser(data: any): Observable<User> {\n        const path = '/admin/users';\n        return this.httpPost(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Remove user from project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Delete user from the admin group of a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/project-admin-memberships/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    addUserToGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    /**\n     * remove user from project specific group\n     *\n     * @param {string} userIri\n     * @param {string} groupIri\n     * @returns Observable<User>\n     */\n    removeUserFromGroup(userIri: string, groupIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/group-memberships/' + encodeURIComponent(groupIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n\n    /**\n     * Add user to the admin system.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    addUserToSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': true\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n\n    }\n\n    /**\n     * Remove user from the admin system.\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    removeUserFromSystemAdmin(userIri: string): Observable<User> {\n        const data = {\n            'systemAdmin': false\n        };\n\n        return this.updateUserSystemAdmin(userIri, data);\n    }\n\n    /**\n     * Update user system admin membership\n     * @ignore\n     *\n     * @param {string} userIri\n     * @param {any} data\n     *\n     * @returns Observable<User>\n     */\n    private updateUserSystemAdmin(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/SystemAdmin';\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    activateUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Status';\n\n        const data: any = {\n            status: true\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Update own password.\n     *\n     * @param {string} userIri\n     * @param {string} oldPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: oldPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update password of another user (not own).\n     *\n     * @param {string} userIri\n     * @param {string} requesterPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/Password';\n\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: requesterPassword\n        };\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Update basic user information: given name, family name\n     * @param userIri\n     * @param data\n     * @returns Observable<User>\n     */\n    updateBasicUserInformation(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri) + '/BasicUserInformation';\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete / deactivate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    deleteUser(userIri: string): Observable<User> {\n        const path = '/admin/users/iri/' + encodeURIComponent(userIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  private subject = new Subject<any>();\n\n  setLanguage(lang: string) {\n    this.subject.next({ var: lang });\n  }\n  getLanguage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KuiCoreConfig } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusMsgService {\n\n  constructor(private _http: HttpClient,\n    @Inject(KuiCoreConfigToken) public config) {\n  }\n\n  /**\n  * this method get the status messages from the statusMsg.json file\n  * which are defined here: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  * and here: http://www.w3schools.com/tags/ref_httpmessages.asp\n  *\n  */\n  getStatusMsg(): Observable<any> {\n\n    return this._http.get(this.config.app + '/assets/i18n/statusMsg.json')\n      .pipe(map(\n        (res: any) => {\n          return res;\n        },\n        err => {\n          console.error(err);\n        }\n      )\n      );\n\n  }\n}\n","import {\n    CountQueryResult,\n    KnoraConstants,\n    ReadBooleanValue,\n    ReadColorValue,\n    ReadDateValue,\n    ReadDecimalValue,\n    ReadGeomValue,\n    ReadIntegerValue,\n    ReadIntervalValue,\n    ReadLinkValue,\n    ReadListValue,\n    ReadProperties,\n    ReadPropertyItem,\n    ReadResource,\n    ReadResourcesSequence,\n    ReadStillImageFileValue,\n    ReadTextFileValue,\n    ReadTextValueAsHtml,\n    ReadTextValueAsString,\n    ReadTextValueAsXml,\n    ReadUriValue,\n    ReferredResourcesByStandoffLink,\n    Utils\n} from '../../declarations';\n\n/**\n * Contains methods to convert JSON-LD representing resources and properties to classes.\n * These methods works only for instances of resources and properties, not for ontologies (data model).\n */\nexport module ConvertJSONLD {\n\n    /**\n     * Function to be passed to a filter used on an array of property names\n     * sorting out all non value property names.\n     *\n     * Gets all property names that refer to value objects.\n     *\n     * @param propName the name of a property to be checked.\n     * @returns boolean - indicating if the name refers to a value property.\n     */\n    const getPropertyNames = (propName) => {\n        return propName !== '@id'\n            && propName !== '@type'\n            && propName !== KnoraConstants.RdfsLabel\n            && propName !== KnoraConstants.attachedToProject\n            && propName !== KnoraConstants.attachedToUser\n            && propName !== KnoraConstants.creationDate\n            && propName !== KnoraConstants.lastModificationDate\n            && propName !== KnoraConstants.hasPermissions\n            && propName !== KnoraConstants.userHasPermission\n            && propName !== KnoraConstants.ArkUrl\n            && propName !== KnoraConstants.versionArkUrl;\n    };\n\n\n    /**\n     * Constructs a [[ReadResource]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an a resource and its properties serialized as JSON-LD.\n     * @returns ReadResource\n     */\n    function constructReadResource(resourceJSONLD: object): ReadResource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new ReadResource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            properties\n        );\n    }\n\n    /**\n     * Constructs a [[ReadPropertyItem]] from JSON-LD,\n     * taking into account the property's value type.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {Object} propValue the value serialized as JSON-LD.\n     * @param {string} propIri the Iri of the property.\n     * @param {ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.\n     * @returns a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.\n     */\n    function createValueSpecificProp(\n        propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n        // convert a JSON-LD property value to a `ReadPropertyItem`\n\n        let valueSpecificProp: ReadPropertyItem;\n\n        // check for the property's value type\n        switch (propValue['@type']) {\n            case KnoraConstants.TextValue:\n                // a text value might be given as plain string, html or xml.\n                let textValue: ReadPropertyItem;\n\n                if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                    textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n                } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                    const referredResources: ReferredResourcesByStandoffLink = {};\n\n                    // check for standoff links and include referred resources, if any\n                    // when the user interacts with a standoff link, further information about the referred resource can be shown\n                    for (const standoffLink of standoffLinkValues) {\n                        const referredRes: ReadResource = standoffLink.referredResource;\n                        referredResources[referredRes.id] = referredRes;\n                    }\n\n                    textValue = new ReadTextValueAsHtml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                    );\n                } else if (\n                    propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                    textValue = new ReadTextValueAsXml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                    );\n                } else {\n                    // expected text value members not defined\n                    console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n                }\n\n                valueSpecificProp = textValue;\n                break;\n\n            case KnoraConstants.DateValue:\n                const dateValue = new ReadDateValue(propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.dateValueHasCalendar],\n                    propValue[KnoraConstants.dateValueHasStartYear],\n                    propValue[KnoraConstants.dateValueHasEndYear],\n                    propValue[KnoraConstants.dateValueHasStartEra],\n                    propValue[KnoraConstants.dateValueHasEndEra],\n                    propValue[KnoraConstants.dateValueHasStartMonth],\n                    propValue[KnoraConstants.dateValueHasEndMonth],\n                    propValue[KnoraConstants.dateValueHasStartDay],\n                    propValue[KnoraConstants.dateValueHasEndDay]);\n\n                valueSpecificProp = dateValue;\n                break;\n\n            case KnoraConstants.LinkValue:\n\n                let linkValue: ReadLinkValue;\n\n                // check if the referred resource is given as an object or just as an IRI\n                if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                    // linkValueHasTarget contains the object\n\n                    const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n                } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                    // linkValueHasTargetIri contains the resource's Iri\n\n                    const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n                } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // linkValueHasSource contains the object\n\n                    const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n                } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                    // linkValueHasSourceIri contains the resource's Iri\n\n                    const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n                }\n\n                valueSpecificProp = linkValue;\n                break;\n\n            case KnoraConstants.IntValue:\n\n                const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n                valueSpecificProp = intValue;\n\n                break;\n\n            case KnoraConstants.DecimalValue:\n\n                // a decimal value is represented as a string in order to preserve its precision\n                const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n                const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n                valueSpecificProp = decimalValue;\n\n                break;\n\n            // TODO: handle movingImageFileValue and the others here...\n            case KnoraConstants.StillImageFileValue:\n\n                const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.stillImageFileValueHasDimX],\n                    propValue[KnoraConstants.stillImageFileValueHasDimY]\n                );\n\n                valueSpecificProp = stillImageFileValue;\n\n                break;\n\n            case KnoraConstants.TextFileValue:\n\n                const textFileValue = new ReadTextFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = textFileValue;\n\n                break;\n\n            case KnoraConstants.ColorValue:\n\n                const readColorValue: ReadColorValue = new ReadColorValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.colorValueAsColor]\n                );\n\n                valueSpecificProp = readColorValue;\n\n                break;\n\n            case KnoraConstants.GeomValue:\n\n                const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.geometryValueAsGeometry]\n                );\n\n                valueSpecificProp = readGeomValue;\n\n                break;\n\n            case KnoraConstants.UriValue:\n\n                const uriValue: ReadUriValue = new ReadUriValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.uriValueAsUri]['@value']\n                );\n\n                valueSpecificProp = uriValue;\n\n                break;\n\n            case KnoraConstants.BooleanValue:\n\n                const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.booleanValueAsBoolean]\n                );\n\n                valueSpecificProp = boolValue;\n\n                break;\n\n\n            case KnoraConstants.IntervalValue:\n\n                // represented as strings to preserve precision\n                const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n                const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n                const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                    propValue['@id'],\n                    propIri,\n                    intStart,\n                    intEnd\n                );\n\n                valueSpecificProp = intervalValue;\n\n                break;\n\n            case KnoraConstants.ListValue:\n\n                const listValue: ReadListValue = new ReadListValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.listValueAsListNode]['@id']\n                );\n\n                valueSpecificProp = listValue;\n\n                break;\n\n            default:\n                // unsupported value type\n                console.error('ERROR: value type not implemented yet: ' + propValue['@type'] + '(' + propValue['@id'] + ')');\n                break;\n        }\n\n        return valueSpecificProp;\n\n    }\n\n\n    /**\n     * Construct a [[ReadProperties]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an object describing the resource and its properties.\n     * @returns ReadProperties\n     */\n    function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n        // JSON-LD representing standoff link values\n        // text values may contain standoff links\n        const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n        // to be populated with standoff link values\n        const standoffLinkValues: ReadLinkValue[] = [];\n\n        // convert each standoff link value JSON-LD object to a ReadLinkValue\n        // in order populate the collection with all the standoff link values\n        if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n            for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n                const standoffVal: ReadLinkValue = createValueSpecificProp(\n                    standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n                ) as ReadLinkValue;\n\n                standoffLinkValues.push(standoffVal);\n            }\n        } else if (standoffLinkValuesJSONLD !== undefined) {\n            const standoffVal = createValueSpecificProp(\n                standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n\n        let propNames = Object.keys(resourceJSONLD);\n\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const properties: ReadProperties = {};\n\n        // iterate over all the given property names\n        for (const propName of propNames) {\n\n            const propValues: Array<ReadPropertyItem> = [];\n\n            // either an array of values or just one value is given\n            if (Array.isArray(resourceJSONLD[propName])) {\n                // array of values\n\n                // for each property name, an array of property values is given, iterate over it\n                for (const propValue of resourceJSONLD[propName]) {\n\n                    // convert a JSON-LD property value to a `ReadPropertyItem`\n                    const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                    // if it is undefined, the value could not be constructed correctly\n                    // add the property value to the array of property values\n                    if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n                }\n            } else {\n                // only one value\n\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n            }\n\n            // add the property to the properties object\n            properties[propName] = propValues;\n\n        }\n\n        return properties;\n    }\n\n    /**\n     * Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.\n     * @returns ReadResourcesSequence - sequence of read resources\n     */\n    export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n        const resources: Array<ReadResource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ReadResourcesSequence(resources, numberOfResources);\n\n    }\n\n    /**\n     * Collects all the types (classes) of referred resources from a given resource (from its linking properties).\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD JSON-LD describing one resource.\n     * @return string[] - an Array of resource class Iris (including duplicates).\n     */\n    function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n        let propNames = Object.keys(resourceJSONLD);\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const referredResourceClasses = [];\n\n        for (const prop of propNames) {\n\n            // several values given for this property\n            if (Array.isArray(resourceJSONLD[prop])) {\n\n                for (const referredRes of resourceJSONLD[prop]) {\n\n                    // if the property is a LinkValue and it contains an embedded resource, get its type\n                    if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                        // target resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                    } else if (\n                        referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                        // source resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                    }\n\n                }\n            } else {\n                // only one value given for this property\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                    !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                    !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n                }\n            }\n\n        }\n\n        return referredResourceClasses;\n\n    }\n\n    /**\n     * Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.\n     * @returns string[] - the resource class Iris (without duplicates).\n     */\n    export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n        let resourceClasses: Array<string> = [];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n\n            for (const resourceJSONLD of resourcesGraph) {\n                // get class of the current resource\n                resourceClasses.push(resourceJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n            }\n\n        } else {\n            // only one resource\n\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                return [];\n            } else {\n                resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n            }\n        }\n\n        // filter out duplicates\n        return resourceClasses.filter(Utils.filterOutDuplicates);\n\n    }\n\n    /**\n     * Turns a JSON-LD response to a count query into a `CountQueryResult`.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param countQueryJSONLD\n     * @returns {CountQueryResult}\n     */\n    export function createCountQueryResult(countQueryJSONLD: object) {\n        return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceError, ApiServiceResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\n/**\n * Requests representation of resources from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor (public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns Observable<ApiServiceResult>\n     */\n    getResource(iri): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource as a `ReadResourceSequence`.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        // TODO: handle case of an ApiServiceError\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n    // TODO: post, put, delete\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\nimport { ApiServiceResult, CountQueryResult, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\nexport interface FulltextSearchParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n\n    limitToStandoffClass?: string;\n}\n\nexport interface SearchByLabelParams {\n\n    limitToResourceClass?: string;\n\n    limitToProject?: string;\n}\n\n/**\n * Performs searches (fulltext or extended) and search count queries into Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor(public http: HttpClient,\n        @Inject(KuiCoreConfigToken) public config,\n        private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Assign fulltext search params to http params.\n     *\n     * @param {FulltextSearchParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processFulltextSearchParams(params: FulltextSearchParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToStandoffClass !== undefined) {\n            searchParams = searchParams.set('limitToStandoffClass', params.limitToStandoffClass);\n        }\n\n        return searchParams;\n\n    }\n    /**\n     * Assign search by label search params to http params.\n     *\n     * @param {SearchByLabelParams} params\n     * @param {HttpParams} httpParams\n     * @returns {HttpParams}\n     */\n    private processSearchByLabelParams(params: SearchByLabelParams, httpParams: HttpParams): HttpParams {\n\n        // avoid reassignment to method param\n        let searchParams = httpParams;\n\n        // HttpParams is immutable, `set` returns a new instance\n\n        if (params.limitToResourceClass !== undefined) {\n            searchParams = searchParams.set('limitToResourceClass', params.limitToResourceClass);\n        }\n\n        if (params.limitToProject !== undefined) {\n            searchParams = searchParams.set('limitToProject', params.limitToProject);\n        }\n\n        return searchParams;\n\n    }\n\n    /**\n     * Converts a JSON-LD object to a `ReadResorceSequence`.\n     * To be passed as a function pointer (arrow notation required).\n     *\n     * @param {Object} resourceResponse\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ReadResourceSequence\n        const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ReadResourceSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search.\n     * TODO: mark as deprecated, use of `doFullTextSearchReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearch(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0, params?: FulltextSearchParams): Observable<ReadResourcesSequence> {\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res: Observable<any> = this.httpGet('/v2/search/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search count query.\n     * TODO: mark as deprecated, use of `doFullTextSearchCountQueryCountQueryResult` recommended\n     *\n     * @param searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearchCountQuery(searchTerm: string, params?: FulltextSearchParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        return this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n    }\n\n    /**\n     * Performs a fulltext search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<CountQueryResult>\n     */\n    doFullTextSearchCountQueryCountQueryResult(searchTerm: string, params?: FulltextSearchParams): Observable<CountQueryResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        let httpParams = new HttpParams();\n\n        if (params !== undefined) {\n            httpParams = this.processFulltextSearchParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/search/count/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        return this.httpPost('/v2/searchextended', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search count query.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param {string} gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label.\n     * TODO: mark as deprecated, use of `searchByLabelReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabel(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        // httpGet() expects only one argument, not 2\n        return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label and turns the results in a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset offset to use.\n     * @param {FulltextSearchParams} params restrictions, if any.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabelReadResourceSequence(searchTerm: string, offset: number = 0, params?: SearchByLabelParams): Observable<ReadResourcesSequence> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        if (params !== undefined) {\n            httpParams = this.processSearchByLabelParams(params, httpParams);\n        }\n\n        const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { ReadResourcesSequence } from '../../declarations';\n\n/**\n * Requests incoming information (regions, links, stillImageRepresentations) from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IncomingService extends SearchService {\n\n    /**\n    * Returns all incoming regions for a particular resource.\n    *\n    * @param {string} resourceIRI the Iri of the resource whose Incoming regions should be returned.\n    * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n    * @returns {Observable<any>}\n    */\n    getIncomingRegions(resourceIRI: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n        // console.log('sparqlQueryStr ', sparqlQueryStr);\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n    /**\n     * Returns all the StillImageRepresentations for the given resource, if any.\n     * StillImageRepresentations link to the given resource via knora-base:isPartOf.\n     *\n     * @param {string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n\n    }\n\n\n    /**\n     * Returns all incoming links for the given resource Iri but incoming regions and still image representations.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinksForResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n/**\n * Represents the parameters of an extended search.\n */\nexport class ExtendedSearchParams {\n\n    /**\n     *\n     * @param generateGravsearch a function that generates a Gravsearch query.\n     *\n     *                           The function takes the offset\n     *                           as a parameter and returns a Gravsearch query string.\n     *                           Returns false if not set correctly (init state).\n     */\n    constructor(public generateGravsearch: (offset: number) => string | boolean) {\n\n    }\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\n/**\n * Temporarily stores the parameters of an extended search.\n */\nexport class SearchParamsService {\n\n    private _currentSearchParams;\n\n    constructor() {\n        // init with a dummy function that returns false\n        // if the application is reloaded, this will be returned\n        this._currentSearchParams = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => false));\n    }\n\n    /**\n     * Updates the parameters of an extended search.\n     *\n     * @param {ExtendedSearchParams} searchParams\n     * @returns void\n     */\n    changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n        this._currentSearchParams.next(searchParams);\n    }\n\n    /**\n     * Gets the search params of an extended search.\n     *\n     * @returns ExtendedSearchParams - search parameters\n     */\n    getSearchParams(): ExtendedSearchParams {\n        return this._currentSearchParams.getValue();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExtendedSearchParams, SearchParamsService } from './search-params.service';\nimport { KnoraConstants, KnoraSchema } from '../../declarations';\nimport { PropertyWithValue } from '../../declarations/api/operators';\n\n/**\n * Create GravSearch queries from provided parameters.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GravsearchGenerationService {\n\n    /**\n     * @ignore\n     *\n     * Map of complex knora-api value types to simple ones.\n     * Use computed property name: http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer.\n     */\n    public static typeConversionComplexToSimple = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.xsdInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.xsdDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.xsdBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.xsdString,\n        'http://api.knora.org/ontology/knora-api/v2#DateValue': KnoraConstants.dateSimple,\n        'http://api.knora.org/ontology/knora-api/v2#IntervalValue': KnoraConstants.intervalSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeomValue': KnoraConstants.geomSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ColorValue': KnoraConstants.colorSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeonameValue': KnoraConstants.geonameSimple,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.xsdUri,\n        'http://api.knora.org/ontology/knora-api/v2#StillImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#FileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DDDFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#AudioFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DocumentFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#TextFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listNodeSimple\n    };\n\n    public static complexTypeToProp = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.integerValueAsInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.decimalValueAsDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.booleanValueAsBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.valueAsString,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.uriValueAsUri,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.listValueAsListNode\n    };\n\n    constructor(private _searchParamsService: SearchParamsService) { }\n\n    /**\n     * Generates a Gravsearch query from the provided arguments.\n     *\n     * @param {PropertyWithValue[]} properties the properties specified by the user.\n     * @param {string} [mainResourceClassOption] the class of the main resource, if specified.\n     * @param {number} offset the offset to be used (nth page of results).\n     * @returns string - a KnarQL query string.\n     */\n    createGravsearchQuery(properties: PropertyWithValue[], mainResourceClassOption?: string, offset: number = 0): string {\n\n        // class restriction for the resource searched for\n        let mainResourceClass = '';\n\n        // if given, create the class restriction for the main resource\n        if (mainResourceClassOption !== undefined) {\n            mainResourceClass = `?mainRes a <${mainResourceClassOption}> .`;\n        }\n\n        // criteria for the order by statement\n        const orderByCriteria = [];\n\n        // statements to be returned in query results\n        const returnStatements = [];\n\n        // loop over given properties and create statements and filters from them\n        const props: string[] = properties.map(\n            (propWithVal: PropertyWithValue, index: number) => {\n\n                // represents the object of a statement\n                let propValue;\n                if (!propWithVal.property.isLinkProperty || propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Exists') {\n                    // it is not a linking property, create a variable for the value (to be used by a subsequent FILTER)\n                    // OR the comparison operator Exists is used in which case we do not need to specify the object any further\n                    propValue = `?propVal${index}`;\n                } else {\n                    // it is a linking property and the comparison operator is not Exists, use its IRI\n                    propValue = propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex);\n                }\n\n                // generate statement\n                let statement: string = `?mainRes <${propWithVal.property.id}> ${propValue} .`;\n\n                // check if it is a linking property that has to be wrapped in a FILTER NOT EXISTS (comparison operator NOT_EQUALS) to negate it\n                if (propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                    // do not include statement in results, because the query checks for the absence of this statement\n                    statement = `FILTER NOT EXISTS {\n${statement}\n\n\n}`;\n                } else {\n                    // TODO: check if statement should be returned returned in results (Boolean flag from checkbox)\n                    returnStatements.push(statement);\n                    statement = `\n${statement}\n\n\n`;\n                }\n\n                // generate restricting expression (e.g., a FILTER) if comparison operator is not Exists\n                let restriction: string = '';\n                // only create a FILTER if the comparison operator is not EXISTS and it is not a linking property\n                if (!propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() !== 'Exists') {\n                    // generate variable for value literal\n                    const propValueLiteral = `${propValue}Literal`;\n\n                    if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Like') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use regex function for LIKE\n                        restriction += `FILTER regex(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}, \"i\")`;\n                    } else if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Match') {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // use contains function for MATCH\n                        restriction += `FILTER <${KnoraConstants.matchFunction}>(${propValueLiteral}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.DateValue) {\n                        // handle date property\n                        restriction = `FILTER(knora-api:toSimpleDate(${propValue}) ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    } else if (propWithVal.property.objectType === KnoraConstants.ListValue) {\n                        // handle list node\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)}` + '\\n';\n                        // check for comparison operator \"not equals\"\n                        if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                            restriction = `FILTER NOT EXISTS {\n                                ${restriction}\n                            }`;\n                        }\n                    } else {\n                        // generate statement to value literal\n                        restriction = `${propValue} <${GravsearchGenerationService.complexTypeToProp[propWithVal.property.objectType]}> ${propValueLiteral}` + '\\n';\n                        // generate filter expression\n                        restriction += `FILTER(${propValueLiteral} ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.complex)})`;\n                    }\n                }\n\n                // check if current value is a sort criterion\n                if (propWithVal.isSortCriterion) orderByCriteria.push(propValue);\n\n                return `${statement}\n${restriction}\n`;\n\n            });\n\n        let orderByStatement = '';\n\n        if (orderByCriteria.length > 0) {\n            orderByStatement = `\nORDER BY ${orderByCriteria.join(' ')}\n`;\n        }\n\n        // template of the Gravsearch query with dynamic components\n        const gravsearchTemplate = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/v2#>\nCONSTRUCT {\n\n?mainRes knora-api:isMainResource true .\n\n${returnStatements.join('\\n')}\n\n} WHERE {\n\n?mainRes a knora-api:Resource .\n\n${mainResourceClass}\n\n${props.join('')}\n\n}\n${orderByStatement}`;\n\n        // offset component of the Gravsearch query\n        const offsetTemplate = `\nOFFSET ${offset}\n`;\n\n        // function that generates the same KnarQL query with the given offset\n        const generateGravsearchQueryWithCustomOffset = (localOffset: number): string => {\n            const offsetCustomTemplate = `\nOFFSET ${localOffset}\n`;\n\n            return gravsearchTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another KnarQL query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(new ExtendedSearchParams(generateGravsearchQueryWithCustomOffset));\n        }\n\n\n        return gravsearchTemplate + offsetTemplate;\n\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KuiCoreConfig, RdfDataObject, ResetTriplestoreContentResponse } from '../../declarations';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor(private http: HttpClient, @Inject(KuiCoreConfigToken) public config) { }\n\n  /**\n     * Resets the content of the triplestore.\n     *\n     * @param rdfDataObjects\n     * @returns Observable<string>\n     */\n  resetTriplestoreContent(rdfDataObjects: RdfDataObject[]): Observable<string> {\n\n    return this.http.post<ResetTriplestoreContentResponse>(this.config.api + '/admin/store/ResetTriplestoreContent', rdfDataObjects)\n      .pipe(\n        map(\n          (data) => {\n            const result: ResetTriplestoreContentResponse = data;\n            // console.log('StoreService - resetTriplestoreContent: ', result);\n            return result.message;\n          },\n          (error: HttpErrorResponse) => {\n            if (error.error instanceof Error) {\n              console.log('StoreService - resetTriplestoreContent - Client-side error occurred.', error);\n            } else {\n              console.log('StoreService - resetTriplestoreContent - Server-side error occurred.', error);\n            }\n            throw error;\n          }\n        ));\n\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicOntologyService extends ApiService {\n\n  /**\n     * returns our list of a basic ontology\n     *\n     * @returns {Observable<any>}\n     */\n  // getBasicOntology(): Observable<any> {\n  //     let url = environment.url;\n  //     return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  // }\n  getBasicOntology(): Observable<any> {\n    const url = this.config.app;\n    return this.httpGet(url + '/data/base-data/basic-ontology.json');\n    // return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceTypesService extends ApiService {\n\n  /**\n     * Get all resource types defined by the vocabulary.\n     *\n     * @param {string} iri Vocabulary iri\n     * @returns Observable<any>\n     */\n  getResourceTypesByVoc(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes?vocabulary=' + encodeURIComponent(iri));\n  }\n\n  /**\n   * Get a specific resource type.\n   *\n   * @param {string} iri resource type iri\n   * @returns Observable<any>\n   */\n  getResourceType(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes/' + encodeURIComponent(iri));\n  }\n\n\n  // putResourceType(iri)\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiServiceError, ApiServiceResult } from '../../declarations';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { KuiCoreConfigToken } from '../../core.module';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject(KuiCoreConfigToken) public config) {\n        super(http, config);\n    }\n\n    /**\n     * Gets a hierarchical list from Knora.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListFromKnora(rootNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/lists/' + encodeURIComponent(rootNodeIri));\n    }\n\n    /**\n     * Returns a list as expanded JSON-LD.\n     *\n     * @param {string} rootNodeIri the root node of the list.\n     * @return {Observable<object>} the expanded JSON-LD.\n     */\n    getList(rootNodeIri: string): Observable<object> {\n        const listJSONLD = this.getListFromKnora(rootNodeIri);\n\n        return listJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n\n    /**\n     * Gets a list node from Knora.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<ApiServiceResult | ApiServiceError>}\n     */\n    private getListNodeFromKnora(listNodeIri: string): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/node/' + encodeURIComponent(listNodeIri));\n    }\n\n    /**\n     * Returns a list node as expanded JSON-LD.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<object> {\n\n        const listNodeJSONLD = this.getListNodeFromKnora(listNodeIri);\n\n        return listNodeJSONLD.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ListService } from './list.service';\n\n/**\n * Represents a list node v2.\n */\nexport class ListNodeV2 {\n\n    readonly children: ListNodeV2[];\n\n    readonly isRootNode: boolean;\n\n    constructor(readonly id: string, readonly label: string, readonly position?: number, readonly hasRootNode?: string) {\n\n        // if hasRootNode is not given, this node is the root node.\n        this.isRootNode = (hasRootNode === undefined);\n\n        this.children = [];\n    }\n}\n\nclass ListCache {\n\n    [index: string]: ListNodeV2;\n\n}\n\nclass ListNodeIriToListNodeV2 {\n\n    [index: string]: ListNodeV2;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListCacheService {\n\n    private listCache = new ListCache();\n\n    private listNodeIriToListNodeV2 = new ListNodeIriToListNodeV2();\n\n    constructor(private _listService: ListService) {\n    }\n\n    private hasRootNode(listJSONLD) {\n        let hasRoot;\n\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode'] !== undefined) {\n            hasRoot = listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasRootNode']['@id'];\n        }\n\n        return hasRoot;\n    }\n\n    /**\n     * Converts a JSON-LD represention of a ListNodeV2 to  a `ListNodeV2`.\n     * Recursively converts child nodes.\n     *\n     * @param {object} listJSONLD the JSON-LD representation of a list node v2.\n     * @return {ListNodeV2}\n     */\n    private convertJSONLDToListNode: (listJSONLD: object) => ListNodeV2 = (listJSONLD: object) => {\n\n        const listNodeIri = listJSONLD['@id'];\n\n        const hasRootNode = this.hasRootNode(listJSONLD);\n\n        const listNode = new ListNodeV2(\n            listNodeIri,\n            listJSONLD['http://www.w3.org/2000/01/rdf-schema#label'],\n            listJSONLD['http://api.knora.org/ontology/knora-api/v2#listNodePosition'],\n            hasRootNode\n        );\n\n        // check if there are child nodes\n        if (listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'] !== undefined) {\n\n            if (Array.isArray(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode'])) {\n                // array of child nodes\n                for (const subListNode of listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']) {\n                    listNode.children.push(this.convertJSONLDToListNode(subListNode));\n                }\n            } else {\n                // single child node\n                listNode.children.push(this.convertJSONLDToListNode(listJSONLD['http://api.knora.org/ontology/knora-api/v2#hasSubListNode']));\n            }\n\n        }\n\n        this.listNodeIriToListNodeV2[listNodeIri] = listNode;\n\n        return listNode;\n    };\n\n    /**\n     * Gets a list from the cache or requests it from Knora and caches it.\n     *\n     * @param {string} rootNodeIri the Iri of the list's root node.\n     * @return {Observable<ListNodeV2>}\n     */\n    getList(rootNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list is already in cache\n        if (this.listCache[rootNodeIri] !== undefined) {\n\n            // return list from cache\n            return of(this.listCache[rootNodeIri]);\n\n        } else {\n            // get list from Knora and cache it\n\n            const listJSONLD = this._listService.getList(rootNodeIri);\n\n            const listV2: Observable<ListNodeV2> = listJSONLD.pipe(\n                map(\n                    this.convertJSONLDToListNode\n                )\n            );\n\n            return listV2.pipe(\n                map(\n                    (list: ListNodeV2) => {\n                        // write list to cache and return it\n                        this.listCache[rootNodeIri] = list;\n                        return list;\n                    }\n                )\n            );\n        }\n    }\n\n    /**\n     * Gets a list node from the cache or requests the whole list from Knora and caches it.\n     *\n     * @param {string} listNodeIri the Iri of the list node.\n     * @return {Observable<object>}\n     */\n    getListNode(listNodeIri: string): Observable<ListNodeV2> {\n\n        // check if list node is already in cache\n        if (this.listNodeIriToListNodeV2[listNodeIri] !== undefined) {\n\n            // list node is already cached\n            return of(this.listNodeIriToListNodeV2[listNodeIri]);\n\n        } else {\n\n            const listNode = this._listService.getListNode(listNodeIri);\n\n            return listNode.pipe(\n                mergeMap(\n                    (listNodeJSONLD: object) => {\n                        const hasRootNode = this.hasRootNode(listNodeJSONLD);\n\n                        if (hasRootNode !== undefined) {\n                            // get the whole list\n                            return this.getList(hasRootNode).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        } else {\n                            // this is the root node, get the whole list\n                            return this.getList(listNodeIri).pipe(\n                                map(\n                                    (completeList: ListNodeV2) => {\n                                        // get list node from cache\n                                        return this.listNodeIriToListNodeV2[listNodeIri];\n                                    })\n                            );\n                        }\n                    }\n                )\n            );\n        }\n    }\n}\n","import { KnoraConstants, KnoraSchema } from './knora-constants';\nimport { GravsearchGenerationService, Property } from '../../services';\n\n\n/**\n * An abstract interface representing a comparison operator.\n * This interface is implemented for the supported comparison operators.\n */\nexport interface ComparisonOperator {\n\n    // type of comparison operator\n    type: string;\n\n    // the label of the comparison operator to be presented to the user.\n    label: string;\n\n    // returns the class name when called on an instance\n    getClassName(): string;\n}\n\nexport class Equals implements ComparisonOperator {\n\n    type = KnoraConstants.EqualsComparisonOperator;\n    label = KnoraConstants.EqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Equals';\n    }\n}\n\n\nexport class NotEquals implements ComparisonOperator {\n\n    type = KnoraConstants.NotEqualsComparisonOperator;\n    label = KnoraConstants.NotEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'NotEquals';\n    }\n}\n\nexport class GreaterThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanEqualsComparisonOperator;\n    label = KnoraConstants.GreaterThanEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThanEquals';\n    }\n}\n\nexport class GreaterThan implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanComparisonOperator;\n    label = KnoraConstants.GreaterThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThan';\n    }\n}\n\nexport class LessThan implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanComparisonOperator;\n    label = KnoraConstants.LessThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThan';\n    }\n}\n\nexport class LessThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanEqualsComparisonOperator;\n    label = KnoraConstants.LessThanQualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThanEquals';\n    }\n}\n\n\nexport class Exists implements ComparisonOperator {\n\n    type = KnoraConstants.ExistsComparisonOperator;\n    label = KnoraConstants.ExistsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Exists';\n    }\n}\n\nexport class Like implements ComparisonOperator {\n\n    type = KnoraConstants.LikeComparisonOperator;\n    label = KnoraConstants.LikeComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Like';\n    }\n\n}\n\nexport class Match implements ComparisonOperator {\n\n    type = KnoraConstants.MatchComparisonOperator;\n    label = KnoraConstants.MatchComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Match';\n    }\n\n}\n\n/**\n * Combination of a comparison operator and a value literal or an IRI.\n * In case the comparison operator is 'Exists', no value is given.\n */\nexport class ComparisonOperatorAndValue {\n\n    constructor(readonly comparisonOperator: ComparisonOperator, readonly value?: Value) {\n    }\n}\n\n/**\n * An abstract interface representing a value: an IRI or a literal.\n */\nexport interface Value {\n\n    /**\n     * Turns the value into a SPARQL string representation.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string} SPARQL representation of the value.\n     */\n    toSparql(schema: KnoraSchema): string;\n\n}\n\n/**\n * Represents a property's value as a literal with the indication of its type.\n */\nexport class ValueLiteral implements Value {\n\n    /**\n     * Constructs a [ValueLiteral].\n     *\n     * @param {string} value the literal representation of the value.\n     * @param {string} type the type of the value (making use of xsd).\n     */\n    constructor(\n        public readonly value: string,\n        public readonly type: string) {\n    }\n\n\n    /**\n     * Creates a type annotated value literal to be used in a SPARQL query.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n\n        let literalType: string;\n\n        // check if a Knora schema conversion is necessary, e.g., knora-api:dateValue (complex) to knora-api:date (simple).\n        // xsd types will remain unchanged\n        if (schema === KnoraSchema.simple && GravsearchGenerationService.typeConversionComplexToSimple[this.type] !== undefined) {\n            // convert to simple schema\n            literalType = GravsearchGenerationService.typeConversionComplexToSimple[this.type];\n        } else {\n            // do not convert\n            literalType = this.type;\n        }\n        return `\"${this.value}\"^^<${literalType}>`;\n    }\n\n}\n\n/**\n * Represents an IRI.\n */\nexport class IRI implements Value {\n\n    /**\n     * Constructs an [IRI].\n     *\n     * @param {string} iri the IRI of a resource instance.\n     */\n    constructor(readonly iri: string) {\n    }\n\n    /**\n     * Creates a SPARQL representation of the IRI.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n        // this is an instance Iri and does not have to be converted.\n        return `<${this.iri}>`;\n    }\n\n}\n\n/**\n * An abstract interface that represents a value.\n * This interface has to be implemented for all value types (value component classes).\n */\nexport interface PropertyValue {\n\n    /**\n     * Type of the value.\n     */\n    type: string;\n\n    /**\n     * Returns the value.\n     *\n     * @returns {Value}.\n     */\n    getValue(): Value;\n\n}\n\n/**\n * Represents a property, the specified comparison operator, and value.\n */\nexport class PropertyWithValue {\n\n    /**\n     * Constructs a [PropertyWithValue].\n     *\n     * @param {Property} property the specified property.\n     * @param {ComparisonOperatorAndValue} valueLiteral the specified comparison operator and value.\n     * @param isSortCriterion indicates if the property is used as a sort criterion.\n     */\n    constructor(\n        readonly property: Property,\n        readonly valueLiteral: ComparisonOperatorAndValue,\n        readonly isSortCriterion: Boolean) {\n    }\n\n}\n\n/**\n * a list, which is used in the mat-autocomplete form field\n * contains objects with id and name. the id is usual the iri\n */\nexport interface AutocompleteItem {\n    iri: string;\n    name: string;\n    label?: string;\n}\n\n"]}